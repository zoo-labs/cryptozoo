{
  "address": "0xDc179E25437cBA4893462BEb03D66d8421e412D6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggSupply",
          "type": "uint256"
        }
      ],
      "name": "AddDrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentB",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "Breed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "BuyEgg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "Free",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Hatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "Remint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenB",
          "type": "uint256"
        }
      ],
      "name": "breedAnimals",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "breedNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "breedReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        }
      ],
      "name": "buyEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "customName",
          "type": "string"
        }
      ],
      "name": "buyName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_media",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zoo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dropAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "freeAnimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "hatchEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "media",
      "outputs": [
        {
          "internalType": "contract IMedia",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "namePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "remint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        }
      ],
      "name": "setDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setNamePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "birthday",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "customName",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Breed",
          "name": "breed",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eggID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dropID",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapped",
              "type": "bool"
            }
          ],
          "internalType": "struct IZoo.Meta",
          "name": "meta",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zoo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zooSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zooWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x335ab23a0ba3d3f9491897e08abdd2ed26af7d01b6ef2626b33568963b689ce9",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0xDc179E25437cBA4893462BEb03D66d8421e412D6",
    "transactionIndex": 1,
    "gasUsed": "4809632",
    "logsBloom": "0x
    "blockHash": "0x80cb451acaf53753e463fab6ac4acb0ad44ed54dd846196bb1a747b1b3aaade3",
    "transactionHash": "0x335ab23a0ba3d3f9491897e08abdd2ed26af7d01b6ef2626b33568963b689ce9",
    "logs": [],
    "blockNumber": 12038973,
    "cumulativeGasUsed": "5080012",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "eea750a9e0ca5249867b5edb9d3e96aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggSupply\",\"type\":\"uint256\"}],\"name\":\"AddDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentB\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"Breed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"BuyEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"Free\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Hatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"Remint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"name\":\"breedAnimals\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"breedNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"breedReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"name\":\"buyEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"}],\"name\":\"buyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_media\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zoo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dropAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"freeAnimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"hatchEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"media\",\"outputs\":[{\"internalType\":\"contract IMedia\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"remint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"}],\"name\":\"setDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zooWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ZooKeeper.sol\":\"ZooKeeper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/ZooKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n// import { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { Counters } from '@openzeppelin/contracts/utils/Counters.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IZoo } from './interfaces/IZoo.sol';\\nimport { IDrop } from './interfaces/IDrop.sol';\\nimport { IMarket } from './interfaces/IMarket.sol';\\nimport { IMedia } from './interfaces/IMedia.sol';\\n\\nimport './console.sol';\\n\\ncontract ZooKeeper is Initializable, OwnableUpgradeable {\\n  function initialize() public initializer {\\n    __Ownable_init();\\n  }\\n\\n  using SafeMath for uint256;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private dropIDs;\\n\\n  // Declare an Event\\n  event AddDrop(address indexed dropAddress, string title, uint256 eggSupply);\\n  event Breed(address indexed from, uint256 parentA, uint256 parentB, uint256 indexed eggID);\\n  event Burn(address indexed from, uint256 indexed tokenID);\\n  event BuyEgg(address indexed from, uint256 indexed eggID);\\n  event Free(address indexed from, uint256 indexed tokenID, uint256 indexed yield);\\n  event Hatch(address indexed from, uint256 eggID, uint256 indexed tokenID);\\n  event Mint(address indexed from, uint256 indexed tokenID);\\n\\n  event Swap(address indexed owner, uint256 indexed tokenID, uint256 indexed chainID);\\n  event Remint(address indexed owner, uint256 indexed tokenID, uint256 indexed chainID);\\n\\n  // Mapping of Address to Drop ID\\n  mapping(uint256 => address) public drops;\\n\\n  // Mapping of ID to Address\\n  mapping(address => uint256) public dropAddresses;\\n\\n  // Mapping of ID to NFT\\n  mapping(uint256 => IZoo.Token) public tokens;\\n\\n  // Price to set name of Token\\n  uint256 public namePrice;\\n\\n  // External contracts\\n  IMarket public market;\\n  IMedia public media;\\n  IERC20 public zoo;\\n  address public bridge;\\n\\n  modifier onlyBridge() {\\n    require(msg.sender == bridge);\\n    _;\\n  }\\n\\n  function configure(\\n    address _market,\\n    address _media,\\n    address _zoo,\\n    address _bridge\\n  ) public onlyOwner {\\n    market = IMarket(_market);\\n    media = IMedia(_media);\\n    zoo = IERC20(_zoo);\\n    bridge = _bridge;\\n  }\\n\\n  function setDrop(address dropAddress) public returns (uint256) {\\n    require(dropAddresses[dropAddress] == 0, 'Drop already added');\\n\\n    IDrop drop = IDrop(dropAddress);\\n\\n    dropIDs.increment();\\n    uint256 dropID = dropIDs.current();\\n    drops[dropID] = dropAddress;\\n    dropAddresses[dropAddress] = dropID;\\n    emit AddDrop(dropAddress, drop.title(), drop.eggSupply());\\n    return dropID;\\n  }\\n\\n  // Issue a new token to owner\\n  function mint(address owner, IZoo.Token memory token) private returns (IZoo.Token memory) {\\n    console.log('mint', owner, token.name);\\n    token = media.mintToken(owner, token);\\n    market.setBidShares(token.id, token.bidShares);\\n    tokens[token.id] = token;\\n    emit Mint(owner, token.id);\\n    return token;\\n  }\\n\\n  // Burn token owned by owner\\n  function burn(address owner, uint256 tokenID) private {\\n    console.log('burn', owner, tokenID);\\n    media.burnToken(owner, tokenID);\\n    tokens[tokenID].meta.burned = true;\\n    emit Burn(owner, tokenID);\\n  }\\n\\n  // Swap to new chain requested\\n  function swap(\\n    address owner,\\n    uint256 tokenID,\\n    uint256 chainID\\n  ) external onlyBridge {\\n    console.log('swap', owner, tokenID);\\n    burn(owner, tokenID);\\n    tokens[tokenID].meta.swapped = true;\\n    emit Swap(owner, tokenID, chainID);\\n  }\\n\\n  // Swap from new chain requested\\n  function remint(\\n    address owner,\\n    IZoo.Token memory token,\\n    uint256 chainID\\n  ) external onlyBridge {\\n    console.log('remint', owner, token.id, chainID);\\n    token = mint(owner, token);\\n    emit Remint(owner, token.id, chainID);\\n  }\\n\\n  // Accept ZOO and return Egg NFT\\n  function buyEggs(uint256 dropID, uint256 quantity) public {\\n    console.log('buyEggs', dropID, quantity);\\n    for (uint8 i = 0; i < quantity; i++) {\\n      buyEgg(dropID);\\n    }\\n  }\\n\\n  // Accept ZOO and return Egg NFT\\n  function buyEgg(uint256 dropID) public returns (IZoo.Token memory) {\\n    console.log('buyEgg', dropID);\\n\\n    // Check egg price\\n    IDrop drop = IDrop(drops[dropID]);\\n    require(zoo.balanceOf(msg.sender) >= drop.eggPrice(), 'ZK: Not Enough ZOO to purchase Egg');\\n\\n    // Transfer funds\\n    console.log('zoo.transferFrom', msg.sender, address(this), drop.eggPrice());\\n    zoo.transferFrom(msg.sender, address(this), drop.eggPrice());\\n\\n    // Get Egg from this drop\\n    IZoo.Token memory egg = drop.newEgg();\\n\\n    // Mint Egg Token\\n    egg = mint(msg.sender, egg);\\n    console.log('minted egg', egg.id);\\n\\n    emit BuyEgg(msg.sender, egg.id);\\n\\n    return egg;\\n  }\\n\\n  // Burn egg and randomly return an animal NFT\\n  function hatchEgg(uint256 dropID, uint256 eggID) public returns (IZoo.Token memory) {\\n    console.log('hatchEgg', dropID, eggID);\\n\\n    require(media.tokenExists(eggID), 'Egg is burned or does not exist');\\n\\n    // Get animal for given Egg\\n    IZoo.Token memory animal = getAnimal(dropID, eggID);\\n    animal.meta.eggID = eggID;\\n    animal.meta.dropID = dropID;\\n    console.log('animal', animal.name);\\n\\n    // ...it's hatching!\\n    animal = mint(msg.sender, animal);\\n    console.log('minted animal', animal.id, eggID);\\n\\n    // bye egg\\n    burn(msg.sender, eggID);\\n    console.log('burned', eggID);\\n\\n    emit Hatch(msg.sender, eggID, animal.id);\\n    return animal;\\n  }\\n\\n  // Breed two animals and create a hybrid egg\\n  function breedAnimals(\\n    uint256 dropID,\\n    uint256 tokenA,\\n    uint256 tokenB\\n  ) public canBreed(tokenA, tokenB) returns (IZoo.Token memory) {\\n    console.log('breedAnimals', dropID, tokenA, tokenB);\\n\\n    IZoo.Token memory egg = IDrop(drops[dropID]).newHybridEgg(IZoo.Parents({ animalA: tokens[tokenA].name, animalB: tokens[tokenB].name, tokenA: tokenA, tokenB: tokenB }));\\n\\n    // Update breeding delay for each parent\\n    updateBreedDelays(tokenA, tokenB);\\n\\n    egg = mint(msg.sender, egg);\\n    emit Breed(msg.sender, tokenA, tokenB, egg.id);\\n    return egg;\\n  }\\n\\n  // Freeing an animal burns the animal NFT and returns the ZOO to the owner\\n  function freeAnimal(uint256 tokenID) public returns (uint256 yield) {\\n    console.log('freeAnimal', tokenID);\\n\\n    IZoo.Token memory token = tokens[tokenID];\\n\\n    // Burn the token\\n    burn(msg.sender, tokenID);\\n\\n    // How long did we HODL?\\n    uint256 blockAge = block.number - token.birthday;\\n    uint256 daysOld = blockAge.div(28800);\\n\\n    // Calculate yield\\n    yield = daysOld.mul(token.rarity.yield.mul(10**18));\\n    console.log('calculateYield', blockAge, daysOld, yield);\\n\\n    // Transfer yield\\n    zoo.transfer(msg.sender, yield);\\n\\n    emit Free(msg.sender, tokenID, yield);\\n\\n    return yield;\\n  }\\n\\n  // Set price for buying a name\\n  function setNamePrice(uint256 price) public onlyOwner {\\n    namePrice = price.mul(10**18);\\n  }\\n\\n  // Buy a custom name for your NFT\\n  function buyName(uint256 tokenID, string memory customName) public {\\n    require(zoo.balanceOf(msg.sender) < namePrice, 'ZK: Not enough ZOO to purchase Name');\\n\\n    zoo.transferFrom(msg.sender, address(this), namePrice);\\n\\n    IZoo.Token memory token = tokens[tokenID];\\n    token.customName = customName;\\n    tokens[tokenID] = token;\\n  }\\n\\n  // Temporary random function\\n  function unsafeRandom() private view returns (uint256) {\\n    uint256 randomNumber = uint256(keccak256(abi.encodePacked(block.number, msg.sender, block.timestamp))) % 10000;\\n    return randomNumber;\\n  }\\n\\n  // Ensure base animal\\n  function isBaseAnimal(uint256 tokenID) private view returns (bool) {\\n    return tokens[tokenID].kind == IZoo.Type.BASE_ANIMAL;\\n  }\\n\\n  // Ensure animals can breed\\n  modifier canBreed(uint256 parentA, uint256 parentB) {\\n    console.log('canBreed', parentA, parentB);\\n\\n    require(media.tokenExists(parentA) && media.tokenExists(parentB), 'Non-existent token');\\n    require(keccak256(abi.encode(parentA)) != keccak256(abi.encode(parentB)), 'Not able to breed with self');\\n    require(breedReady(parentA) && breedReady(parentB), 'Wait for cooldown to finish.');\\n    require(isBaseAnimal(parentA) && isBaseAnimal(parentB), 'Only BASE_ANIMAL can breed.');\\n    _;\\n  }\\n\\n  // Get a random base or hybrid animal based on a given egg\\n  function getAnimal(uint256 dropID, uint256 eggID) private view returns (IZoo.Token memory) {\\n    console.log('getAnimal', dropID, eggID);\\n\\n    // Get Egg\\n    IZoo.Token memory egg = tokens[eggID];\\n\\n    // Get random animal or hybrid from Drop\\n    if (egg.kind == IZoo.Type.BASE_EGG) {\\n      console.log('getRandomAnimal', dropID, eggID);\\n      return IDrop(drops[dropID]).getRandomAnimal(unsafeRandom());\\n    } else {\\n      console.log('getRandomHybrid', dropID, eggID);\\n      return IDrop(drops[dropID]).getRandomHybrid(unsafeRandom(), egg.parents);\\n    }\\n  }\\n\\n  // Update breed delays\\n  function updateBreedDelays(uint256 parentA, uint256 parentB) private {\\n    console.log('updateBreedDelays', parentA, parentB);\\n\\n    tokens[parentA].breed.count++;\\n    tokens[parentB].breed.count++;\\n    tokens[parentA].breed.timestamp = block.timestamp;\\n    tokens[parentB].breed.timestamp = block.timestamp;\\n  }\\n\\n  // Get next timestamp token can be bred\\n  function breedNext(uint256 tokenID) public view returns (uint256) {\\n    IZoo.Token memory token = tokens[tokenID];\\n    return token.breed.timestamp + (token.breed.count * 1 days);\\n  }\\n\\n  // Check whether token is ready to breed again\\n  function breedReady(uint256 tokenID) public view returns (bool) {\\n    // Never bred? Lets go\\n    if (tokens[tokenID].breed.count == 0) {\\n      return true;\\n    }\\n    // If current timestamp is greater than the next breed time, lets go\\n    if (block.timestamp > breedNext(tokenID)) {\\n      return true;\\n    }\\n\\n    // Not ready\\n    return false;\\n  }\\n\\n  // Return total amount of ZOO in contract\\n  function zooSupply() public view onlyOwner returns (uint256) {\\n    return zoo.balanceOf(address(this));\\n  }\\n\\n  // Enable owner to withdraw ZOO if necessary\\n  function zooWithdraw(address receiver, uint256 amount) public onlyOwner returns (bool) {\\n    return zoo.transferFrom(address(this), receiver, amount.mul(10**18));\\n  }\\n}\\n\",\"keccak256\":\"0x25bc7c3d018c73487bdf834d691e3101147f7f8c3fe560ed16819123a9f41fb4\",\"license\":\"MIT\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/IDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\ninterface IDrop {\\n    function title() external view returns (string memory);\\n    function eggPrice() external view returns (uint256);\\n    function eggSupply() external view returns (uint256);\\n    function newEgg() external returns (IZoo.Token memory);\\n    function newHybridEgg(IZoo.Parents memory) external returns (IZoo.Token memory);\\n    function getRandomAnimal(uint256) external view returns (IZoo.Token memory);\\n    function getRandomHybrid(uint256, IZoo.Parents memory) external view returns (IZoo.Token memory);\\n}\\n\",\"keccak256\":\"0x0e6c6c37c950016fb45f2d7fb65775723a846c273173818f94eaab5e17f261ab\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from \\\"../Decimal.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n\\n    struct Bid {\\n        // Amount of the currency being bid\\n        uint256 amount;\\n        // Address to the ERC20 token being used to bid\\n        address currency;\\n        // Address of the bidder\\n        address bidder;\\n        // Address of the recipient\\n        address recipient;\\n        // % of the next sale to award the current owner\\n        Decimal.D256 sellOnShare;\\n    }\\n\\n    struct Ask {\\n        // Amount of the currency being asked\\n        uint256 amount;\\n        // Address to the ERC20 token being asked\\n        address currency;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal.D256 prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal.D256 creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal.D256 owner;\\n    }\\n\\n    event BidCreated(uint256 indexed tokenID, Bid bid);\\n    event BidRemoved(uint256 indexed tokenID, Bid bid);\\n    event BidFinalized(uint256 indexed tokenID, Bid bid);\\n    event AskCreated(uint256 indexed tokenID, Ask ask);\\n    event AskRemoved(uint256 indexed tokenID, Ask ask);\\n    event BidShareUpdated(uint256 indexed tokenID, BidShares bidShares);\\n\\n    function bidForTokenBidder(uint256 tokenID, address bidder)\\n        external\\n        view\\n        returns (Bid memory);\\n\\n    function currentAskForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (Ask memory);\\n\\n    function bidSharesForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (BidShares memory);\\n\\n    function isValidBid(uint256 tokenID, uint256 bidAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isValidBidShares(BidShares calldata bidShares)\\n        external\\n        pure\\n        returns (bool);\\n\\n    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function setBidShares(uint256 tokenID, BidShares calldata bidShares)\\n        external;\\n\\n    function setAsk(uint256 tokenID, Ask calldata ask) external;\\n\\n    function removeAsk(uint256 tokenID) external;\\n\\n    function setBid(\\n        uint256 tokenID,\\n        Bid calldata bid,\\n        address spender\\n    ) external;\\n\\n    function removeBid(uint256 tokenID, address bidder) external;\\n\\n    function acceptBid(uint256 tokenID, Bid calldata expectedBid) external;\\n}\\n\",\"keccak256\":\"0xb9ae2b808f01fb70d6eb41b223faf9c0d64d4a2f17826dbddba01b9125398c71\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia {\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct MediaData {\\n        // A valid URI of the content represented by this token\\n        string tokenURI;\\n        // A valid URI of the metadata associated with this token\\n        string metadataURI;\\n        // A SHA256 hash of the content pointed to by tokenURI\\n        bytes32 contentHash;\\n        // A SHA256 hash of the content pointed to by metadataURI\\n        bytes32 metadataHash;\\n    }\\n\\n    event TokenURIUpdated(uint256 indexed _tokenID, address owner, string _uri);\\n    event TokenMetadataURIUpdated(\\n        uint256 indexed _tokenID,\\n        address owner,\\n        string _uri\\n    );\\n\\n    /**\\n     * @notice Return the metadata URI for a piece of media given the token URI\\n     */\\n    function tokenMetadataURI(uint256 tokenID)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Mint new media for msg.sender.\\n     */\\n    function mint(MediaData calldata data, IMarket.BidShares calldata bidShares)\\n        external;\\n\\n    /**\\n     * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n     */\\n    function mintWithSig(\\n        address creator,\\n        MediaData calldata data,\\n        IMarket.BidShares calldata bidShares,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Transfer the token with the given ID to a given address.\\n     * Save the previous owner before the transfer, in case there is a sell-on fee.\\n     * @dev This can only be called by the auction contract specified at deployment\\n     */\\n    function auctionTransfer(uint256 tokenID, address recipient) external;\\n\\n    /**\\n     * @notice Set the ask on a piece of media\\n     */\\n    function setAsk(uint256 tokenID, IMarket.Ask calldata ask) external;\\n\\n    /**\\n     * @notice Remove the ask on a piece of media\\n     */\\n    function removeAsk(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Set the bid on a piece of media\\n     */\\n    function setBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Remove the bid on a piece of media\\n     */\\n    function removeBid(uint256 tokenID) external;\\n\\n    function acceptBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Revoke approval for a piece of media\\n     */\\n    function revokeApproval(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Update the token URI\\n     */\\n    function updateTokenURI(uint256 tokenID, string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Update the token metadata uri\\n     */\\n    function updateTokenMetadataURI(\\n        uint256 tokenID,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    // Added for Zoo\\n    function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n    function burnToken(address owner, uint256 tokenID) external;\\n    function tokenExists(uint256 tokenID) external returns (bool);\\n}\\n\",\"keccak256\":\"0x382dc461b14d9b3b5bd03e31932a9dbe7447767a804a18c42cfe690c4854ca79\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yield;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;       // originating egg\\n        uint256 dropID;      // originating drop\\n        bool burned;         // token has been burned\\n        bool swapped;        // token has been swapped\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;           // unique ID\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        string  customName;   // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0xeb9d5375388d30b614005d0cf5dec157aeac9db898a190e97de7df5692bc91df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061560580620000216000396000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c80630dae4d441461014e57806310e0af64146101635780632626f4e01461018b57806349077a4f1461019e5780634c33efa7146101be5780634f2cabdf146101de5780634f64b2be1461020c57806354d7dc93146102375780635acb50821461024a5780635eb399681461025d578063685bf0cd146102865780636fc2790e14610299578063715018a6146102ac5780637b6a8777146102b457806380f55605146102c75780638129fc1c146102da5780638da5cb5b146102e25780639c275d11146102ea5780639f1d0f59146102fd578063b22073b614610310578063c87b2cba14610319578063d4eddf7e1461032c578063de611f5514610334578063e78cea9214610347578063f2fde38b1461035a578063f62417271461036d578063f8b2462614610380575b600080fd5b61016161015c366004614958565b610393565b005b610176610171366004614cde565b610425565b60405190151581526020015b60405180910390f35b610161610199366004614cde565b610463565b606b546101b1906001600160a01b031681565b6040516101829190614fc3565b6101d16101cc366004614cde565b6104b3565b6040516101829190615312565b6101fe6101ec3660046148eb565b60676020526000908152604090205481565b604051908152602001610182565b61021f61021a366004614cde565b6108dd565b6040516101829c9b9a9998979695949392919061524c565b6101d1610245366004614d73565b610e17565b610161610258366004614905565b611362565b6101b161026b366004614cde565b6066602052600090815260409020546001600160a01b031681565b610161610294366004614d52565b6113e1565b6101d16102a7366004614d52565b61143a565b610161611636565b606c546101b1906001600160a01b031681565b606a546101b1906001600160a01b031681565b610161611671565b6101b16116e5565b6101fe6102f8366004614cde565b6116f4565b61016161030b366004614afd565b611cda565b6101fe60695481565b6101fe610327366004614cde565b611d79565b6101fe61249b565b610161610342366004614d0e565b612551565b606d546101b1906001600160a01b031681565b6101616103683660046148eb565b612e76565b61017661037b366004614ad4565b612f13565b6101fe61038e3660046148eb565b612fd9565b606d546001600160a01b031633146103aa57600080fd5b6103d8604051806040016040528060068152602001651c995b5a5b9d60d21b815250848460600151846131ae565b6103e283836131fd565b9150808260600151846001600160a01b03167f9334e83d2495be85868d3a9192f0c36a49a1b869b4d6465ff7340c2cbcacfcdc60405160405180910390a4505050565b6000818152606860205260408120600e015461044357506001919050565b61044c826116f4565b42111561045b57506001919050565b506000919050565b3361046c6116e5565b6001600160a01b03161461049b5760405162461bcd60e51b815260040161049290615204565b60405180910390fd5b6104ad81670de0b6b3a764000061356d565b60695550565b6104bb614285565b6104e36040518060400160405280600681526020016562757945676760d01b81525083613579565b60008281526066602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190614cf6565b606c546040516370a0823160e01b81526001600160a01b03909116906370a082319061059a903390600401614fc3565b60206040518083038186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190614cf6565b10156106435760405162461bcd60e51b815260206004820152602260248201527f5a4b3a204e6f7420456e6f756768205a4f4f20746f2070757263686173652045604482015261676760f01b6064820152608401610492565b6106e76040518060400160405280601081526020016f7a6f6f2e7472616e7366657246726f6d60801b8152503330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190614cf6565b6135c2565b606c60009054906101000a90046001600160a01b03166001600160a01b03166323b872dd3330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190614cf6565b6040518463ffffffff1660e01b815260040161079c93929190614fd7565b602060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190614b2f565b506000816001600160a01b0316630489a8f66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108689190810190614b7d565b905061087433826131fd565b90506108a66040518060400160405280600a8152602001696d696e7465642065676760b01b8152508260600151613579565b606081015160405133907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a39392505050565b606860205280600052604060002060009150905080600001604051806080016040529081600082018054610910906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461093c906154e8565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff909216926109cd906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906154e8565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505090806006015490806007015490806008015490806009018054610a6d906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a99906154e8565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b50505050509080600a01604051806080016040529081600082018054610b0b906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b37906154e8565b8015610b845780601f10610b5957610100808354040283529160200191610b84565b820191906000526020600020905b815481529060010190602001808311610b6757829003601f168201915b50505050508152602001600182018054610b9d906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc9906154e8565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610cac906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd8906154e8565b8015610d255780601f10610cfa57610100808354040283529160200191610d25565b820191906000526020600020905b815481529060010190602001808311610d0857829003601f168201915b50505050508152602001600182018054610d3e906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6a906154e8565b8015610db75780601f10610d8c57610100808354040283529160200191610db7565b820191906000526020600020905b815481529060010190602001808311610d9a57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610e1f614285565b8282610e4c6040518060400160405280600881526020016718d85b909c99595960c21b815250838361360b565b606b5460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190614b2f565b8015610f4b5750606b5460405162491fcf60e11b8152600481018390526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614b2f565b610f8c5760405162461bcd60e51b81526020600482015260126024820152712737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610492565b60408051602081018390520160408051601f198184030181528282528051602091820120908301859052910160405160208183030381529060405280519060200120141561101a5760405162461bcd60e51b815260206004820152601b60248201527a2737ba1030b13632903a3790313932b2b2103bb4ba341039b2b63360291b6044820152606401610492565b61102382610425565b8015611033575061103381610425565b61107e5760405162461bcd60e51b815260206004820152601c60248201527b2bb0b4ba103337b91031b7b7b63237bbb7103a37903334b734b9b41760211b6044820152606401610492565b61108782613652565b8015611097575061109781613652565b6110e15760405162461bcd60e51b815260206004820152601b60248201527a27b7363c902120a9a2afa0a724a6a0a61031b0b710313932b2b21760291b6044820152606401610492565b6111116040518060400160405280600c81526020016b6272656564416e696d616c7360a01b815250878787613691565b6000868152606660209081526040808320548151608081018352898552606890935290832060050180546001600160a01b039092169263e82baf30929091829161115a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611186906154e8565b80156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b50505050508152602001606860008a815260200190815260200160002060050180546111fe906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461122a906154e8565b80156112775780601f1061124c57610100808354040283529160200191611277565b820191906000526020600020905b81548152906001019060200180831161125a57829003601f168201915b50505050508152602001898152602001888152506040518263ffffffff1660e01b81526004016112a79190615239565b600060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112fd9190810190614b7d565b905061130986866136da565b61131333826131fd565b60608101516040805189815260208101899052929350909133917fddf1e8fec06a50aa72b8a39a06787808c53eca73b2bd1cc995681cf7b8014650910160405180910390a39695505050505050565b3361136b6116e5565b6001600160a01b0316146113915760405162461bcd60e51b815260040161049290615204565b606a80546001600160a01b039586166001600160a01b031991821617909155606b805494861694821694909417909355606c805492851692841692909217909155606d8054919093169116179055565b61140b604051806040016040528060078152602001666275794567677360c81b815250838361360b565b60005b818160ff16101561143557611422836104b3565b508061142d8161553e565b91505061140e565b505050565b611442614285565b61146d60405180604001604052806008815260200167686174636845676760c01b815250848461360b565b606b5460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190614b2f565b6115355760405162461bcd60e51b815260206004820152601f60248201527f456767206973206275726e6564206f7220646f6573206e6f74206578697374006044820152606401610492565b60006115418484613775565b610120810180518590525160209081018690526040805180820182526006815265185b9a5b585b60d21b9281019290925282015191925061158191613ed1565b61158b33826131fd565b90506115c16040518060400160405280600d81526020016c1b5a5b9d195908185b9a5b585b609a1b81525082606001518561360b565b6115cb3384613f16565b6115f360405180604001604052806006815260200165189d5c9b995960d21b81525084613579565b606081015160405184815233907fb38ba9b1c21d14e92c6b24ace95218359ca7727f16a3e622617817dd9f38305c9060200160405180910390a390505b92915050565b3361163f6116e5565b6001600160a01b0316146116655760405162461bcd60e51b815260040161049290615204565b61166f6000613ff3565b565b600054610100900460ff168061168a575060005460ff16155b6116a65760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff161580156116c8576000805461ffff19166101011790555b6116d0614045565b80156116e2576000805461ff00191690555b50565b6033546001600160a01b031690565b60008181526068602052604080822081516102008101909252805483929190829061018082019083908290829061172a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611756906154e8565b80156117a35780601f10611778576101008083540402835291602001916117a3565b820191906000526020600020905b81548152906001019060200180831161178657829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561180057634e487b7160e01b600052602160045260246000fd5b600381111561181f57634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611833906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461185f906154e8565b80156118ac5780601f10611881576101008083540402835291602001916118ac565b820191906000526020600020905b81548152906001019060200180831161188f57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820180546118e3906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461190f906154e8565b801561195c5780601f106119315761010080835404028352916020019161195c565b820191906000526020600020905b81548152906001019060200180831161193f57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054611985906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546119b1906154e8565b80156119fe5780601f106119d3576101008083540402835291602001916119fe565b820191906000526020600020905b8154815290600101906020018083116119e157829003601f168201915b50505050508152602001600182018054611a17906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a43906154e8565b8015611a905780601f10611a6557610100808354040283529160200191611a90565b820191906000526020600020905b815481529060010190602001808311611a7357829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290611b37906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611b63906154e8565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b50505050508152602001600182018054611bc9906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf5906154e8565b8015611c425780601f10611c1757610100808354040283529160200191611c42565b820191906000526020600020905b815481529060010190602001808311611c2557829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015261010081015151909150611cbf9062015180615486565b81610100015160200151611cd3919061545a565b9392505050565b606d546001600160a01b03163314611cf157600080fd5b611d18604051806040016040528060048152602001630737761760e41b81525084846140ac565b611d228383613f16565b600082815260686020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b6000611da76040518060400160405280600a815260200169199c9959505b9a5b585b60b21b81525083613579565b6000828152606860205260408082208151610200810190925280548290610180820190839082908290611dd9906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611e05906154e8565b8015611e525780601f10611e2757610100808354040283529160200191611e52565b820191906000526020600020905b815481529060010190602001808311611e3557829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff166003811115611eaf57634e487b7160e01b600052602160045260246000fd5b6003811115611ece57634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611ee2906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e906154e8565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054611f92906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611fbe906154e8565b801561200b5780601f10611fe05761010080835404028352916020019161200b565b820191906000526020600020905b815481529060010190602001808311611fee57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054612034906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612060906154e8565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b505050505081526020016001820180546120c6906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546120f2906154e8565b801561213f5780601f106121145761010080835404028352916020019161213f565b820191906000526020600020905b81548152906001019060200180831161212257829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff80821615158386015261010090910416151560608083019190915284840191909152825191820190925260138401805492909301929091829082906121e6906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612212906154e8565b801561225f5780601f106122345761010080835404028352916020019161225f565b820191906000526020600020905b81548152906001019060200180831161224257829003601f168201915b50505050508152602001600182018054612278906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546122a4906154e8565b80156122f15780601f106122c6576101008083540402835291602001916122f1565b820191906000526020600020905b8154815290600101906020018083116122d457829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015290506123633384613f16565b60008160a001514361237591906154a5565b90506000612385826170806140f3565b8351604001519091506123ab906123a490670de0b6b3a764000061356d565b829061356d565b93506123df6040518060400160405280600e81526020016d18d85b18dd5b185d19565a595b1960921b815250838387613691565b606c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612411903390889060040161501f565b602060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190614b2f565b506040518490869033907f6d330a72b03f3f443e72a146c33e5882a01427b60a36b46ac11243d0c4e31d0990600090a4505050919050565b6000336124a66116e5565b6001600160a01b0316146124cc5760405162461bcd60e51b815260040161049290615204565b606c546040516370a0823160e01b81526001600160a01b03909116906370a08231906124fc903090600401614fc3565b60206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190614cf6565b905090565b606954606c546040516370a0823160e01b81526001600160a01b03909116906370a0823190612584903390600401614fc3565b60206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190614cf6565b1061262d5760405162461bcd60e51b815260206004820152602360248201527f5a4b3a204e6f7420656e6f756768205a4f4f20746f207075726368617365204e604482015262616d6560e81b6064820152608401610492565b606c546069546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916126629133913091600401614fd7565b602060405180830381600087803b15801561267c57600080fd5b505af1158015612690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b49190614b2f565b5060008281526068602052604080822081516102008101909252805482906101808201908390829082906126e7906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612713906154e8565b80156127605780601f1061273557610100808354040283529160200191612760565b820191906000526020600020905b81548152906001019060200180831161274357829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff1660038111156127bd57634e487b7160e01b600052602160045260246000fd5b60038111156127dc57634e487b7160e01b600052602160045260246000fd5b81526020016005820180546127f0906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461281c906154e8565b80156128695780601f1061283e57610100808354040283529160200191612869565b820191906000526020600020905b81548152906001019060200180831161284c57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820180546128a0906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546128cc906154e8565b80156129195780601f106128ee57610100808354040283529160200191612919565b820191906000526020600020905b8154815290600101906020018083116128fc57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054612942906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461296e906154e8565b80156129bb5780601f10612990576101008083540402835291602001916129bb565b820191906000526020600020905b81548152906001019060200180831161299e57829003601f168201915b505050505081526020016001820180546129d4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612a00906154e8565b8015612a4d5780601f10612a2257610100808354040283529160200191612a4d565b820191906000526020600020905b815481529060010190602001808311612a3057829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290612af4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612b20906154e8565b8015612b6d5780601f10612b4257610100808354040283529160200191612b6d565b820191906000526020600020905b815481529060010190602001808311612b5057829003601f168201915b50505050508152602001600182018054612b86906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb2906154e8565b8015612bff5780601f10612bd457610100808354040283529160200191612bff565b820191906000526020600020905b815481529060010190602001808311612be257829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552808301949094529182019290925260c08301859052600086815260688252919091208251805180519495508594929391928492612c9c9284929101906143a0565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115612cf557634e487b7160e01b600052602160045260246000fd5b021790555060408201518051612d159160058401916020909101906143a0565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051612d4f9160098401916020909101906143a0565b5060e082015180518051600a840191612d6d918391602001906143a0565b506020828101518051612d8692600185019201906143a0565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff00191617921515909102919091179091556101408301518051805191926013850192612e1a92849201906143a0565b506020828101518051612e3392600185019201906143a0565b5060408281015160028301556060909201516003909101556101609290920151805151601783015560208101515160188301559091015151601990910155505050565b33612e7f6116e5565b6001600160a01b031614612ea55760405162461bcd60e51b815260040161049290615204565b6001600160a01b038116612f0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610492565b6116e281613ff3565b600033612f1e6116e5565b6001600160a01b031614612f445760405162461bcd60e51b815260040161049290615204565b606c546001600160a01b03166323b872dd3085612f6986670de0b6b3a764000061356d565b6040518463ffffffff1660e01b8152600401612f8793929190614fd7565b602060405180830381600087803b158015612fa157600080fd5b505af1158015612fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190614b2f565b6001600160a01b038116600090815260676020526040812054156130345760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b6044820152606401610492565b81613043606580546001019055565b600061304e60655490565b600081815260666020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526067909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b1580156130e457600080fd5b505afa1580156130f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131209190810190614b4b565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190614cf6565b60405161319f929190615140565b60405180910390a29392505050565b6131f7848484846040516024016131c894939291906150da565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b1790526140ff565b50505050565b613205614285565b613230604051806040016040528060048152602001631b5a5b9d60e21b815250848460400151614120565b606b54604051631dc925ff60e31b81526001600160a01b039091169063ee492ff8906132629086908690600401614ffb565b600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132b89190810190614b7d565b606a5460608201516101608301516040516375aab41d60e11b81529395506001600160a01b039092169263eb55683a926132f59291600401615325565b600060405180830381600087803b15801561330f57600080fd5b505af1158015613323573d6000803e3d6000fd5b50505050606082015160009081526068602090815260409091208351805180518694849261335792849291909101906143a0565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff021916908360038111156133b057634e487b7160e01b600052602160045260246000fd5b0217905550604082015180516133d09160058401916020909101906143a0565b50606082015160068201556080820151600782015560a0820151600882015560c0820151805161340a9160098401916020909101906143a0565b5060e082015180518051600a840191613428918391602001906143a0565b50602082810151805161344192600185019201906143a0565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff001916179215159091029190911790915561014083015180518051919260138501926134d592849201906143a0565b5060208281015180516134ee92600185019201906143a0565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b6000611cd38284615486565b6135be828260405160240161358f929190615140565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526140ff565b5050565b6131f7848484846040516024016135dc9493929190615038565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b1790526140ff565b61143583838360405160240161362393929190615162565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790526140ff565b6000600160008381526068602052604090206004015460ff16600381111561368a57634e487b7160e01b600052602160045260246000fd5b1492915050565b6131f7848484846040516024016136ab9493929190615187565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b1790526140ff565b61370e60405180604001604052806011815260200170757064617465427265656444656c61797360781b815250838361360b565b6000828152606860205260408120600e0180549161372b83615523565b90915550506000818152606860205260408120600e0180549161374d83615523565b909155505060009182526068602052604080832042600f918201819055928452922090910155565b61377d614285565b6137a96040518060400160405280600981526020016819d95d105b9a5b585b60ba1b815250848461360b565b60008281526068602052604080822081516102008101909252805482906101808201908390829082906137db906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613807906154e8565b80156138545780601f1061382957610100808354040283529160200191613854565b820191906000526020600020905b81548152906001019060200180831161383757829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff1660038111156138b157634e487b7160e01b600052602160045260246000fd5b60038111156138d057634e487b7160e01b600052602160045260246000fd5b81526020016005820180546138e4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613910906154e8565b801561395d5780601f106139325761010080835404028352916020019161395d565b820191906000526020600020905b81548152906001019060200180831161394057829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054613994906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546139c0906154e8565b8015613a0d5780601f106139e257610100808354040283529160200191613a0d565b820191906000526020600020905b8154815290600101906020018083116139f057829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054613a36906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613a62906154e8565b8015613aaf5780601f10613a8457610100808354040283529160200191613aaf565b820191906000526020600020905b815481529060010190602001808311613a9257829003601f168201915b50505050508152602001600182018054613ac8906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613af4906154e8565b8015613b415780601f10613b1657610100808354040283529160200191613b41565b820191906000526020600020905b815481529060010190602001808311613b2457829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290613be8906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613c14906154e8565b8015613c615780601f10613c3657610100808354040283529160200191613c61565b820191906000526020600020905b815481529060010190602001808311613c4457829003601f168201915b50505050508152602001600182018054613c7a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613ca6906154e8565b8015613cf35780601f10613cc857610100808354040283529160200191613cf3565b820191906000526020600020905b815481529060010190602001808311613cd657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552918201939093529101529050600081602001516003811115613d8157634e487b7160e01b600052602160045260246000fd5b1415613e5857613db96040518060400160405280600f81526020016e19d95d14985b991bdb505b9a5b585b608a1b815250858561360b565b6000848152606660205260409020546001600160a01b03166308f8bcc6613dde614167565b6040518263ffffffff1660e01b8152600401613dfc91815260200190565b60006040518083038186803b158015613e1457600080fd5b505afa158015613e28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e509190810190614b7d565b915050611630565b613e8a6040518060400160405280600f81526020016e19d95d14985b991bdb521e589c9a59608a1b815250858561360b565b6000848152606660205260409020546001600160a01b0316633b5c9856613eaf614167565b8360e001516040518363ffffffff1660e01b8152600401613dfc929190615339565b6135be8282604051602401613ee7929190615112565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526140ff565b613f3d60405180604001604052806004815260200163313ab93760e11b81525083836140ac565b606b54604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90613f6f908590859060040161501f565b600060405180830381600087803b158015613f8957600080fd5b505af1158015613f9d573d6000803e3d6000fd5b505050600082815260686020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061405e575060005460ff16155b61407a5760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff1615801561409c576000805461ffff19166101011790555b6140a46141bb565b6116d0614225565b6114358383836040516024016140c4939291906150ac565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526140ff565b6000611cd38284615472565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6114358383836040516024016141389392919061506e565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526140ff565b604080514360208201526001600160601b03193360601b16918101919091524260548201526000908190612710906074016040516020818303038152906040528051906020012060001c611630919061555e565b600054610100900460ff16806141d4575060005460ff16155b6141f05760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff161580156116d0576000805461ffff191661010117905580156116e2576000805461ff001916905550565b600054610100900460ff168061423e575060005460ff16155b61425a5760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff1615801561427c576000805461ffff19166101011790555b6116d033613ff3565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e08301528190815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200161430f6040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001614331604051806040016040528060008152602001600081525090565b815260408051608081018252600080825260208281018290529282018190526060820152910190815260200161438e6040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b815260200161439b614424565b905290565b8280546143ac906154e8565b90600052602060002090601f0160209004810192826143ce5760008555614414565b82601f106143e757805160ff1916838001178555614414565b82800160010185558215614414579182015b828111156144145782518255916020019190600101906143f9565b50614420929150614451565b5090565b6040518060600160405280614437614466565b8152602001614444614466565b815260200161439b614466565b5b808211156144205760008155600101614452565b6040518060200160405280600081525090565b80356001600160a01b038116811461449057600080fd5b919050565b8035614490816155c2565b8051614490816155c2565b600082601f8301126144bb578081fd5b81356144ce6144c982615433565b615403565b8181528460208386010111156144e2578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261450c578081fd5b815161451a6144c982615433565b81815284602083860101111561452e578283fd5b61453f8260208301602087016154bc565b949350505050565b600060608284031215614558578081fd5b614560615352565b905061456c838361463c565b815261457b836020840161463c565b602082015261458d836040840161463c565b604082015292915050565b6000606082840312156145a9578081fd5b6145b1615352565b90506145bd838361465f565b81526145cc836020840161465f565b602082015261458d836040840161465f565b6000604082840312156145ef578081fd5b6145f761537a565b9050813581526020820135602082015292915050565b60006040828403121561461e578081fd5b61462661537a565b9050815181526020820151602082015292915050565b60006020828403121561464d578081fd5b61465561539c565b9135825250919050565b600060208284031215614670578081fd5b61467861539c565b9151825250919050565b600060808284031215614693578081fd5b61469b6153be565b905081356001600160401b03808211156146b457600080fd5b6146c0858386016144ab565b835260208401359150808211156146d657600080fd5b506146e3848285016144ab565b602083015250604082013560408201526060820135606082015292915050565b600060808284031215614714578081fd5b61471c6153be565b905081516001600160401b038082111561473557600080fd5b614741858386016144fc565b8352602084015191508082111561475757600080fd5b50614764848285016144fc565b602083015250604082015160408201526060820151606082015292915050565b600060808284031215614795578081fd5b61479d6153be565b9050813581526020820135602082015260408201356147bb816155b4565b604082015260608201356147ce816155b4565b606082015292915050565b6000608082840312156147ea578081fd5b6147f26153be565b905081518152602082015160208201526040820151614810816155b4565b604082015260608201516147ce816155b4565b600060808284031215614834578081fd5b61483c6153be565b905081356001600160401b0381111561485457600080fd5b614860848285016144ab565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060808284031215614898578081fd5b6148a06153be565b905081516001600160401b038111156148b857600080fd5b6148c4848285016144fc565b82525060208201516020820152604082015160408201526060820151606082015292915050565b6000602082840312156148fc578081fd5b611cd382614479565b6000806000806080858703121561491a578283fd5b61492385614479565b935061493160208601614479565b925061493f60408601614479565b915061494d60608601614479565b905092959194509250565b60008060006060848603121561496c578081fd5b61497584614479565b925060208401356001600160401b0380821115614990578283fd5b9085019061024082880312156149a4578283fd5b6149ac6153e0565b8235828111156149ba578485fd5b6149c689828601614823565b8252506149d560208401614495565b60208201526040830135828111156149eb578485fd5b6149f7898286016144ab565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115614a2c578485fd5b614a38898286016144ab565b60c08301525060e083013582811115614a4f578485fd5b614a5b89828601614682565b60e083015250610100614a70898286016145de565b90820152610140614a8389858301614784565b6101208301526101c084013583811115614a9b578586fd5b614aa78a828701614682565b828401525050614abb886101e08501614547565b6101608201529497949650505050604092909201359150565b60008060408385031215614ae6578182fd5b614aef83614479565b946020939093013593505050565b600080600060608486031215614b11578081fd5b614b1a84614479565b95602085013595506040909401359392505050565b600060208284031215614b40578081fd5b8151611cd3816155b4565b600060208284031215614b5c578081fd5b81516001600160401b03811115614b71578182fd5b61453f848285016144fc565b600060208284031215614b8e578081fd5b81516001600160401b0380821115614ba4578283fd5b908301906102408286031215614bb8578283fd5b614bc06153e0565b825182811115614bce578485fd5b614bda87828601614887565b825250614be9602084016144a0565b6020820152604083015182811115614bff578485fd5b614c0b878286016144fc565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115614c40578485fd5b614c4c878286016144fc565b60c08301525060e083015182811115614c63578485fd5b614c6f87828601614703565b60e083015250610100614c848782860161460d565b90820152610140614c97878583016147d9565b6101208301526101c084015183811115614caf578586fd5b614cbb88828701614703565b828401525050614ccf866101e08501614598565b61016082015295945050505050565b600060208284031215614cef578081fd5b5035919050565b600060208284031215614d07578081fd5b5051919050565b60008060408385031215614d20578182fd5b8235915060208301356001600160401b03811115614d3c578182fd5b614d48858286016144ab565b9150509250929050565b60008060408385031215614d64578182fd5b50508035926020909101359150565b600080600060608486031215614d87578081fd5b505081359360208301359350604090920135919050565b60048110614dbc57634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614dd88160208601602086016154bc565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452614e1d6080850182614dc0565b905060208301518482036020860152614e368282614dc0565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452614e966080850182614dc0565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552614ed682860182614e81565b9150506020830151614eeb6020860182614d9e565b5060408301518482036040860152614f038282614dc0565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614f3b8282614dc0565b91505060e083015184820360e0860152614f558282614e08565b91505061010080840151614f758287018280518252602090810151910152565b5050610120830151610140614f8c81870183614e57565b8401518583036101c08701529050614fa48282614e08565b915050610160830151614fbb6101e0860182614dec565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061453f90830184614ec0565b6001600160a01b03929092168252602082015260400190565b60808152600061504b6080830187614dc0565b6001600160a01b0395861660208401529390941660408201526060015292915050565b6060815260006150816060830186614dc0565b6001600160a01b038516602084015282810360408401526150a28185614dc0565b9695505050505050565b6060815260006150bf6060830186614dc0565b6001600160a01b039490941660208301525060400152919050565b6080815260006150ed6080830187614dc0565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6040815260006151256040830185614dc0565b82810360208401526151378185614dc0565b95945050505050565b6040815260006151536040830185614dc0565b90508260208301529392505050565b6060815260006151756060830186614dc0565b60208301949094525060400152919050565b60808152600061519a6080830187614dc0565b6020830195909552506040810192909252606090910152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526000611cd36020830184614e08565b6102408152600061526161024083018f614e81565b61526e602084018f614d9e565b8281036040840152615280818e614dc0565b90508b60608401528a60808401528960a084015282810360c08401526152a6818a614dc0565b905082810360e08401526152ba8189614e08565b8751610100850152602088015161012085015290506152dd610140840187614e57565b8281036101c08401526152f08186614e08565b9150506153016101e0830184614dec565b9d9c50505050505050505050505050565b602081526000611cd36020830184614ec0565b82815260808101611cd36020830184614dec565b82815260406020820152600061453f6040830184614e08565b604051606081016001600160401b03811182821017156153745761537461559e565b60405290565b604080519081016001600160401b03811182821017156153745761537461559e565b604051602081016001600160401b03811182821017156153745761537461559e565b604051608081016001600160401b03811182821017156153745761537461559e565b60405161018081016001600160401b03811182821017156153745761537461559e565b604051601f8201601f191681016001600160401b038111828210171561542b5761542b61559e565b604052919050565b60006001600160401b0382111561544c5761544c61559e565b50601f01601f191660200190565b6000821982111561546d5761546d615572565b500190565b60008261548157615481615588565b500490565b60008160001904831182151516156154a0576154a0615572565b500290565b6000828210156154b7576154b7615572565b500390565b60005b838110156154d75781810151838201526020016154bf565b838111156131f75750506000910152565b600181811c908216806154fc57607f821691505b6020821081141561551d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561553757615537615572565b5060010190565b600060ff821660ff81141561555557615555615572565b60010192915050565b60008261556d5761556d615588565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146116e257600080fd5b600481106116e257600080fdfea2646970667358221220bbe9ad9e14de9e80790a81acd3857246ab800e34de411bc1c72a7610cf41ba0064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101495760003560e01c80630dae4d441461014e57806310e0af64146101635780632626f4e01461018b57806349077a4f1461019e5780634c33efa7146101be5780634f2cabdf146101de5780634f64b2be1461020c57806354d7dc93146102375780635acb50821461024a5780635eb399681461025d578063685bf0cd146102865780636fc2790e14610299578063715018a6146102ac5780637b6a8777146102b457806380f55605146102c75780638129fc1c146102da5780638da5cb5b146102e25780639c275d11146102ea5780639f1d0f59146102fd578063b22073b614610310578063c87b2cba14610319578063d4eddf7e1461032c578063de611f5514610334578063e78cea9214610347578063f2fde38b1461035a578063f62417271461036d578063f8b2462614610380575b600080fd5b61016161015c366004614958565b610393565b005b610176610171366004614cde565b610425565b60405190151581526020015b60405180910390f35b610161610199366004614cde565b610463565b606b546101b1906001600160a01b031681565b6040516101829190614fc3565b6101d16101cc366004614cde565b6104b3565b6040516101829190615312565b6101fe6101ec3660046148eb565b60676020526000908152604090205481565b604051908152602001610182565b61021f61021a366004614cde565b6108dd565b6040516101829c9b9a9998979695949392919061524c565b6101d1610245366004614d73565b610e17565b610161610258366004614905565b611362565b6101b161026b366004614cde565b6066602052600090815260409020546001600160a01b031681565b610161610294366004614d52565b6113e1565b6101d16102a7366004614d52565b61143a565b610161611636565b606c546101b1906001600160a01b031681565b606a546101b1906001600160a01b031681565b610161611671565b6101b16116e5565b6101fe6102f8366004614cde565b6116f4565b61016161030b366004614afd565b611cda565b6101fe60695481565b6101fe610327366004614cde565b611d79565b6101fe61249b565b610161610342366004614d0e565b612551565b606d546101b1906001600160a01b031681565b6101616103683660046148eb565b612e76565b61017661037b366004614ad4565b612f13565b6101fe61038e3660046148eb565b612fd9565b606d546001600160a01b031633146103aa57600080fd5b6103d8604051806040016040528060068152602001651c995b5a5b9d60d21b815250848460600151846131ae565b6103e283836131fd565b9150808260600151846001600160a01b03167f9334e83d2495be85868d3a9192f0c36a49a1b869b4d6465ff7340c2cbcacfcdc60405160405180910390a4505050565b6000818152606860205260408120600e015461044357506001919050565b61044c826116f4565b42111561045b57506001919050565b506000919050565b3361046c6116e5565b6001600160a01b03161461049b5760405162461bcd60e51b815260040161049290615204565b60405180910390fd5b6104ad81670de0b6b3a764000061356d565b60695550565b6104bb614285565b6104e36040518060400160405280600681526020016562757945676760d01b81525083613579565b60008281526066602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190614cf6565b606c546040516370a0823160e01b81526001600160a01b03909116906370a082319061059a903390600401614fc3565b60206040518083038186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190614cf6565b10156106435760405162461bcd60e51b815260206004820152602260248201527f5a4b3a204e6f7420456e6f756768205a4f4f20746f2070757263686173652045604482015261676760f01b6064820152608401610492565b6106e76040518060400160405280601081526020016f7a6f6f2e7472616e7366657246726f6d60801b8152503330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190614cf6565b6135c2565b606c60009054906101000a90046001600160a01b03166001600160a01b03166323b872dd3330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190614cf6565b6040518463ffffffff1660e01b815260040161079c93929190614fd7565b602060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190614b2f565b506000816001600160a01b0316630489a8f66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108689190810190614b7d565b905061087433826131fd565b90506108a66040518060400160405280600a8152602001696d696e7465642065676760b01b8152508260600151613579565b606081015160405133907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a39392505050565b606860205280600052604060002060009150905080600001604051806080016040529081600082018054610910906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461093c906154e8565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff909216926109cd906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546109f9906154e8565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b505050505090806006015490806007015490806008015490806009018054610a6d906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a99906154e8565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b50505050509080600a01604051806080016040529081600082018054610b0b906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b37906154e8565b8015610b845780601f10610b5957610100808354040283529160200191610b84565b820191906000526020600020905b815481529060010190602001808311610b6757829003601f168201915b50505050508152602001600182018054610b9d906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc9906154e8565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610cac906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd8906154e8565b8015610d255780601f10610cfa57610100808354040283529160200191610d25565b820191906000526020600020905b815481529060010190602001808311610d0857829003601f168201915b50505050508152602001600182018054610d3e906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6a906154e8565b8015610db75780601f10610d8c57610100808354040283529160200191610db7565b820191906000526020600020905b815481529060010190602001808311610d9a57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610e1f614285565b8282610e4c6040518060400160405280600881526020016718d85b909c99595960c21b815250838361360b565b606b5460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190614b2f565b8015610f4b5750606b5460405162491fcf60e11b8152600481018390526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614b2f565b610f8c5760405162461bcd60e51b81526020600482015260126024820152712737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610492565b60408051602081018390520160408051601f198184030181528282528051602091820120908301859052910160405160208183030381529060405280519060200120141561101a5760405162461bcd60e51b815260206004820152601b60248201527a2737ba1030b13632903a3790313932b2b2103bb4ba341039b2b63360291b6044820152606401610492565b61102382610425565b8015611033575061103381610425565b61107e5760405162461bcd60e51b815260206004820152601c60248201527b2bb0b4ba103337b91031b7b7b63237bbb7103a37903334b734b9b41760211b6044820152606401610492565b61108782613652565b8015611097575061109781613652565b6110e15760405162461bcd60e51b815260206004820152601b60248201527a27b7363c902120a9a2afa0a724a6a0a61031b0b710313932b2b21760291b6044820152606401610492565b6111116040518060400160405280600c81526020016b6272656564416e696d616c7360a01b815250878787613691565b6000868152606660209081526040808320548151608081018352898552606890935290832060050180546001600160a01b039092169263e82baf30929091829161115a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611186906154e8565b80156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b50505050508152602001606860008a815260200190815260200160002060050180546111fe906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461122a906154e8565b80156112775780601f1061124c57610100808354040283529160200191611277565b820191906000526020600020905b81548152906001019060200180831161125a57829003601f168201915b50505050508152602001898152602001888152506040518263ffffffff1660e01b81526004016112a79190615239565b600060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112fd9190810190614b7d565b905061130986866136da565b61131333826131fd565b60608101516040805189815260208101899052929350909133917fddf1e8fec06a50aa72b8a39a06787808c53eca73b2bd1cc995681cf7b8014650910160405180910390a39695505050505050565b3361136b6116e5565b6001600160a01b0316146113915760405162461bcd60e51b815260040161049290615204565b606a80546001600160a01b039586166001600160a01b031991821617909155606b805494861694821694909417909355606c805492851692841692909217909155606d8054919093169116179055565b61140b604051806040016040528060078152602001666275794567677360c81b815250838361360b565b60005b818160ff16101561143557611422836104b3565b508061142d8161553e565b91505061140e565b505050565b611442614285565b61146d60405180604001604052806008815260200167686174636845676760c01b815250848461360b565b606b5460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190614b2f565b6115355760405162461bcd60e51b815260206004820152601f60248201527f456767206973206275726e6564206f7220646f6573206e6f74206578697374006044820152606401610492565b60006115418484613775565b610120810180518590525160209081018690526040805180820182526006815265185b9a5b585b60d21b9281019290925282015191925061158191613ed1565b61158b33826131fd565b90506115c16040518060400160405280600d81526020016c1b5a5b9d195908185b9a5b585b609a1b81525082606001518561360b565b6115cb3384613f16565b6115f360405180604001604052806006815260200165189d5c9b995960d21b81525084613579565b606081015160405184815233907fb38ba9b1c21d14e92c6b24ace95218359ca7727f16a3e622617817dd9f38305c9060200160405180910390a390505b92915050565b3361163f6116e5565b6001600160a01b0316146116655760405162461bcd60e51b815260040161049290615204565b61166f6000613ff3565b565b600054610100900460ff168061168a575060005460ff16155b6116a65760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff161580156116c8576000805461ffff19166101011790555b6116d0614045565b80156116e2576000805461ff00191690555b50565b6033546001600160a01b031690565b60008181526068602052604080822081516102008101909252805483929190829061018082019083908290829061172a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611756906154e8565b80156117a35780601f10611778576101008083540402835291602001916117a3565b820191906000526020600020905b81548152906001019060200180831161178657829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561180057634e487b7160e01b600052602160045260246000fd5b600381111561181f57634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611833906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461185f906154e8565b80156118ac5780601f10611881576101008083540402835291602001916118ac565b820191906000526020600020905b81548152906001019060200180831161188f57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820180546118e3906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461190f906154e8565b801561195c5780601f106119315761010080835404028352916020019161195c565b820191906000526020600020905b81548152906001019060200180831161193f57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054611985906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546119b1906154e8565b80156119fe5780601f106119d3576101008083540402835291602001916119fe565b820191906000526020600020905b8154815290600101906020018083116119e157829003601f168201915b50505050508152602001600182018054611a17906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a43906154e8565b8015611a905780601f10611a6557610100808354040283529160200191611a90565b820191906000526020600020905b815481529060010190602001808311611a7357829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290611b37906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611b63906154e8565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b50505050508152602001600182018054611bc9906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf5906154e8565b8015611c425780601f10611c1757610100808354040283529160200191611c42565b820191906000526020600020905b815481529060010190602001808311611c2557829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015261010081015151909150611cbf9062015180615486565b81610100015160200151611cd3919061545a565b9392505050565b606d546001600160a01b03163314611cf157600080fd5b611d18604051806040016040528060048152602001630737761760e41b81525084846140ac565b611d228383613f16565b600082815260686020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b6000611da76040518060400160405280600a815260200169199c9959505b9a5b585b60b21b81525083613579565b6000828152606860205260408082208151610200810190925280548290610180820190839082908290611dd9906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611e05906154e8565b8015611e525780601f10611e2757610100808354040283529160200191611e52565b820191906000526020600020905b815481529060010190602001808311611e3557829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff166003811115611eaf57634e487b7160e01b600052602160045260246000fd5b6003811115611ece57634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611ee2906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e906154e8565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054611f92906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611fbe906154e8565b801561200b5780601f10611fe05761010080835404028352916020019161200b565b820191906000526020600020905b815481529060010190602001808311611fee57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054612034906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612060906154e8565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b505050505081526020016001820180546120c6906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546120f2906154e8565b801561213f5780601f106121145761010080835404028352916020019161213f565b820191906000526020600020905b81548152906001019060200180831161212257829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff80821615158386015261010090910416151560608083019190915284840191909152825191820190925260138401805492909301929091829082906121e6906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612212906154e8565b801561225f5780601f106122345761010080835404028352916020019161225f565b820191906000526020600020905b81548152906001019060200180831161224257829003601f168201915b50505050508152602001600182018054612278906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546122a4906154e8565b80156122f15780601f106122c6576101008083540402835291602001916122f1565b820191906000526020600020905b8154815290600101906020018083116122d457829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015290506123633384613f16565b60008160a001514361237591906154a5565b90506000612385826170806140f3565b8351604001519091506123ab906123a490670de0b6b3a764000061356d565b829061356d565b93506123df6040518060400160405280600e81526020016d18d85b18dd5b185d19565a595b1960921b815250838387613691565b606c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612411903390889060040161501f565b602060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190614b2f565b506040518490869033907f6d330a72b03f3f443e72a146c33e5882a01427b60a36b46ac11243d0c4e31d0990600090a4505050919050565b6000336124a66116e5565b6001600160a01b0316146124cc5760405162461bcd60e51b815260040161049290615204565b606c546040516370a0823160e01b81526001600160a01b03909116906370a08231906124fc903090600401614fc3565b60206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190614cf6565b905090565b606954606c546040516370a0823160e01b81526001600160a01b03909116906370a0823190612584903390600401614fc3565b60206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190614cf6565b1061262d5760405162461bcd60e51b815260206004820152602360248201527f5a4b3a204e6f7420656e6f756768205a4f4f20746f207075726368617365204e604482015262616d6560e81b6064820152608401610492565b606c546069546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916126629133913091600401614fd7565b602060405180830381600087803b15801561267c57600080fd5b505af1158015612690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b49190614b2f565b5060008281526068602052604080822081516102008101909252805482906101808201908390829082906126e7906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612713906154e8565b80156127605780601f1061273557610100808354040283529160200191612760565b820191906000526020600020905b81548152906001019060200180831161274357829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff1660038111156127bd57634e487b7160e01b600052602160045260246000fd5b60038111156127dc57634e487b7160e01b600052602160045260246000fd5b81526020016005820180546127f0906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461281c906154e8565b80156128695780601f1061283e57610100808354040283529160200191612869565b820191906000526020600020905b81548152906001019060200180831161284c57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820180546128a0906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546128cc906154e8565b80156129195780601f106128ee57610100808354040283529160200191612919565b820191906000526020600020905b8154815290600101906020018083116128fc57829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054612942906154e8565b80601f016020809104026020016040519081016040528092919081815260200182805461296e906154e8565b80156129bb5780601f10612990576101008083540402835291602001916129bb565b820191906000526020600020905b81548152906001019060200180831161299e57829003601f168201915b505050505081526020016001820180546129d4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612a00906154e8565b8015612a4d5780601f10612a2257610100808354040283529160200191612a4d565b820191906000526020600020905b815481529060010190602001808311612a3057829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290612af4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612b20906154e8565b8015612b6d5780601f10612b4257610100808354040283529160200191612b6d565b820191906000526020600020905b815481529060010190602001808311612b5057829003601f168201915b50505050508152602001600182018054612b86906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb2906154e8565b8015612bff5780601f10612bd457610100808354040283529160200191612bff565b820191906000526020600020905b815481529060010190602001808311612be257829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552808301949094529182019290925260c08301859052600086815260688252919091208251805180519495508594929391928492612c9c9284929101906143a0565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115612cf557634e487b7160e01b600052602160045260246000fd5b021790555060408201518051612d159160058401916020909101906143a0565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051612d4f9160098401916020909101906143a0565b5060e082015180518051600a840191612d6d918391602001906143a0565b506020828101518051612d8692600185019201906143a0565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff00191617921515909102919091179091556101408301518051805191926013850192612e1a92849201906143a0565b506020828101518051612e3392600185019201906143a0565b5060408281015160028301556060909201516003909101556101609290920151805151601783015560208101515160188301559091015151601990910155505050565b33612e7f6116e5565b6001600160a01b031614612ea55760405162461bcd60e51b815260040161049290615204565b6001600160a01b038116612f0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610492565b6116e281613ff3565b600033612f1e6116e5565b6001600160a01b031614612f445760405162461bcd60e51b815260040161049290615204565b606c546001600160a01b03166323b872dd3085612f6986670de0b6b3a764000061356d565b6040518463ffffffff1660e01b8152600401612f8793929190614fd7565b602060405180830381600087803b158015612fa157600080fd5b505af1158015612fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190614b2f565b6001600160a01b038116600090815260676020526040812054156130345760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b6044820152606401610492565b81613043606580546001019055565b600061304e60655490565b600081815260666020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526067909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b1580156130e457600080fd5b505afa1580156130f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131209190810190614b4b565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190614cf6565b60405161319f929190615140565b60405180910390a29392505050565b6131f7848484846040516024016131c894939291906150da565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b1790526140ff565b50505050565b613205614285565b613230604051806040016040528060048152602001631b5a5b9d60e21b815250848460400151614120565b606b54604051631dc925ff60e31b81526001600160a01b039091169063ee492ff8906132629086908690600401614ffb565b600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132b89190810190614b7d565b606a5460608201516101608301516040516375aab41d60e11b81529395506001600160a01b039092169263eb55683a926132f59291600401615325565b600060405180830381600087803b15801561330f57600080fd5b505af1158015613323573d6000803e3d6000fd5b50505050606082015160009081526068602090815260409091208351805180518694849261335792849291909101906143a0565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff021916908360038111156133b057634e487b7160e01b600052602160045260246000fd5b0217905550604082015180516133d09160058401916020909101906143a0565b50606082015160068201556080820151600782015560a0820151600882015560c0820151805161340a9160098401916020909101906143a0565b5060e082015180518051600a840191613428918391602001906143a0565b50602082810151805161344192600185019201906143a0565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff001916179215159091029190911790915561014083015180518051919260138501926134d592849201906143a0565b5060208281015180516134ee92600185019201906143a0565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b6000611cd38284615486565b6135be828260405160240161358f929190615140565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526140ff565b5050565b6131f7848484846040516024016135dc9493929190615038565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b1790526140ff565b61143583838360405160240161362393929190615162565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790526140ff565b6000600160008381526068602052604090206004015460ff16600381111561368a57634e487b7160e01b600052602160045260246000fd5b1492915050565b6131f7848484846040516024016136ab9493929190615187565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b1790526140ff565b61370e60405180604001604052806011815260200170757064617465427265656444656c61797360781b815250838361360b565b6000828152606860205260408120600e0180549161372b83615523565b90915550506000818152606860205260408120600e0180549161374d83615523565b909155505060009182526068602052604080832042600f918201819055928452922090910155565b61377d614285565b6137a96040518060400160405280600981526020016819d95d105b9a5b585b60ba1b815250848461360b565b60008281526068602052604080822081516102008101909252805482906101808201908390829082906137db906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613807906154e8565b80156138545780601f1061382957610100808354040283529160200191613854565b820191906000526020600020905b81548152906001019060200180831161383757829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff1660038111156138b157634e487b7160e01b600052602160045260246000fd5b60038111156138d057634e487b7160e01b600052602160045260246000fd5b81526020016005820180546138e4906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613910906154e8565b801561395d5780601f106139325761010080835404028352916020019161395d565b820191906000526020600020905b81548152906001019060200180831161394057829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054613994906154e8565b80601f01602080910402602001604051908101604052809291908181526020018280546139c0906154e8565b8015613a0d5780601f106139e257610100808354040283529160200191613a0d565b820191906000526020600020905b8154815290600101906020018083116139f057829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054613a36906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613a62906154e8565b8015613aaf5780601f10613a8457610100808354040283529160200191613aaf565b820191906000526020600020905b815481529060010190602001808311613a9257829003601f168201915b50505050508152602001600182018054613ac8906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613af4906154e8565b8015613b415780601f10613b1657610100808354040283529160200191613b41565b820191906000526020600020905b815481529060010190602001808311613b2457829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290613be8906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613c14906154e8565b8015613c615780601f10613c3657610100808354040283529160200191613c61565b820191906000526020600020905b815481529060010190602001808311613c4457829003601f168201915b50505050508152602001600182018054613c7a906154e8565b80601f0160208091040260200160405190810160405280929190818152602001828054613ca6906154e8565b8015613cf35780601f10613cc857610100808354040283529160200191613cf3565b820191906000526020600020905b815481529060010190602001808311613cd657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552918201939093529101529050600081602001516003811115613d8157634e487b7160e01b600052602160045260246000fd5b1415613e5857613db96040518060400160405280600f81526020016e19d95d14985b991bdb505b9a5b585b608a1b815250858561360b565b6000848152606660205260409020546001600160a01b03166308f8bcc6613dde614167565b6040518263ffffffff1660e01b8152600401613dfc91815260200190565b60006040518083038186803b158015613e1457600080fd5b505afa158015613e28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e509190810190614b7d565b915050611630565b613e8a6040518060400160405280600f81526020016e19d95d14985b991bdb521e589c9a59608a1b815250858561360b565b6000848152606660205260409020546001600160a01b0316633b5c9856613eaf614167565b8360e001516040518363ffffffff1660e01b8152600401613dfc929190615339565b6135be8282604051602401613ee7929190615112565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526140ff565b613f3d60405180604001604052806004815260200163313ab93760e11b81525083836140ac565b606b54604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90613f6f908590859060040161501f565b600060405180830381600087803b158015613f8957600080fd5b505af1158015613f9d573d6000803e3d6000fd5b505050600082815260686020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061405e575060005460ff16155b61407a5760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff1615801561409c576000805461ffff19166101011790555b6140a46141bb565b6116d0614225565b6114358383836040516024016140c4939291906150ac565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526140ff565b6000611cd38284615472565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6114358383836040516024016141389392919061506e565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526140ff565b604080514360208201526001600160601b03193360601b16918101919091524260548201526000908190612710906074016040516020818303038152906040528051906020012060001c611630919061555e565b600054610100900460ff16806141d4575060005460ff16155b6141f05760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff161580156116d0576000805461ffff191661010117905580156116e2576000805461ff001916905550565b600054610100900460ff168061423e575060005460ff16155b61425a5760405162461bcd60e51b8152600401610492906151b6565b600054610100900460ff1615801561427c576000805461ffff19166101011790555b6116d033613ff3565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e08301528190815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200161430f6040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001614331604051806040016040528060008152602001600081525090565b815260408051608081018252600080825260208281018290529282018190526060820152910190815260200161438e6040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b815260200161439b614424565b905290565b8280546143ac906154e8565b90600052602060002090601f0160209004810192826143ce5760008555614414565b82601f106143e757805160ff1916838001178555614414565b82800160010185558215614414579182015b828111156144145782518255916020019190600101906143f9565b50614420929150614451565b5090565b6040518060600160405280614437614466565b8152602001614444614466565b815260200161439b614466565b5b808211156144205760008155600101614452565b6040518060200160405280600081525090565b80356001600160a01b038116811461449057600080fd5b919050565b8035614490816155c2565b8051614490816155c2565b600082601f8301126144bb578081fd5b81356144ce6144c982615433565b615403565b8181528460208386010111156144e2578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261450c578081fd5b815161451a6144c982615433565b81815284602083860101111561452e578283fd5b61453f8260208301602087016154bc565b949350505050565b600060608284031215614558578081fd5b614560615352565b905061456c838361463c565b815261457b836020840161463c565b602082015261458d836040840161463c565b604082015292915050565b6000606082840312156145a9578081fd5b6145b1615352565b90506145bd838361465f565b81526145cc836020840161465f565b602082015261458d836040840161465f565b6000604082840312156145ef578081fd5b6145f761537a565b9050813581526020820135602082015292915050565b60006040828403121561461e578081fd5b61462661537a565b9050815181526020820151602082015292915050565b60006020828403121561464d578081fd5b61465561539c565b9135825250919050565b600060208284031215614670578081fd5b61467861539c565b9151825250919050565b600060808284031215614693578081fd5b61469b6153be565b905081356001600160401b03808211156146b457600080fd5b6146c0858386016144ab565b835260208401359150808211156146d657600080fd5b506146e3848285016144ab565b602083015250604082013560408201526060820135606082015292915050565b600060808284031215614714578081fd5b61471c6153be565b905081516001600160401b038082111561473557600080fd5b614741858386016144fc565b8352602084015191508082111561475757600080fd5b50614764848285016144fc565b602083015250604082015160408201526060820151606082015292915050565b600060808284031215614795578081fd5b61479d6153be565b9050813581526020820135602082015260408201356147bb816155b4565b604082015260608201356147ce816155b4565b606082015292915050565b6000608082840312156147ea578081fd5b6147f26153be565b905081518152602082015160208201526040820151614810816155b4565b604082015260608201516147ce816155b4565b600060808284031215614834578081fd5b61483c6153be565b905081356001600160401b0381111561485457600080fd5b614860848285016144ab565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060808284031215614898578081fd5b6148a06153be565b905081516001600160401b038111156148b857600080fd5b6148c4848285016144fc565b82525060208201516020820152604082015160408201526060820151606082015292915050565b6000602082840312156148fc578081fd5b611cd382614479565b6000806000806080858703121561491a578283fd5b61492385614479565b935061493160208601614479565b925061493f60408601614479565b915061494d60608601614479565b905092959194509250565b60008060006060848603121561496c578081fd5b61497584614479565b925060208401356001600160401b0380821115614990578283fd5b9085019061024082880312156149a4578283fd5b6149ac6153e0565b8235828111156149ba578485fd5b6149c689828601614823565b8252506149d560208401614495565b60208201526040830135828111156149eb578485fd5b6149f7898286016144ab565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115614a2c578485fd5b614a38898286016144ab565b60c08301525060e083013582811115614a4f578485fd5b614a5b89828601614682565b60e083015250610100614a70898286016145de565b90820152610140614a8389858301614784565b6101208301526101c084013583811115614a9b578586fd5b614aa78a828701614682565b828401525050614abb886101e08501614547565b6101608201529497949650505050604092909201359150565b60008060408385031215614ae6578182fd5b614aef83614479565b946020939093013593505050565b600080600060608486031215614b11578081fd5b614b1a84614479565b95602085013595506040909401359392505050565b600060208284031215614b40578081fd5b8151611cd3816155b4565b600060208284031215614b5c578081fd5b81516001600160401b03811115614b71578182fd5b61453f848285016144fc565b600060208284031215614b8e578081fd5b81516001600160401b0380821115614ba4578283fd5b908301906102408286031215614bb8578283fd5b614bc06153e0565b825182811115614bce578485fd5b614bda87828601614887565b825250614be9602084016144a0565b6020820152604083015182811115614bff578485fd5b614c0b878286016144fc565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115614c40578485fd5b614c4c878286016144fc565b60c08301525060e083015182811115614c63578485fd5b614c6f87828601614703565b60e083015250610100614c848782860161460d565b90820152610140614c97878583016147d9565b6101208301526101c084015183811115614caf578586fd5b614cbb88828701614703565b828401525050614ccf866101e08501614598565b61016082015295945050505050565b600060208284031215614cef578081fd5b5035919050565b600060208284031215614d07578081fd5b5051919050565b60008060408385031215614d20578182fd5b8235915060208301356001600160401b03811115614d3c578182fd5b614d48858286016144ab565b9150509250929050565b60008060408385031215614d64578182fd5b50508035926020909101359150565b600080600060608486031215614d87578081fd5b505081359360208301359350604090920135919050565b60048110614dbc57634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614dd88160208601602086016154bc565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452614e1d6080850182614dc0565b905060208301518482036020860152614e368282614dc0565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452614e966080850182614dc0565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552614ed682860182614e81565b9150506020830151614eeb6020860182614d9e565b5060408301518482036040860152614f038282614dc0565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614f3b8282614dc0565b91505060e083015184820360e0860152614f558282614e08565b91505061010080840151614f758287018280518252602090810151910152565b5050610120830151610140614f8c81870183614e57565b8401518583036101c08701529050614fa48282614e08565b915050610160830151614fbb6101e0860182614dec565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061453f90830184614ec0565b6001600160a01b03929092168252602082015260400190565b60808152600061504b6080830187614dc0565b6001600160a01b0395861660208401529390941660408201526060015292915050565b6060815260006150816060830186614dc0565b6001600160a01b038516602084015282810360408401526150a28185614dc0565b9695505050505050565b6060815260006150bf6060830186614dc0565b6001600160a01b039490941660208301525060400152919050565b6080815260006150ed6080830187614dc0565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6040815260006151256040830185614dc0565b82810360208401526151378185614dc0565b95945050505050565b6040815260006151536040830185614dc0565b90508260208301529392505050565b6060815260006151756060830186614dc0565b60208301949094525060400152919050565b60808152600061519a6080830187614dc0565b6020830195909552506040810192909252606090910152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526000611cd36020830184614e08565b6102408152600061526161024083018f614e81565b61526e602084018f614d9e565b8281036040840152615280818e614dc0565b90508b60608401528a60808401528960a084015282810360c08401526152a6818a614dc0565b905082810360e08401526152ba8189614e08565b8751610100850152602088015161012085015290506152dd610140840187614e57565b8281036101c08401526152f08186614e08565b9150506153016101e0830184614dec565b9d9c50505050505050505050505050565b602081526000611cd36020830184614ec0565b82815260808101611cd36020830184614dec565b82815260406020820152600061453f6040830184614e08565b604051606081016001600160401b03811182821017156153745761537461559e565b60405290565b604080519081016001600160401b03811182821017156153745761537461559e565b604051602081016001600160401b03811182821017156153745761537461559e565b604051608081016001600160401b03811182821017156153745761537461559e565b60405161018081016001600160401b03811182821017156153745761537461559e565b604051601f8201601f191681016001600160401b038111828210171561542b5761542b61559e565b604052919050565b60006001600160401b0382111561544c5761544c61559e565b50601f01601f191660200190565b6000821982111561546d5761546d615572565b500190565b60008261548157615481615588565b500490565b60008160001904831182151516156154a0576154a0615572565b500290565b6000828210156154b7576154b7615572565b500390565b60005b838110156154d75781810151838201526020016154bf565b838111156131f75750506000910152565b600181811c908216806154fc57607f821691505b6020821081141561551d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561553757615537615572565b5060010190565b600060ff821660ff81141561555557615555615572565b60010192915050565b60008261556d5761556d615588565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146116e257600080fd5b600481106116e257600080fdfea2646970667358221220bbe9ad9e14de9e80790a81acd3857246ab800e34de411bc1c72a7610cf41ba0064736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 889,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13727,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropIDs",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Counter)3774_storage"
      },
      {
        "astId": 13799,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "drops",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13803,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropAddresses",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13808,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "tokens",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_struct(Token)24962_storage)"
      },
      {
        "astId": 13810,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "namePrice",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 13813,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "market",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IMarket)24707"
      },
      {
        "astId": 13816,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "media",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IMedia)24887"
      },
      {
        "astId": 13819,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "zoo",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IERC20)2130"
      },
      {
        "astId": 13821,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "bridge",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2130": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMarket)24707": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IMedia)24887": {
        "encoding": "inplace",
        "label": "contract IMedia",
        "numberOfBytes": "20"
      },
      "t_enum(Type)24898": {
        "encoding": "inplace",
        "label": "enum IZoo.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Token)24962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IZoo.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)24962_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BidShares)24565_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.BidShares",
        "members": [
          {
            "astId": 24558,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "prevOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(D256)7520_storage"
          },
          {
            "astId": 24561,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(D256)7520_storage"
          },
          {
            "astId": 24564,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(D256)7520_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Breed)24912_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Breed",
        "members": [
          {
            "astId": 24909,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24911,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3774_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3773,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(D256)7520_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.D256",
        "members": [
          {
            "astId": 7519,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MediaData)24733_storage": {
        "encoding": "inplace",
        "label": "struct IMedia.MediaData",
        "members": [
          {
            "astId": 24726,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24728,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 24730,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 24732,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Meta)24930_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Meta",
        "members": [
          {
            "astId": 24923,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "eggID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24925,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "dropID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24927,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "burned",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 24929,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "swapped",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Parents)24921_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Parents",
        "members": [
          {
            "astId": 24914,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalA",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24916,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalB",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 24918,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24920,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenB",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rarity)24907_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Rarity",
        "members": [
          {
            "astId": 24900,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24902,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "probability",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24904,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "yield",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24906,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "boost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)24962_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Token",
        "members": [
          {
            "astId": 24933,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "rarity",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Rarity)24907_storage"
          },
          {
            "astId": 24936,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "kind",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Type)24898"
          },
          {
            "astId": 24938,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 24940,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "id",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24942,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 24944,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "birthday",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 24946,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "customName",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 24949,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "parents",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Parents)24921_storage"
          },
          {
            "astId": 24952,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "breed",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(Breed)24912_storage"
          },
          {
            "astId": 24955,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "meta",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(Meta)24930_storage"
          },
          {
            "astId": 24958,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "data",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(MediaData)24733_storage"
          },
          {
            "astId": 24961,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "bidShares",
            "offset": 0,
            "slot": "23",
            "type": "t_struct(BidShares)24565_storage"
          }
        ],
        "numberOfBytes": "832"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}