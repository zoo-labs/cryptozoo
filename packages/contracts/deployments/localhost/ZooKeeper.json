{
  "address": "0xb7B9C9B21D1849099135c132BA32dF8CEaAF5AC6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggSupply",
          "type": "uint256"
        }
      ],
      "name": "AddDrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentB",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "Breed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "BuyEgg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "Free",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Hatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "Remint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenB",
          "type": "uint256"
        }
      ],
      "name": "breedAnimals",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "breedNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "breedReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        }
      ],
      "name": "buyEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "customName",
          "type": "string"
        }
      ],
      "name": "buyName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_media",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zoo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dropAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "freeAnimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "hatchEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "media",
      "outputs": [
        {
          "internalType": "contract IMedia",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "namePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "remint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        }
      ],
      "name": "setDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setNamePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "birthday",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "customName",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Breed",
          "name": "breed",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eggID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dropID",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapped",
              "type": "bool"
            }
          ],
          "internalType": "struct IZoo.Meta",
          "name": "meta",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zoo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zooSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zooWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe9247664bd5077315457b1407b74900f5a085fefa617b41d8aa94cd4462c81f",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0xb7B9C9B21D1849099135c132BA32dF8CEaAF5AC6",
    "transactionIndex": 0,
    "gasUsed": "4723134",
    "logsBloom": "0x
    "blockHash": "0xc44ff47cf19837ddca40e8cfcf266e73e43bae99b37f8ef4dc4e1ac8b6d96878",
    "transactionHash": "0xfe9247664bd5077315457b1407b74900f5a085fefa617b41d8aa94cd4462c81f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22,
        "transactionHash": "0xfe9247664bd5077315457b1407b74900f5a085fefa617b41d8aa94cd4462c81f",
        "address": "0xb7B9C9B21D1849099135c132BA32dF8CEaAF5AC6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0aef8b960d43418dc0a83dd0cac04a3793de3e0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc44ff47cf19837ddca40e8cfcf266e73e43bae99b37f8ef4dc4e1ac8b6d96878"
      }
    ],
    "blockNumber": 22,
    "cumulativeGasUsed": "4723134",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d93e12f3b1c9e7e3cd022a9f9b0bd116",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggSupply\",\"type\":\"uint256\"}],\"name\":\"AddDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentB\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"Breed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"BuyEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"Free\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Hatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"Remint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"name\":\"breedAnimals\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"breedNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"breedReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"name\":\"buyEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"}],\"name\":\"buyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_media\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zoo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dropAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"freeAnimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"hatchEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"media\",\"outputs\":[{\"internalType\":\"contract IMedia\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"remint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"}],\"name\":\"setDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zooWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ZooKeeper.sol\":\"ZooKeeper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/ZooKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IZoo } from \\\"./interfaces/IZoo.sol\\\";\\nimport { IDrop } from \\\"./interfaces/IDrop.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { IMedia } from \\\"./interfaces/IMedia.sol\\\";\\n\\nimport \\\"./console.sol\\\";\\n\\n\\ncontract ZooKeeper is Ownable {\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private dropIDs;\\n\\n    // Declare an Event\\n    event AddDrop(address indexed dropAddress, string title, uint256 eggSupply);\\n    event Breed(address indexed from, uint256 parentA, uint256 parentB, uint256 indexed eggID);\\n    event Burn(address indexed from, uint256 indexed tokenID);\\n    event BuyEgg(address indexed from, uint256 indexed eggID);\\n    event Free(address indexed from, uint256 indexed tokenID, uint256 indexed yield);\\n    event Hatch(address indexed from, uint256 eggID, uint256 indexed tokenID);\\n    event Mint(address indexed from, uint256 indexed tokenID);\\n\\n\\n    event Swap(address indexed owner, uint256 indexed tokenID, uint indexed chainID);\\n    event Remint(address indexed owner, uint256 indexed tokenID, uint indexed chainID);\\n\\n    // Mapping of Address to Drop ID\\n    mapping(uint256 => address) public drops;\\n\\n    // Mapping of ID to Address\\n    mapping(address=> uint256) public dropAddresses;\\n\\n    // Mapping of ID to NFT\\n    mapping(uint256 => IZoo.Token) public tokens;\\n\\n    // Price to set name of Token\\n    uint256 public namePrice;\\n\\n    // External contracts\\n    IMarket public market;\\n    IMedia public media;\\n    IERC20 public zoo;\\n    address public bridge;\\n\\n    modifier onlyBridge {\\n        require(msg.sender == bridge);\\n        _;\\n    }\\n\\n    function configure(address _market, address _media, address _zoo, address _bridge) public onlyOwner {\\n        market = IMarket(_market);\\n        media = IMedia(_media);\\n        zoo = IERC20(_zoo);\\n        bridge = _bridge;\\n    }\\n\\n    function setDrop(address dropAddress) public returns (uint256) {\\n        require(dropAddresses[dropAddress] == 0, \\\"Drop already added\\\");\\n\\n        IDrop drop = IDrop(dropAddress);\\n\\n        dropIDs.increment();\\n        uint256 dropID = dropIDs.current();\\n        drops[dropID] = dropAddress;\\n        dropAddresses[dropAddress] = dropID;\\n        emit AddDrop(dropAddress, drop.title(), drop.eggSupply());\\n        return dropID;\\n    }\\n\\n    // Issue a new token to owner\\n    function mint(address owner, IZoo.Token memory token) private returns (IZoo.Token memory) {\\n        console.log(\\\"mint\\\", owner, token.name);\\n        token = media.mintToken(owner, token);\\n        market.setBidShares(token.id, token.bidShares);\\n        tokens[token.id] = token;\\n        emit Mint(owner, token.id);\\n        return token;\\n    }\\n\\n    // Burn token owned by owner\\n    function burn(address owner, uint256 tokenID) private {\\n        console.log(\\\"burn\\\", owner, tokenID);\\n        media.burnToken(owner, tokenID);\\n        tokens[tokenID].meta.burned = true;\\n        emit Burn(owner, tokenID);\\n    }\\n\\n    // Swap to new chain requested\\n    function swap(address owner, uint256 tokenID, uint chainID) external onlyBridge {\\n        console.log(\\\"swap\\\", owner, tokenID);\\n        burn(owner, tokenID);\\n        tokens[tokenID].meta.swapped = true;\\n        emit Swap(owner, tokenID, chainID);\\n    }\\n\\n    // Swap from new chain requested\\n    function remint(address owner, IZoo.Token memory token, uint chainID) external onlyBridge {\\n        console.log(\\\"remint\\\", owner, token.id, chainID);\\n        token = mint(owner, token);\\n        emit Remint(owner, token.id, chainID);\\n    }\\n\\n    // Accept ZOO and return Egg NFT\\n    function buyEggs(uint256 dropID, uint256 quantity) public {\\n        console.log('buyEggs', dropID, quantity);\\n        for (uint8 i=0; i<quantity; i++) {\\n            buyEgg(dropID);\\n        }\\n    }\\n\\n    // Accept ZOO and return Egg NFT\\n    function buyEgg(uint256 dropID) public returns (IZoo.Token memory) {\\n        console.log('buyEgg', dropID);\\n\\n        // Check egg price\\n        IDrop drop = IDrop(drops[dropID]);\\n        require(zoo.balanceOf(msg.sender) >= drop.eggPrice(), \\\"ZK: Not Enough ZOO to purchase Egg\\\");\\n\\n        // Transfer funds\\n        console.log('zoo.transferFrom', msg.sender, address(this), drop.eggPrice());\\n        zoo.transferFrom(msg.sender, address(this), drop.eggPrice());\\n\\n        // Get Egg from this drop\\n        IZoo.Token memory egg = drop.newEgg();\\n\\n        // Mint Egg Token\\n        egg = mint(msg.sender, egg);\\n        console.log('minted egg', egg.id);\\n\\n        emit BuyEgg(msg.sender, egg.id);\\n\\n        return egg;\\n    }\\n\\n    // Burn egg and randomly return an animal NFT\\n    function hatchEgg(uint256 dropID, uint256 eggID) public returns (IZoo.Token memory) {\\n        console.log(\\\"hatchEgg\\\", dropID, eggID);\\n\\n        require(media.tokenExists(eggID), \\\"Egg is burned or does not exist\\\");\\n\\n        // Get animal for given Egg\\n        IZoo.Token memory animal = getAnimal(dropID, eggID);\\n        animal.meta.eggID = eggID;\\n        animal.meta.dropID = dropID;\\n        console.log(\\\"animal\\\", animal.name);\\n\\n        // ...it's hatching!\\n        animal = mint(msg.sender, animal);\\n        console.log('minted animal', animal.id, eggID);\\n\\n        // bye egg\\n        burn(msg.sender, eggID);\\n        console.log('burned', eggID);\\n\\n        emit Hatch(msg.sender, eggID, animal.id);\\n        return animal;\\n    }\\n\\n\\n    // Breed two animals and create a hybrid egg\\n    function breedAnimals(uint256 dropID, uint256 tokenA, uint256 tokenB) public canBreed(tokenA, tokenB) returns (IZoo.Token memory) {\\n        console.log('breedAnimals', dropID, tokenA, tokenB);\\n\\n        IZoo.Token memory egg = IDrop(drops[dropID]).newHybridEgg(\\n            IZoo.Parents({\\n                animalA: tokens[tokenA].name,\\n                animalB: tokens[tokenB].name,\\n                tokenA: tokenA,\\n                tokenB: tokenB\\n            })\\n        );\\n\\n        // Update breeding delay for each parent\\n        updateBreedDelays(tokenA, tokenB);\\n\\n        egg = mint(msg.sender, egg);\\n        emit Breed(msg.sender, tokenA, tokenB, egg.id);\\n        return egg;\\n    }\\n\\n    // Freeing an animal burns the animal NFT and returns the ZOO to the owner\\n    function freeAnimal(uint256 tokenID) public returns (uint256 yield) {\\n        console.log('freeAnimal', tokenID);\\n\\n        IZoo.Token memory token = tokens[tokenID];\\n\\n        // Burn the token\\n        burn(msg.sender, tokenID);\\n\\n        // How long did we HODL?\\n        uint256 blockAge = block.number - token.birthday;\\n        uint256 daysOld = blockAge.div(28800);\\n\\n        // Calculate yield\\n        yield = daysOld.mul(token.rarity.yield.mul(10**18));\\n        console.log('calculateYield', blockAge, daysOld, yield);\\n\\n        // Transfer yield\\n        zoo.transfer(msg.sender, yield);\\n\\n        emit Free(msg.sender, tokenID, yield);\\n\\n        return yield;\\n    }\\n\\n    // Set price for buying a name\\n    function setNamePrice(uint256 price) public onlyOwner {\\n        namePrice = price.mul(10**18);\\n    }\\n\\n    // Buy a custom name for your NFT\\n    function buyName(uint256 tokenID, string memory customName) public {\\n        require(\\n            zoo.balanceOf(msg.sender) < namePrice,\\n            \\\"ZK: Not enough ZOO to purchase Name\\\"\\n        );\\n\\n        zoo.transferFrom(msg.sender, address(this), namePrice);\\n\\n        IZoo.Token memory token = tokens[tokenID];\\n        token.customName = customName;\\n        tokens[tokenID] = token;\\n    }\\n\\n    // Temporary random function\\n    function unsafeRandom() private view returns (uint256) {\\n        uint256 randomNumber = uint256(\\n            keccak256(\\n                abi.encodePacked(block.number, msg.sender, block.timestamp)\\n            )\\n        ) % 10000;\\n        return randomNumber;\\n    }\\n\\n    // Ensure base animal\\n    function isBaseAnimal(uint256 tokenID) private view returns (bool) {\\n        return tokens[tokenID].kind == IZoo.Type.BASE_ANIMAL;\\n    }\\n\\n    // Ensure animals can breed\\n    modifier canBreed(uint256 parentA, uint256 parentB) {\\n        console.log(\\\"canBreed\\\", parentA, parentB);\\n\\n        require(media.tokenExists(parentA) && media.tokenExists(parentB), \\\"Non-existent token\\\");\\n        require(keccak256(abi.encode(parentA)) != keccak256(abi.encode(parentB)),\\\"Not able to breed with self\\\" );\\n        require(breedReady(parentA) && breedReady(parentB), \\\"Wait for cooldown to finish.\\\");\\n        require(isBaseAnimal(parentA) && isBaseAnimal(parentB), \\\"Only BASE_ANIMAL can breed.\\\");\\n        _;\\n    }\\n\\n    // Get a random base or hybrid animal based on a given egg\\n    function getAnimal(uint256 dropID, uint256 eggID) private view returns (IZoo.Token memory) {\\n        console.log('getAnimal', dropID, eggID);\\n\\n        // Get Egg\\n        IZoo.Token memory egg = tokens[eggID];\\n\\n        // Get random animal or hybrid from Drop\\n        if (egg.kind == IZoo.Type.BASE_EGG) {\\n            console.log(\\\"getRandomAnimal\\\", dropID, eggID);\\n            return IDrop(drops[dropID]).getRandomAnimal(unsafeRandom());\\n        } else {\\n            console.log(\\\"getRandomHybrid\\\", dropID, eggID);\\n            return IDrop(drops[dropID]).getRandomHybrid(unsafeRandom(), egg.parents);\\n        }\\n    }\\n\\n    // Update breed delays\\n    function updateBreedDelays(uint256 parentA, uint256 parentB) private {\\n        console.log('updateBreedDelays', parentA, parentB);\\n\\n        tokens[parentA].breed.count++;\\n        tokens[parentB].breed.count++;\\n        tokens[parentA].breed.timestamp = block.timestamp;\\n        tokens[parentB].breed.timestamp = block.timestamp;\\n    }\\n\\n    // Get next timestamp token can be bred\\n    function breedNext(uint256 tokenID) public view returns (uint256) {\\n        IZoo.Token memory token = tokens[tokenID];\\n        return token.breed.timestamp + (token.breed.count * 1 days);\\n    }\\n\\n    // Check whether token is ready to breed again\\n    function breedReady(uint256 tokenID) public view returns (bool) {\\n        // Never bred? Lets go\\n        if (tokens[tokenID].breed.count == 0) {\\n            return true;\\n        }\\n        // If current timestamp is greater than the next breed time, lets go\\n        if (block.timestamp > breedNext(tokenID)) {\\n            return true;\\n        }\\n\\n        // Not ready\\n        return false;\\n    }\\n\\n    // Return total amount of ZOO in contract\\n    function zooSupply() public view onlyOwner returns (uint256) {\\n        return zoo.balanceOf(address(this));\\n    }\\n\\n    // Enable owner to withdraw ZOO if necessary\\n    function zooWithdraw(address receiver, uint256 amount) public onlyOwner returns (bool) {\\n        return zoo.transferFrom(address(this), receiver, amount.mul(10**18));\\n    }\\n}\\n\",\"keccak256\":\"0xecaff89f605f5473cba4b886a7ff728d23d0440015e9e2a3c7a97f5447834ce7\",\"license\":\"MIT\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/IDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\ninterface IDrop {\\n    function title() external view returns (string memory);\\n    function eggPrice() external view returns (uint256);\\n    function eggSupply() external view returns (uint256);\\n    function newEgg() external returns (IZoo.Token memory);\\n    function newHybridEgg(IZoo.Parents memory) external returns (IZoo.Token memory);\\n    function getRandomAnimal(uint256) external view returns (IZoo.Token memory);\\n    function getRandomHybrid(uint256, IZoo.Parents memory) external view returns (IZoo.Token memory);\\n}\\n\",\"keccak256\":\"0x0e6c6c37c950016fb45f2d7fb65775723a846c273173818f94eaab5e17f261ab\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from \\\"../Decimal.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n\\n    struct Bid {\\n        // Amount of the currency being bid\\n        uint256 amount;\\n        // Address to the ERC20 token being used to bid\\n        address currency;\\n        // Address of the bidder\\n        address bidder;\\n        // Address of the recipient\\n        address recipient;\\n        // % of the next sale to award the current owner\\n        Decimal.D256 sellOnShare;\\n    }\\n\\n    struct Ask {\\n        // Amount of the currency being asked\\n        uint256 amount;\\n        // Address to the ERC20 token being asked\\n        address currency;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal.D256 prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal.D256 creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal.D256 owner;\\n    }\\n\\n    event BidCreated(uint256 indexed tokenID, Bid bid);\\n    event BidRemoved(uint256 indexed tokenID, Bid bid);\\n    event BidFinalized(uint256 indexed tokenID, Bid bid);\\n    event AskCreated(uint256 indexed tokenID, Ask ask);\\n    event AskRemoved(uint256 indexed tokenID, Ask ask);\\n    event BidShareUpdated(uint256 indexed tokenID, BidShares bidShares);\\n\\n    function bidForTokenBidder(uint256 tokenID, address bidder)\\n        external\\n        view\\n        returns (Bid memory);\\n\\n    function currentAskForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (Ask memory);\\n\\n    function bidSharesForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (BidShares memory);\\n\\n    function isValidBid(uint256 tokenID, uint256 bidAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isValidBidShares(BidShares calldata bidShares)\\n        external\\n        pure\\n        returns (bool);\\n\\n    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function setBidShares(uint256 tokenID, BidShares calldata bidShares)\\n        external;\\n\\n    function setAsk(uint256 tokenID, Ask calldata ask) external;\\n\\n    function removeAsk(uint256 tokenID) external;\\n\\n    function setBid(\\n        uint256 tokenID,\\n        Bid calldata bid,\\n        address spender\\n    ) external;\\n\\n    function removeBid(uint256 tokenID, address bidder) external;\\n\\n    function acceptBid(uint256 tokenID, Bid calldata expectedBid) external;\\n}\\n\",\"keccak256\":\"0xb9ae2b808f01fb70d6eb41b223faf9c0d64d4a2f17826dbddba01b9125398c71\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia {\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct MediaData {\\n        // A valid URI of the content represented by this token\\n        string tokenURI;\\n        // A valid URI of the metadata associated with this token\\n        string metadataURI;\\n        // A SHA256 hash of the content pointed to by tokenURI\\n        bytes32 contentHash;\\n        // A SHA256 hash of the content pointed to by metadataURI\\n        bytes32 metadataHash;\\n    }\\n\\n    event TokenURIUpdated(uint256 indexed _tokenID, address owner, string _uri);\\n    event TokenMetadataURIUpdated(\\n        uint256 indexed _tokenID,\\n        address owner,\\n        string _uri\\n    );\\n\\n    /**\\n     * @notice Return the metadata URI for a piece of media given the token URI\\n     */\\n    function tokenMetadataURI(uint256 tokenID)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Mint new media for msg.sender.\\n     */\\n    function mint(MediaData calldata data, IMarket.BidShares calldata bidShares)\\n        external;\\n\\n    /**\\n     * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n     */\\n    function mintWithSig(\\n        address creator,\\n        MediaData calldata data,\\n        IMarket.BidShares calldata bidShares,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Transfer the token with the given ID to a given address.\\n     * Save the previous owner before the transfer, in case there is a sell-on fee.\\n     * @dev This can only be called by the auction contract specified at deployment\\n     */\\n    function auctionTransfer(uint256 tokenID, address recipient) external;\\n\\n    /**\\n     * @notice Set the ask on a piece of media\\n     */\\n    function setAsk(uint256 tokenID, IMarket.Ask calldata ask) external;\\n\\n    /**\\n     * @notice Remove the ask on a piece of media\\n     */\\n    function removeAsk(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Set the bid on a piece of media\\n     */\\n    function setBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Remove the bid on a piece of media\\n     */\\n    function removeBid(uint256 tokenID) external;\\n\\n    function acceptBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Revoke approval for a piece of media\\n     */\\n    function revokeApproval(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Update the token URI\\n     */\\n    function updateTokenURI(uint256 tokenID, string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Update the token metadata uri\\n     */\\n    function updateTokenMetadataURI(\\n        uint256 tokenID,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    // Added for Zoo\\n    function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n    function burnToken(address owner, uint256 tokenID) external;\\n    function tokenExists(uint256 tokenID) external returns (bool);\\n}\\n\",\"keccak256\":\"0x382dc461b14d9b3b5bd03e31932a9dbe7447767a804a18c42cfe690c4854ca79\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yield;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;       // originating egg\\n        uint256 dropID;      // originating drop\\n        bool burned;         // token has been burned\\n        bool swapped;        // token has been swapped\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;           // unique ID\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        string  customName;   // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0xeb9d5375388d30b614005d0cf5dec157aeac9db898a190e97de7df5692bc91df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6153ff80620000836000396000f3fe608060405234801561001057600080fd5b506004361061013e5760003560e01c80630dae4d441461014357806310e0af64146101585780632626f4e01461018057806349077a4f146101935780634c33efa7146101b35780634f2cabdf146101d35780634f64b2be1461020157806354d7dc931461022c5780635acb50821461023f5780635eb3996814610252578063685bf0cd1461027b5780636fc2790e1461028e578063715018a6146102a15780637b6a8777146102a957806380f55605146102bc5780638da5cb5b146102cf5780639c275d11146102d75780639f1d0f59146102ea578063b22073b6146102fd578063c87b2cba14610306578063d4eddf7e14610319578063de611f5514610321578063e78cea9214610334578063f2fde38b14610347578063f62417271461035a578063f8b246261461036d575b600080fd5b6101566101513660046147a0565b610380565b005b61016b610166366004614b26565b610412565b60405190151581526020015b60405180910390f35b61015661018e366004614b26565b610450565b6007546101a6906001600160a01b031681565b6040516101779190614e0b565b6101c66101c1366004614b26565b6104a0565b604051610177919061510c565b6101f36101e1366004614733565b60036020526000908152604090205481565b604051908152602001610177565b61021461020f366004614b26565b6108ca565b6040516101779c9b9a99989796959493929190615046565b6101c661023a366004614bbb565b610e04565b61015661024d36600461474d565b61134f565b6101a6610260366004614b26565b6002602052600090815260409020546001600160a01b031681565b610156610289366004614b9a565b6113ce565b6101c661029c366004614b9a565b611427565b610156611623565b6008546101a6906001600160a01b031681565b6006546101a6906001600160a01b031681565b6101a661165e565b6101f36102e5366004614b26565b61166d565b6101566102f8366004614945565b611c53565b6101f360055481565b6101f3610314366004614b26565b611cf2565b6101f3612414565b61015661032f366004614b56565b6124ca565b6009546101a6906001600160a01b031681565b610156610355366004614733565b612def565b61016b61036836600461491c565b612e8f565b6101f361037b366004614733565b612f55565b6009546001600160a01b0316331461039757600080fd5b6103c5604051806040016040528060068152602001651c995b5a5b9d60d21b8152508484606001518461312a565b6103cf8383613179565b9150808260600151846001600160a01b03167f9334e83d2495be85868d3a9192f0c36a49a1b869b4d6465ff7340c2cbcacfcdc60405160405180910390a4505050565b6000818152600460205260408120600e015461043057506001919050565b6104398261166d565b42111561044857506001919050565b506000919050565b3361045961165e565b6001600160a01b0316146104885760405162461bcd60e51b815260040161047f90614ffe565b60405180910390fd5b61049a81670de0b6b3a76400006134e9565b60055550565b6104a86140cd565b6104d06040518060400160405280600681526020016562757945676760d01b815250836134f5565b60008281526002602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190614b3e565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610587903390600401614e0b565b60206040518083038186803b15801561059f57600080fd5b505afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d79190614b3e565b10156106305760405162461bcd60e51b815260206004820152602260248201527f5a4b3a204e6f7420456e6f756768205a4f4f20746f2070757263686173652045604482015261676760f01b606482015260840161047f565b6106d46040518060400160405280601081526020016f7a6f6f2e7472616e7366657246726f6d60801b8152503330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf9190614b3e565b61353e565b600860009054906101000a90046001600160a01b03166001600160a01b03166323b872dd3330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190614b3e565b6040518463ffffffff1660e01b815260040161078993929190614e1f565b602060405180830381600087803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190614977565b506000816001600160a01b0316630489a8f66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085591908101906149c5565b90506108613382613179565b90506108936040518060400160405280600a8152602001696d696e7465642065676760b01b81525082606001516134f5565b606081015160405133907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a39392505050565b6004602052806000526040600020600091509050806000016040518060800160405290816000820180546108fd906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610929906152e2565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff909216926109ba906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546109e6906152e2565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b505050505090806006015490806007015490806008015490806009018054610a5a906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a86906152e2565b8015610ad35780601f10610aa857610100808354040283529160200191610ad3565b820191906000526020600020905b815481529060010190602001808311610ab657829003601f168201915b50505050509080600a01604051806080016040529081600082018054610af8906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b24906152e2565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b50505050508152602001600182018054610b8a906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906152e2565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610c99906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc5906152e2565b8015610d125780601f10610ce757610100808354040283529160200191610d12565b820191906000526020600020905b815481529060010190602001808311610cf557829003601f168201915b50505050508152602001600182018054610d2b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d57906152e2565b8015610da45780601f10610d7957610100808354040283529160200191610da4565b820191906000526020600020905b815481529060010190602001808311610d8757829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610e0c6140cd565b8282610e396040518060400160405280600881526020016718d85b909c99595960c21b8152508383613587565b60075460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610e7d57600080fd5b505af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190614977565b8015610f38575060075460405162491fcf60e11b8152600481018390526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610f0057600080fd5b505af1158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190614977565b610f795760405162461bcd60e51b81526020600482015260126024820152712737b716b2bc34b9ba32b73a103a37b5b2b760711b604482015260640161047f565b60408051602081018390520160408051601f19818403018152828252805160209182012090830185905291016040516020818303038152906040528051906020012014156110075760405162461bcd60e51b815260206004820152601b60248201527a2737ba1030b13632903a3790313932b2b2103bb4ba341039b2b63360291b604482015260640161047f565b61101082610412565b8015611020575061102081610412565b61106b5760405162461bcd60e51b815260206004820152601c60248201527b2bb0b4ba103337b91031b7b7b63237bbb7103a37903334b734b9b41760211b604482015260640161047f565b611074826135ce565b80156110845750611084816135ce565b6110ce5760405162461bcd60e51b815260206004820152601b60248201527a27b7363c902120a9a2afa0a724a6a0a61031b0b710313932b2b21760291b604482015260640161047f565b6110fe6040518060400160405280600c81526020016b6272656564416e696d616c7360a01b81525087878761360c565b6000868152600260209081526040808320548151608081018352898552600490935290832060050180546001600160a01b039092169263e82baf309290918291611147906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611173906152e2565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b50505050508152602001600460008a815260200190815260200160002060050180546111eb906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611217906152e2565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b50505050508152602001898152602001888152506040518263ffffffff1660e01b81526004016112949190615033565b600060405180830381600087803b1580156112ae57600080fd5b505af11580156112c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ea91908101906149c5565b90506112f68686613655565b6113003382613179565b60608101516040805189815260208101899052929350909133917fddf1e8fec06a50aa72b8a39a06787808c53eca73b2bd1cc995681cf7b8014650910160405180910390a39695505050505050565b3361135861165e565b6001600160a01b03161461137e5760405162461bcd60e51b815260040161047f90614ffe565b600680546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600880549285169284169290921790915560098054919093169116179055565b6113f8604051806040016040528060078152602001666275794567677360c81b8152508383613587565b60005b818160ff1610156114225761140f836104a0565b508061141a81615338565b9150506113fb565b505050565b61142f6140cd565b61145a60405180604001604052806008815260200167686174636845676760c01b8152508484613587565b60075460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190614977565b6115225760405162461bcd60e51b815260206004820152601f60248201527f456767206973206275726e6564206f7220646f6573206e6f7420657869737400604482015260640161047f565b600061152e84846136f0565b610120810180518590525160209081018690526040805180820182526006815265185b9a5b585b60d21b9281019290925282015191925061156e91613e4c565b6115783382613179565b90506115ae6040518060400160405280600d81526020016c1b5a5b9d195908185b9a5b585b609a1b815250826060015185613587565b6115b83384613e91565b6115e060405180604001604052806006815260200165189d5c9b995960d21b815250846134f5565b606081015160405184815233907fb38ba9b1c21d14e92c6b24ace95218359ca7727f16a3e622617817dd9f38305c9060200160405180910390a390505b92915050565b3361162c61165e565b6001600160a01b0316146116525760405162461bcd60e51b815260040161047f90614ffe565b61165c6000613f6e565b565b6000546001600160a01b031690565b6000818152600460205260408082208151610200810190925280548392919082906101808201908390829082906116a3906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546116cf906152e2565b801561171c5780601f106116f15761010080835404028352916020019161171c565b820191906000526020600020905b8154815290600101906020018083116116ff57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561177957634e487b7160e01b600052602160045260246000fd5b600381111561179857634e487b7160e01b600052602160045260246000fd5b81526020016005820180546117ac906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546117d8906152e2565b80156118255780601f106117fa57610100808354040283529160200191611825565b820191906000526020600020905b81548152906001019060200180831161180857829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201805461185c906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611888906152e2565b80156118d55780601f106118aa576101008083540402835291602001916118d5565b820191906000526020600020905b8154815290600101906020018083116118b857829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546118fe906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461192a906152e2565b80156119775780601f1061194c57610100808354040283529160200191611977565b820191906000526020600020905b81548152906001019060200180831161195a57829003601f168201915b50505050508152602001600182018054611990906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546119bc906152e2565b8015611a095780601f106119de57610100808354040283529160200191611a09565b820191906000526020600020905b8154815290600101906020018083116119ec57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290611ab0906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611adc906152e2565b8015611b295780601f10611afe57610100808354040283529160200191611b29565b820191906000526020600020905b815481529060010190602001808311611b0c57829003601f168201915b50505050508152602001600182018054611b42906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6e906152e2565b8015611bbb5780601f10611b9057610100808354040283529160200191611bbb565b820191906000526020600020905b815481529060010190602001808311611b9e57829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015261010081015151909150611c389062015180615280565b81610100015160200151611c4c9190615254565b9392505050565b6009546001600160a01b03163314611c6a57600080fd5b611c91604051806040016040528060048152602001630737761760e41b8152508484613fbe565b611c9b8383613e91565b600082815260046020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b6000611d206040518060400160405280600a815260200169199c9959505b9a5b585b60b21b815250836134f5565b6000828152600460205260408082208151610200810190925280548290610180820190839082908290611d52906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7e906152e2565b8015611dcb5780601f10611da057610100808354040283529160200191611dcb565b820191906000526020600020905b815481529060010190602001808311611dae57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff166003811115611e2857634e487b7160e01b600052602160045260246000fd5b6003811115611e4757634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611e5b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e87906152e2565b8015611ed45780601f10611ea957610100808354040283529160200191611ed4565b820191906000526020600020905b815481529060010190602001808311611eb757829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054611f0b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f37906152e2565b8015611f845780601f10611f5957610100808354040283529160200191611f84565b820191906000526020600020905b815481529060010190602001808311611f6757829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054611fad906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd9906152e2565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b5050505050815260200160018201805461203f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461206b906152e2565b80156120b85780601f1061208d576101008083540402835291602001916120b8565b820191906000526020600020905b81548152906001019060200180831161209b57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff808216151583860152610100909104161515606080830191909152848401919091528251918201909252601384018054929093019290918290829061215f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461218b906152e2565b80156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505081526020016001820180546121f1906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461221d906152e2565b801561226a5780601f1061223f5761010080835404028352916020019161226a565b820191906000526020600020905b81548152906001019060200180831161224d57829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015290506122dc3384613e91565b60008160a00151436122ee919061529f565b905060006122fe82617080614005565b8351604001519091506123249061231d90670de0b6b3a76400006134e9565b82906134e9565b93506123586040518060400160405280600e81526020016d18d85b18dd5b185d19565a595b1960921b81525083838761360c565b60085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061238a9033908890600401614e67565b602060405180830381600087803b1580156123a457600080fd5b505af11580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190614977565b506040518490869033907f6d330a72b03f3f443e72a146c33e5882a01427b60a36b46ac11243d0c4e31d0990600090a4505050919050565b60003361241f61165e565b6001600160a01b0316146124455760405162461bcd60e51b815260040161047f90614ffe565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190612475903090600401614e0b565b60206040518083038186803b15801561248d57600080fd5b505afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190614b3e565b905090565b6005546008546040516370a0823160e01b81526001600160a01b03909116906370a08231906124fd903390600401614e0b565b60206040518083038186803b15801561251557600080fd5b505afa158015612529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254d9190614b3e565b106125a65760405162461bcd60e51b815260206004820152602360248201527f5a4b3a204e6f7420656e6f756768205a4f4f20746f207075726368617365204e604482015262616d6560e81b606482015260840161047f565b6008546005546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916125db9133913091600401614e1f565b602060405180830381600087803b1580156125f557600080fd5b505af1158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190614977565b506000828152600460205260408082208151610200810190925280548290610180820190839082908290612660906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461268c906152e2565b80156126d95780601f106126ae576101008083540402835291602001916126d9565b820191906000526020600020905b8154815290600101906020018083116126bc57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561273657634e487b7160e01b600052602160045260246000fd5b600381111561275557634e487b7160e01b600052602160045260246000fd5b8152602001600582018054612769906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612795906152e2565b80156127e25780601f106127b7576101008083540402835291602001916127e2565b820191906000526020600020905b8154815290600101906020018083116127c557829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054612819906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612845906152e2565b80156128925780601f1061286757610100808354040283529160200191612892565b820191906000526020600020905b81548152906001019060200180831161287557829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546128bb906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546128e7906152e2565b80156129345780601f1061290957610100808354040283529160200191612934565b820191906000526020600020905b81548152906001019060200180831161291757829003601f168201915b5050505050815260200160018201805461294d906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612979906152e2565b80156129c65780601f1061299b576101008083540402835291602001916129c6565b820191906000526020600020905b8154815290600101906020018083116129a957829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290612a6d906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612a99906152e2565b8015612ae65780601f10612abb57610100808354040283529160200191612ae6565b820191906000526020600020905b815481529060010190602001808311612ac957829003601f168201915b50505050508152602001600182018054612aff906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2b906152e2565b8015612b785780601f10612b4d57610100808354040283529160200191612b78565b820191906000526020600020905b815481529060010190602001808311612b5b57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552808301949094529182019290925260c08301859052600086815260048252919091208251805180519495508594929391928492612c159284929101906141e8565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115612c6e57634e487b7160e01b600052602160045260246000fd5b021790555060408201518051612c8e9160058401916020909101906141e8565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051612cc89160098401916020909101906141e8565b5060e082015180518051600a840191612ce6918391602001906141e8565b506020828101518051612cff92600185019201906141e8565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff00191617921515909102919091179091556101408301518051805191926013850192612d9392849201906141e8565b506020828101518051612dac92600185019201906141e8565b5060408281015160028301556060909201516003909101556101609290920151805151601783015560208101515160188301559091015151601990910155505050565b33612df861165e565b6001600160a01b031614612e1e5760405162461bcd60e51b815260040161047f90614ffe565b6001600160a01b038116612e835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047f565b612e8c81613f6e565b50565b600033612e9a61165e565b6001600160a01b031614612ec05760405162461bcd60e51b815260040161047f90614ffe565b6008546001600160a01b03166323b872dd3085612ee586670de0b6b3a76400006134e9565b6040518463ffffffff1660e01b8152600401612f0393929190614e1f565b602060405180830381600087803b158015612f1d57600080fd5b505af1158015612f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c9190614977565b6001600160a01b03811660009081526003602052604081205415612fb05760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b604482015260640161047f565b81612fbf600180546001019055565b6000612fca60015490565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526003909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261309c9190810190614993565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d557600080fd5b505afa1580156130e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310d9190614b3e565b60405161311b929190614f88565b60405180910390a29392505050565b613173848484846040516024016131449493929190614f22565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b179052614011565b50505050565b6131816140cd565b6131ac604051806040016040528060048152602001631b5a5b9d60e21b815250848460400151614032565b600754604051631dc925ff60e31b81526001600160a01b039091169063ee492ff8906131de9086908690600401614e43565b600060405180830381600087803b1580156131f857600080fd5b505af115801561320c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261323491908101906149c5565b60065460608201516101608301516040516375aab41d60e11b81529395506001600160a01b039092169263eb55683a92613271929160040161511f565b600060405180830381600087803b15801561328b57600080fd5b505af115801561329f573d6000803e3d6000fd5b5050505060608201516000908152600460209081526040909120835180518051869484926132d392849291909101906141e8565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff0219169083600381111561332c57634e487b7160e01b600052602160045260246000fd5b02179055506040820151805161334c9160058401916020909101906141e8565b50606082015160068201556080820151600782015560a0820151600882015560c082015180516133869160098401916020909101906141e8565b5060e082015180518051600a8401916133a4918391602001906141e8565b5060208281015180516133bd92600185019201906141e8565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff0019161792151590910291909117909155610140830151805180519192601385019261345192849201906141e8565b50602082810151805161346a92600185019201906141e8565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b6000611c4c8284615280565b61353a828260405160240161350b929190614f88565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614011565b5050565b613173848484846040516024016135589493929190614e80565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b179052614011565b61142283838360405160240161359f93929190614faa565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052614011565b60008181526004602081905260408220015460019060ff16600381111561360557634e487b7160e01b600052602160045260246000fd5b1492915050565b613173848484846040516024016136269493929190614fcf565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b179052614011565b61368960405180604001604052806011815260200170757064617465427265656444656c61797360781b8152508383613587565b6000828152600460205260408120600e018054916136a68361531d565b90915550506000818152600460205260408120600e018054916136c88361531d565b909155505060009182526004602052604080832042600f918201819055928452922090910155565b6136f86140cd565b6137246040518060400160405280600981526020016819d95d105b9a5b585b60ba1b8152508484613587565b6000828152600460205260408082208151610200810190925280548290610180820190839082908290613756906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613782906152e2565b80156137cf5780601f106137a4576101008083540402835291602001916137cf565b820191906000526020600020905b8154815290600101906020018083116137b257829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561382c57634e487b7160e01b600052602160045260246000fd5b600381111561384b57634e487b7160e01b600052602160045260246000fd5b815260200160058201805461385f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461388b906152e2565b80156138d85780601f106138ad576101008083540402835291602001916138d8565b820191906000526020600020905b8154815290600101906020018083116138bb57829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201805461390f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461393b906152e2565b80156139885780601f1061395d57610100808354040283529160200191613988565b820191906000526020600020905b81548152906001019060200180831161396b57829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546139b1906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546139dd906152e2565b8015613a2a5780601f106139ff57610100808354040283529160200191613a2a565b820191906000526020600020905b815481529060010190602001808311613a0d57829003601f168201915b50505050508152602001600182018054613a43906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613a6f906152e2565b8015613abc5780601f10613a9157610100808354040283529160200191613abc565b820191906000526020600020905b815481529060010190602001808311613a9f57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290613b63906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613b8f906152e2565b8015613bdc5780601f10613bb157610100808354040283529160200191613bdc565b820191906000526020600020905b815481529060010190602001808311613bbf57829003601f168201915b50505050508152602001600182018054613bf5906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613c21906152e2565b8015613c6e5780601f10613c4357610100808354040283529160200191613c6e565b820191906000526020600020905b815481529060010190602001808311613c5157829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552918201939093529101529050600081602001516003811115613cfc57634e487b7160e01b600052602160045260246000fd5b1415613dd357613d346040518060400160405280600f81526020016e19d95d14985b991bdb505b9a5b585b608a1b8152508585613587565b6000848152600260205260409020546001600160a01b03166308f8bcc6613d59614079565b6040518263ffffffff1660e01b8152600401613d7791815260200190565b60006040518083038186803b158015613d8f57600080fd5b505afa158015613da3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dcb91908101906149c5565b91505061161d565b613e056040518060400160405280600f81526020016e19d95d14985b991bdb521e589c9a59608a1b8152508585613587565b6000848152600260205260409020546001600160a01b0316633b5c9856613e2a614079565b8360e001516040518363ffffffff1660e01b8152600401613d77929190615133565b61353a8282604051602401613e62929190614f5a565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052614011565b613eb860405180604001604052806004815260200163313ab93760e11b8152508383613fbe565b600754604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90613eea9085908590600401614e67565b600060405180830381600087803b158015613f0457600080fd5b505af1158015613f18573d6000803e3d6000fd5b505050600082815260046020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611422838383604051602401613fd693929190614ef4565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052614011565b6000611c4c828461526c565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61142283838360405160240161404a93929190614eb6565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b179052614011565b604080514360208201526001600160601b03193360601b16918101919091524260548201526000908190612710906074016040516020818303038152906040528051906020012060001c61161d9190615358565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e0830152819081526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016141576040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001614179604051806040016040528060008152602001600081525090565b81526040805160808101825260008082526020828101829052928201819052606082015291019081526020016141d66040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016141e361426c565b905290565b8280546141f4906152e2565b90600052602060002090601f016020900481019282614216576000855561425c565b82601f1061422f57805160ff191683800117855561425c565b8280016001018555821561425c579182015b8281111561425c578251825591602001919060010190614241565b50614268929150614299565b5090565b604051806060016040528061427f6142ae565b815260200161428c6142ae565b81526020016141e36142ae565b5b80821115614268576000815560010161429a565b6040518060200160405280600081525090565b80356001600160a01b03811681146142d857600080fd5b919050565b80356142d8816153bc565b80516142d8816153bc565b600082601f830112614303578081fd5b81356143166143118261522d565b6151fd565b81815284602083860101111561432a578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614354578081fd5b81516143626143118261522d565b818152846020838601011115614376578283fd5b6143878260208301602087016152b6565b949350505050565b6000606082840312156143a0578081fd5b6143a861514c565b90506143b48383614484565b81526143c38360208401614484565b60208201526143d58360408401614484565b604082015292915050565b6000606082840312156143f1578081fd5b6143f961514c565b905061440583836144a7565b815261441483602084016144a7565b60208201526143d583604084016144a7565b600060408284031215614437578081fd5b61443f615174565b9050813581526020820135602082015292915050565b600060408284031215614466578081fd5b61446e615174565b9050815181526020820151602082015292915050565b600060208284031215614495578081fd5b61449d615196565b9135825250919050565b6000602082840312156144b8578081fd5b6144c0615196565b9151825250919050565b6000608082840312156144db578081fd5b6144e36151b8565b905081356001600160401b03808211156144fc57600080fd5b614508858386016142f3565b8352602084013591508082111561451e57600080fd5b5061452b848285016142f3565b602083015250604082013560408201526060820135606082015292915050565b60006080828403121561455c578081fd5b6145646151b8565b905081516001600160401b038082111561457d57600080fd5b61458985838601614344565b8352602084015191508082111561459f57600080fd5b506145ac84828501614344565b602083015250604082015160408201526060820151606082015292915050565b6000608082840312156145dd578081fd5b6145e56151b8565b905081358152602082013560208201526040820135614603816153ae565b60408201526060820135614616816153ae565b606082015292915050565b600060808284031215614632578081fd5b61463a6151b8565b905081518152602082015160208201526040820151614658816153ae565b60408201526060820151614616816153ae565b60006080828403121561467c578081fd5b6146846151b8565b905081356001600160401b0381111561469c57600080fd5b6146a8848285016142f3565b82525060208201356020820152604082013560408201526060820135606082015292915050565b6000608082840312156146e0578081fd5b6146e86151b8565b905081516001600160401b0381111561470057600080fd5b61470c84828501614344565b82525060208201516020820152604082015160408201526060820151606082015292915050565b600060208284031215614744578081fd5b611c4c826142c1565b60008060008060808587031215614762578283fd5b61476b856142c1565b9350614779602086016142c1565b9250614787604086016142c1565b9150614795606086016142c1565b905092959194509250565b6000806000606084860312156147b4578081fd5b6147bd846142c1565b925060208401356001600160401b03808211156147d8578283fd5b9085019061024082880312156147ec578283fd5b6147f46151da565b823582811115614802578485fd5b61480e8982860161466b565b82525061481d602084016142dd565b6020820152604083013582811115614833578485fd5b61483f898286016142f3565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115614874578485fd5b614880898286016142f3565b60c08301525060e083013582811115614897578485fd5b6148a3898286016144ca565b60e0830152506101006148b889828601614426565b908201526101406148cb898583016145cc565b6101208301526101c0840135838111156148e3578586fd5b6148ef8a8287016144ca565b828401525050614903886101e0850161438f565b6101608201529497949650505050604092909201359150565b6000806040838503121561492e578182fd5b614937836142c1565b946020939093013593505050565b600080600060608486031215614959578081fd5b614962846142c1565b95602085013595506040909401359392505050565b600060208284031215614988578081fd5b8151611c4c816153ae565b6000602082840312156149a4578081fd5b81516001600160401b038111156149b9578182fd5b61438784828501614344565b6000602082840312156149d6578081fd5b81516001600160401b03808211156149ec578283fd5b908301906102408286031215614a00578283fd5b614a086151da565b825182811115614a16578485fd5b614a22878286016146cf565b825250614a31602084016142e8565b6020820152604083015182811115614a47578485fd5b614a5387828601614344565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115614a88578485fd5b614a9487828601614344565b60c08301525060e083015182811115614aab578485fd5b614ab78782860161454b565b60e083015250610100614acc87828601614455565b90820152610140614adf87858301614621565b6101208301526101c084015183811115614af7578586fd5b614b038882870161454b565b828401525050614b17866101e085016143e0565b61016082015295945050505050565b600060208284031215614b37578081fd5b5035919050565b600060208284031215614b4f578081fd5b5051919050565b60008060408385031215614b68578182fd5b8235915060208301356001600160401b03811115614b84578182fd5b614b90858286016142f3565b9150509250929050565b60008060408385031215614bac578182fd5b50508035926020909101359150565b600080600060608486031215614bcf578081fd5b505081359360208301359350604090920135919050565b60048110614c0457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614c208160208601602086016152b6565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452614c656080850182614c08565b905060208301518482036020860152614c7e8282614c08565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452614cde6080850182614c08565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552614d1e82860182614cc9565b9150506020830151614d336020860182614be6565b5060408301518482036040860152614d4b8282614c08565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614d838282614c08565b91505060e083015184820360e0860152614d9d8282614c50565b91505061010080840151614dbd8287018280518252602090810151910152565b5050610120830151610140614dd481870183614c9f565b8401518583036101c08701529050614dec8282614c50565b915050610160830151614e036101e0860182614c34565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061438790830184614d08565b6001600160a01b03929092168252602082015260400190565b608081526000614e936080830187614c08565b6001600160a01b0395861660208401529390941660408201526060015292915050565b606081526000614ec96060830186614c08565b6001600160a01b03851660208401528281036040840152614eea8185614c08565b9695505050505050565b606081526000614f076060830186614c08565b6001600160a01b039490941660208301525060400152919050565b608081526000614f356080830187614c08565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b604081526000614f6d6040830185614c08565b8281036020840152614f7f8185614c08565b95945050505050565b604081526000614f9b6040830185614c08565b90508260208301529392505050565b606081526000614fbd6060830186614c08565b60208301949094525060400152919050565b608081526000614fe26080830187614c08565b6020830195909552506040810192909252606090910152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526000611c4c6020830184614c50565b6102408152600061505b61024083018f614cc9565b615068602084018f614be6565b828103604084015261507a818e614c08565b90508b60608401528a60808401528960a084015282810360c08401526150a0818a614c08565b905082810360e08401526150b48189614c50565b8751610100850152602088015161012085015290506150d7610140840187614c9f565b8281036101c08401526150ea8186614c50565b9150506150fb6101e0830184614c34565b9d9c50505050505050505050505050565b602081526000611c4c6020830184614d08565b82815260808101611c4c6020830184614c34565b8281526040602082015260006143876040830184614c50565b604051606081016001600160401b038111828210171561516e5761516e615398565b60405290565b604080519081016001600160401b038111828210171561516e5761516e615398565b604051602081016001600160401b038111828210171561516e5761516e615398565b604051608081016001600160401b038111828210171561516e5761516e615398565b60405161018081016001600160401b038111828210171561516e5761516e615398565b604051601f8201601f191681016001600160401b038111828210171561522557615225615398565b604052919050565b60006001600160401b0382111561524657615246615398565b50601f01601f191660200190565b600082198211156152675761526761536c565b500190565b60008261527b5761527b615382565b500490565b600081600019048311821515161561529a5761529a61536c565b500290565b6000828210156152b1576152b161536c565b500390565b60005b838110156152d15781810151838201526020016152b9565b838111156131735750506000910152565b600181811c908216806152f657607f821691505b6020821081141561531757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156153315761533161536c565b5060010190565b600060ff821660ff81141561534f5761534f61536c565b60010192915050565b60008261536757615367615382565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612e8c57600080fd5b60048110612e8c57600080fdfea26469706673582212203eee65aea4324709f5afa07dcb0398289d3baa520ea13078dbcc795ac64fdd0e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061013e5760003560e01c80630dae4d441461014357806310e0af64146101585780632626f4e01461018057806349077a4f146101935780634c33efa7146101b35780634f2cabdf146101d35780634f64b2be1461020157806354d7dc931461022c5780635acb50821461023f5780635eb3996814610252578063685bf0cd1461027b5780636fc2790e1461028e578063715018a6146102a15780637b6a8777146102a957806380f55605146102bc5780638da5cb5b146102cf5780639c275d11146102d75780639f1d0f59146102ea578063b22073b6146102fd578063c87b2cba14610306578063d4eddf7e14610319578063de611f5514610321578063e78cea9214610334578063f2fde38b14610347578063f62417271461035a578063f8b246261461036d575b600080fd5b6101566101513660046147a0565b610380565b005b61016b610166366004614b26565b610412565b60405190151581526020015b60405180910390f35b61015661018e366004614b26565b610450565b6007546101a6906001600160a01b031681565b6040516101779190614e0b565b6101c66101c1366004614b26565b6104a0565b604051610177919061510c565b6101f36101e1366004614733565b60036020526000908152604090205481565b604051908152602001610177565b61021461020f366004614b26565b6108ca565b6040516101779c9b9a99989796959493929190615046565b6101c661023a366004614bbb565b610e04565b61015661024d36600461474d565b61134f565b6101a6610260366004614b26565b6002602052600090815260409020546001600160a01b031681565b610156610289366004614b9a565b6113ce565b6101c661029c366004614b9a565b611427565b610156611623565b6008546101a6906001600160a01b031681565b6006546101a6906001600160a01b031681565b6101a661165e565b6101f36102e5366004614b26565b61166d565b6101566102f8366004614945565b611c53565b6101f360055481565b6101f3610314366004614b26565b611cf2565b6101f3612414565b61015661032f366004614b56565b6124ca565b6009546101a6906001600160a01b031681565b610156610355366004614733565b612def565b61016b61036836600461491c565b612e8f565b6101f361037b366004614733565b612f55565b6009546001600160a01b0316331461039757600080fd5b6103c5604051806040016040528060068152602001651c995b5a5b9d60d21b8152508484606001518461312a565b6103cf8383613179565b9150808260600151846001600160a01b03167f9334e83d2495be85868d3a9192f0c36a49a1b869b4d6465ff7340c2cbcacfcdc60405160405180910390a4505050565b6000818152600460205260408120600e015461043057506001919050565b6104398261166d565b42111561044857506001919050565b506000919050565b3361045961165e565b6001600160a01b0316146104885760405162461bcd60e51b815260040161047f90614ffe565b60405180910390fd5b61049a81670de0b6b3a76400006134e9565b60055550565b6104a86140cd565b6104d06040518060400160405280600681526020016562757945676760d01b815250836134f5565b60008281526002602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190614b3e565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610587903390600401614e0b565b60206040518083038186803b15801561059f57600080fd5b505afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d79190614b3e565b10156106305760405162461bcd60e51b815260206004820152602260248201527f5a4b3a204e6f7420456e6f756768205a4f4f20746f2070757263686173652045604482015261676760f01b606482015260840161047f565b6106d46040518060400160405280601081526020016f7a6f6f2e7472616e7366657246726f6d60801b8152503330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf9190614b3e565b61353e565b600860009054906101000a90046001600160a01b03166001600160a01b03166323b872dd3330846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190614b3e565b6040518463ffffffff1660e01b815260040161078993929190614e1f565b602060405180830381600087803b1580156107a357600080fd5b505af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190614977565b506000816001600160a01b0316630489a8f66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085591908101906149c5565b90506108613382613179565b90506108936040518060400160405280600a8152602001696d696e7465642065676760b01b81525082606001516134f5565b606081015160405133907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a39392505050565b6004602052806000526040600020600091509050806000016040518060800160405290816000820180546108fd906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610929906152e2565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff909216926109ba906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546109e6906152e2565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b505050505090806006015490806007015490806008015490806009018054610a5a906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a86906152e2565b8015610ad35780601f10610aa857610100808354040283529160200191610ad3565b820191906000526020600020905b815481529060010190602001808311610ab657829003601f168201915b50505050509080600a01604051806080016040529081600082018054610af8906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b24906152e2565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b50505050508152602001600182018054610b8a906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906152e2565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610c99906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc5906152e2565b8015610d125780601f10610ce757610100808354040283529160200191610d12565b820191906000526020600020905b815481529060010190602001808311610cf557829003601f168201915b50505050508152602001600182018054610d2b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d57906152e2565b8015610da45780601f10610d7957610100808354040283529160200191610da4565b820191906000526020600020905b815481529060010190602001808311610d8757829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610e0c6140cd565b8282610e396040518060400160405280600881526020016718d85b909c99595960c21b8152508383613587565b60075460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610e7d57600080fd5b505af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190614977565b8015610f38575060075460405162491fcf60e11b8152600481018390526001600160a01b039091169062923f9e90602401602060405180830381600087803b158015610f0057600080fd5b505af1158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190614977565b610f795760405162461bcd60e51b81526020600482015260126024820152712737b716b2bc34b9ba32b73a103a37b5b2b760711b604482015260640161047f565b60408051602081018390520160408051601f19818403018152828252805160209182012090830185905291016040516020818303038152906040528051906020012014156110075760405162461bcd60e51b815260206004820152601b60248201527a2737ba1030b13632903a3790313932b2b2103bb4ba341039b2b63360291b604482015260640161047f565b61101082610412565b8015611020575061102081610412565b61106b5760405162461bcd60e51b815260206004820152601c60248201527b2bb0b4ba103337b91031b7b7b63237bbb7103a37903334b734b9b41760211b604482015260640161047f565b611074826135ce565b80156110845750611084816135ce565b6110ce5760405162461bcd60e51b815260206004820152601b60248201527a27b7363c902120a9a2afa0a724a6a0a61031b0b710313932b2b21760291b604482015260640161047f565b6110fe6040518060400160405280600c81526020016b6272656564416e696d616c7360a01b81525087878761360c565b6000868152600260209081526040808320548151608081018352898552600490935290832060050180546001600160a01b039092169263e82baf309290918291611147906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611173906152e2565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b50505050508152602001600460008a815260200190815260200160002060050180546111eb906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611217906152e2565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b50505050508152602001898152602001888152506040518263ffffffff1660e01b81526004016112949190615033565b600060405180830381600087803b1580156112ae57600080fd5b505af11580156112c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ea91908101906149c5565b90506112f68686613655565b6113003382613179565b60608101516040805189815260208101899052929350909133917fddf1e8fec06a50aa72b8a39a06787808c53eca73b2bd1cc995681cf7b8014650910160405180910390a39695505050505050565b3361135861165e565b6001600160a01b03161461137e5760405162461bcd60e51b815260040161047f90614ffe565b600680546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600880549285169284169290921790915560098054919093169116179055565b6113f8604051806040016040528060078152602001666275794567677360c81b8152508383613587565b60005b818160ff1610156114225761140f836104a0565b508061141a81615338565b9150506113fb565b505050565b61142f6140cd565b61145a60405180604001604052806008815260200167686174636845676760c01b8152508484613587565b60075460405162491fcf60e11b8152600481018490526001600160a01b039091169062923f9e90602401602060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190614977565b6115225760405162461bcd60e51b815260206004820152601f60248201527f456767206973206275726e6564206f7220646f6573206e6f7420657869737400604482015260640161047f565b600061152e84846136f0565b610120810180518590525160209081018690526040805180820182526006815265185b9a5b585b60d21b9281019290925282015191925061156e91613e4c565b6115783382613179565b90506115ae6040518060400160405280600d81526020016c1b5a5b9d195908185b9a5b585b609a1b815250826060015185613587565b6115b83384613e91565b6115e060405180604001604052806006815260200165189d5c9b995960d21b815250846134f5565b606081015160405184815233907fb38ba9b1c21d14e92c6b24ace95218359ca7727f16a3e622617817dd9f38305c9060200160405180910390a390505b92915050565b3361162c61165e565b6001600160a01b0316146116525760405162461bcd60e51b815260040161047f90614ffe565b61165c6000613f6e565b565b6000546001600160a01b031690565b6000818152600460205260408082208151610200810190925280548392919082906101808201908390829082906116a3906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546116cf906152e2565b801561171c5780601f106116f15761010080835404028352916020019161171c565b820191906000526020600020905b8154815290600101906020018083116116ff57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561177957634e487b7160e01b600052602160045260246000fd5b600381111561179857634e487b7160e01b600052602160045260246000fd5b81526020016005820180546117ac906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546117d8906152e2565b80156118255780601f106117fa57610100808354040283529160200191611825565b820191906000526020600020905b81548152906001019060200180831161180857829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201805461185c906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611888906152e2565b80156118d55780601f106118aa576101008083540402835291602001916118d5565b820191906000526020600020905b8154815290600101906020018083116118b857829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546118fe906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461192a906152e2565b80156119775780601f1061194c57610100808354040283529160200191611977565b820191906000526020600020905b81548152906001019060200180831161195a57829003601f168201915b50505050508152602001600182018054611990906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546119bc906152e2565b8015611a095780601f106119de57610100808354040283529160200191611a09565b820191906000526020600020905b8154815290600101906020018083116119ec57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290611ab0906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611adc906152e2565b8015611b295780601f10611afe57610100808354040283529160200191611b29565b820191906000526020600020905b815481529060010190602001808311611b0c57829003601f168201915b50505050508152602001600182018054611b42906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6e906152e2565b8015611bbb5780601f10611b9057610100808354040283529160200191611bbb565b820191906000526020600020905b815481529060010190602001808311611b9e57829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015261010081015151909150611c389062015180615280565b81610100015160200151611c4c9190615254565b9392505050565b6009546001600160a01b03163314611c6a57600080fd5b611c91604051806040016040528060048152602001630737761760e41b8152508484613fbe565b611c9b8383613e91565b600082815260046020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b6000611d206040518060400160405280600a815260200169199c9959505b9a5b585b60b21b815250836134f5565b6000828152600460205260408082208151610200810190925280548290610180820190839082908290611d52906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7e906152e2565b8015611dcb5780601f10611da057610100808354040283529160200191611dcb565b820191906000526020600020905b815481529060010190602001808311611dae57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff166003811115611e2857634e487b7160e01b600052602160045260246000fd5b6003811115611e4757634e487b7160e01b600052602160045260246000fd5b8152602001600582018054611e5b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e87906152e2565b8015611ed45780601f10611ea957610100808354040283529160200191611ed4565b820191906000526020600020905b815481529060010190602001808311611eb757829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054611f0b906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f37906152e2565b8015611f845780601f10611f5957610100808354040283529160200191611f84565b820191906000526020600020905b815481529060010190602001808311611f6757829003601f168201915b50505050508152602001600a8201604051806080016040529081600082018054611fad906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd9906152e2565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b5050505050815260200160018201805461203f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461206b906152e2565b80156120b85780601f1061208d576101008083540402835291602001916120b8565b820191906000526020600020905b81548152906001019060200180831161209b57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff808216151583860152610100909104161515606080830191909152848401919091528251918201909252601384018054929093019290918290829061215f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461218b906152e2565b80156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505081526020016001820180546121f1906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461221d906152e2565b801561226a5780601f1061223f5761010080835404028352916020019161226a565b820191906000526020600020905b81548152906001019060200180831161224d57829003601f168201915b50505091835250506002820154602080830191909152600390920154604091820152918352815160808101835260178501546060820190815281528251808301845260188601548152818301528251808301845260199095015485529182019390935291015290506122dc3384613e91565b60008160a00151436122ee919061529f565b905060006122fe82617080614005565b8351604001519091506123249061231d90670de0b6b3a76400006134e9565b82906134e9565b93506123586040518060400160405280600e81526020016d18d85b18dd5b185d19565a595b1960921b81525083838761360c565b60085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061238a9033908890600401614e67565b602060405180830381600087803b1580156123a457600080fd5b505af11580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190614977565b506040518490869033907f6d330a72b03f3f443e72a146c33e5882a01427b60a36b46ac11243d0c4e31d0990600090a4505050919050565b60003361241f61165e565b6001600160a01b0316146124455760405162461bcd60e51b815260040161047f90614ffe565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190612475903090600401614e0b565b60206040518083038186803b15801561248d57600080fd5b505afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190614b3e565b905090565b6005546008546040516370a0823160e01b81526001600160a01b03909116906370a08231906124fd903390600401614e0b565b60206040518083038186803b15801561251557600080fd5b505afa158015612529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254d9190614b3e565b106125a65760405162461bcd60e51b815260206004820152602360248201527f5a4b3a204e6f7420656e6f756768205a4f4f20746f207075726368617365204e604482015262616d6560e81b606482015260840161047f565b6008546005546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916125db9133913091600401614e1f565b602060405180830381600087803b1580156125f557600080fd5b505af1158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190614977565b506000828152600460205260408082208151610200810190925280548290610180820190839082908290612660906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461268c906152e2565b80156126d95780601f106126ae576101008083540402835291602001916126d9565b820191906000526020600020905b8154815290600101906020018083116126bc57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561273657634e487b7160e01b600052602160045260246000fd5b600381111561275557634e487b7160e01b600052602160045260246000fd5b8152602001600582018054612769906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612795906152e2565b80156127e25780601f106127b7576101008083540402835291602001916127e2565b820191906000526020600020905b8154815290600101906020018083116127c557829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201548152602001600982018054612819906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612845906152e2565b80156128925780601f1061286757610100808354040283529160200191612892565b820191906000526020600020905b81548152906001019060200180831161287557829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546128bb906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546128e7906152e2565b80156129345780601f1061290957610100808354040283529160200191612934565b820191906000526020600020905b81548152906001019060200180831161291757829003601f168201915b5050505050815260200160018201805461294d906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612979906152e2565b80156129c65780601f1061299b576101008083540402835291602001916129c6565b820191906000526020600020905b8154815290600101906020018083116129a957829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290612a6d906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612a99906152e2565b8015612ae65780601f10612abb57610100808354040283529160200191612ae6565b820191906000526020600020905b815481529060010190602001808311612ac957829003601f168201915b50505050508152602001600182018054612aff906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2b906152e2565b8015612b785780601f10612b4d57610100808354040283529160200191612b78565b820191906000526020600020905b815481529060010190602001808311612b5b57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552808301949094529182019290925260c08301859052600086815260048252919091208251805180519495508594929391928492612c159284929101906141e8565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115612c6e57634e487b7160e01b600052602160045260246000fd5b021790555060408201518051612c8e9160058401916020909101906141e8565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051612cc89160098401916020909101906141e8565b5060e082015180518051600a840191612ce6918391602001906141e8565b506020828101518051612cff92600185019201906141e8565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff00191617921515909102919091179091556101408301518051805191926013850192612d9392849201906141e8565b506020828101518051612dac92600185019201906141e8565b5060408281015160028301556060909201516003909101556101609290920151805151601783015560208101515160188301559091015151601990910155505050565b33612df861165e565b6001600160a01b031614612e1e5760405162461bcd60e51b815260040161047f90614ffe565b6001600160a01b038116612e835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047f565b612e8c81613f6e565b50565b600033612e9a61165e565b6001600160a01b031614612ec05760405162461bcd60e51b815260040161047f90614ffe565b6008546001600160a01b03166323b872dd3085612ee586670de0b6b3a76400006134e9565b6040518463ffffffff1660e01b8152600401612f0393929190614e1f565b602060405180830381600087803b158015612f1d57600080fd5b505af1158015612f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c9190614977565b6001600160a01b03811660009081526003602052604081205415612fb05760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b604482015260640161047f565b81612fbf600180546001019055565b6000612fca60015490565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526003909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b15801561306057600080fd5b505afa158015613074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261309c9190810190614993565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b1580156130d557600080fd5b505afa1580156130e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310d9190614b3e565b60405161311b929190614f88565b60405180910390a29392505050565b613173848484846040516024016131449493929190614f22565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b179052614011565b50505050565b6131816140cd565b6131ac604051806040016040528060048152602001631b5a5b9d60e21b815250848460400151614032565b600754604051631dc925ff60e31b81526001600160a01b039091169063ee492ff8906131de9086908690600401614e43565b600060405180830381600087803b1580156131f857600080fd5b505af115801561320c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261323491908101906149c5565b60065460608201516101608301516040516375aab41d60e11b81529395506001600160a01b039092169263eb55683a92613271929160040161511f565b600060405180830381600087803b15801561328b57600080fd5b505af115801561329f573d6000803e3d6000fd5b5050505060608201516000908152600460209081526040909120835180518051869484926132d392849291909101906141e8565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff0219169083600381111561332c57634e487b7160e01b600052602160045260246000fd5b02179055506040820151805161334c9160058401916020909101906141e8565b50606082015160068201556080820151600782015560a0820151600882015560c082015180516133869160098401916020909101906141e8565b5060e082015180518051600a8401916133a4918391602001906141e8565b5060208281015180516133bd92600185019201906141e8565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff0019161792151590910291909117909155610140830151805180519192601385019261345192849201906141e8565b50602082810151805161346a92600185019201906141e8565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b6000611c4c8284615280565b61353a828260405160240161350b929190614f88565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614011565b5050565b613173848484846040516024016135589493929190614e80565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b179052614011565b61142283838360405160240161359f93929190614faa565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052614011565b60008181526004602081905260408220015460019060ff16600381111561360557634e487b7160e01b600052602160045260246000fd5b1492915050565b613173848484846040516024016136269493929190614fcf565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b179052614011565b61368960405180604001604052806011815260200170757064617465427265656444656c61797360781b8152508383613587565b6000828152600460205260408120600e018054916136a68361531d565b90915550506000818152600460205260408120600e018054916136c88361531d565b909155505060009182526004602052604080832042600f918201819055928452922090910155565b6136f86140cd565b6137246040518060400160405280600981526020016819d95d105b9a5b585b60ba1b8152508484613587565b6000828152600460205260408082208151610200810190925280548290610180820190839082908290613756906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613782906152e2565b80156137cf5780601f106137a4576101008083540402835291602001916137cf565b820191906000526020600020905b8154815290600101906020018083116137b257829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016004820160009054906101000a900460ff16600381111561382c57634e487b7160e01b600052602160045260246000fd5b600381111561384b57634e487b7160e01b600052602160045260246000fd5b815260200160058201805461385f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461388b906152e2565b80156138d85780601f106138ad576101008083540402835291602001916138d8565b820191906000526020600020905b8154815290600101906020018083116138bb57829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201805461390f906152e2565b80601f016020809104026020016040519081016040528092919081815260200182805461393b906152e2565b80156139885780601f1061395d57610100808354040283529160200191613988565b820191906000526020600020905b81548152906001019060200180831161396b57829003601f168201915b50505050508152602001600a82016040518060800160405290816000820180546139b1906152e2565b80601f01602080910402602001604051908101604052809291908181526020018280546139dd906152e2565b8015613a2a5780601f106139ff57610100808354040283529160200191613a2a565b820191906000526020600020905b815481529060010190602001808311613a0d57829003601f168201915b50505050508152602001600182018054613a43906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613a6f906152e2565b8015613abc5780601f10613a9157610100808354040283529160200191613abc565b820191906000526020600020905b815481529060010190602001808311613a9f57829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281518083018352600e8501548152600f850154818301528382015281516080808201845260108601548252601186015492820192909252601285015460ff8082161515838601526101009091041615156060808301919091528484019190915282519182019092526013840180549290930192909182908290613b63906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613b8f906152e2565b8015613bdc5780601f10613bb157610100808354040283529160200191613bdc565b820191906000526020600020905b815481529060010190602001808311613bbf57829003601f168201915b50505050508152602001600182018054613bf5906152e2565b80601f0160208091040260200160405190810160405280929190818152602001828054613c21906152e2565b8015613c6e5780601f10613c4357610100808354040283529160200191613c6e565b820191906000526020600020905b815481529060010190602001808311613c5157829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015291835281516080810183526017850154606082019081528152825180830184526018860154815281830152825180830184526019909501548552918201939093529101529050600081602001516003811115613cfc57634e487b7160e01b600052602160045260246000fd5b1415613dd357613d346040518060400160405280600f81526020016e19d95d14985b991bdb505b9a5b585b608a1b8152508585613587565b6000848152600260205260409020546001600160a01b03166308f8bcc6613d59614079565b6040518263ffffffff1660e01b8152600401613d7791815260200190565b60006040518083038186803b158015613d8f57600080fd5b505afa158015613da3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dcb91908101906149c5565b91505061161d565b613e056040518060400160405280600f81526020016e19d95d14985b991bdb521e589c9a59608a1b8152508585613587565b6000848152600260205260409020546001600160a01b0316633b5c9856613e2a614079565b8360e001516040518363ffffffff1660e01b8152600401613d77929190615133565b61353a8282604051602401613e62929190614f5a565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052614011565b613eb860405180604001604052806004815260200163313ab93760e11b8152508383613fbe565b600754604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90613eea9085908590600401614e67565b600060405180830381600087803b158015613f0457600080fd5b505af1158015613f18573d6000803e3d6000fd5b505050600082815260046020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611422838383604051602401613fd693929190614ef4565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052614011565b6000611c4c828461526c565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61142283838360405160240161404a93929190614eb6565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b179052614011565b604080514360208201526001600160601b03193360601b16918101919091524260548201526000908190612710906074016040516020818303038152906040528051906020012060001c61161d9190615358565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e0830152819081526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016141576040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001614179604051806040016040528060008152602001600081525090565b81526040805160808101825260008082526020828101829052928201819052606082015291019081526020016141d66040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016141e361426c565b905290565b8280546141f4906152e2565b90600052602060002090601f016020900481019282614216576000855561425c565b82601f1061422f57805160ff191683800117855561425c565b8280016001018555821561425c579182015b8281111561425c578251825591602001919060010190614241565b50614268929150614299565b5090565b604051806060016040528061427f6142ae565b815260200161428c6142ae565b81526020016141e36142ae565b5b80821115614268576000815560010161429a565b6040518060200160405280600081525090565b80356001600160a01b03811681146142d857600080fd5b919050565b80356142d8816153bc565b80516142d8816153bc565b600082601f830112614303578081fd5b81356143166143118261522d565b6151fd565b81815284602083860101111561432a578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614354578081fd5b81516143626143118261522d565b818152846020838601011115614376578283fd5b6143878260208301602087016152b6565b949350505050565b6000606082840312156143a0578081fd5b6143a861514c565b90506143b48383614484565b81526143c38360208401614484565b60208201526143d58360408401614484565b604082015292915050565b6000606082840312156143f1578081fd5b6143f961514c565b905061440583836144a7565b815261441483602084016144a7565b60208201526143d583604084016144a7565b600060408284031215614437578081fd5b61443f615174565b9050813581526020820135602082015292915050565b600060408284031215614466578081fd5b61446e615174565b9050815181526020820151602082015292915050565b600060208284031215614495578081fd5b61449d615196565b9135825250919050565b6000602082840312156144b8578081fd5b6144c0615196565b9151825250919050565b6000608082840312156144db578081fd5b6144e36151b8565b905081356001600160401b03808211156144fc57600080fd5b614508858386016142f3565b8352602084013591508082111561451e57600080fd5b5061452b848285016142f3565b602083015250604082013560408201526060820135606082015292915050565b60006080828403121561455c578081fd5b6145646151b8565b905081516001600160401b038082111561457d57600080fd5b61458985838601614344565b8352602084015191508082111561459f57600080fd5b506145ac84828501614344565b602083015250604082015160408201526060820151606082015292915050565b6000608082840312156145dd578081fd5b6145e56151b8565b905081358152602082013560208201526040820135614603816153ae565b60408201526060820135614616816153ae565b606082015292915050565b600060808284031215614632578081fd5b61463a6151b8565b905081518152602082015160208201526040820151614658816153ae565b60408201526060820151614616816153ae565b60006080828403121561467c578081fd5b6146846151b8565b905081356001600160401b0381111561469c57600080fd5b6146a8848285016142f3565b82525060208201356020820152604082013560408201526060820135606082015292915050565b6000608082840312156146e0578081fd5b6146e86151b8565b905081516001600160401b0381111561470057600080fd5b61470c84828501614344565b82525060208201516020820152604082015160408201526060820151606082015292915050565b600060208284031215614744578081fd5b611c4c826142c1565b60008060008060808587031215614762578283fd5b61476b856142c1565b9350614779602086016142c1565b9250614787604086016142c1565b9150614795606086016142c1565b905092959194509250565b6000806000606084860312156147b4578081fd5b6147bd846142c1565b925060208401356001600160401b03808211156147d8578283fd5b9085019061024082880312156147ec578283fd5b6147f46151da565b823582811115614802578485fd5b61480e8982860161466b565b82525061481d602084016142dd565b6020820152604083013582811115614833578485fd5b61483f898286016142f3565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115614874578485fd5b614880898286016142f3565b60c08301525060e083013582811115614897578485fd5b6148a3898286016144ca565b60e0830152506101006148b889828601614426565b908201526101406148cb898583016145cc565b6101208301526101c0840135838111156148e3578586fd5b6148ef8a8287016144ca565b828401525050614903886101e0850161438f565b6101608201529497949650505050604092909201359150565b6000806040838503121561492e578182fd5b614937836142c1565b946020939093013593505050565b600080600060608486031215614959578081fd5b614962846142c1565b95602085013595506040909401359392505050565b600060208284031215614988578081fd5b8151611c4c816153ae565b6000602082840312156149a4578081fd5b81516001600160401b038111156149b9578182fd5b61438784828501614344565b6000602082840312156149d6578081fd5b81516001600160401b03808211156149ec578283fd5b908301906102408286031215614a00578283fd5b614a086151da565b825182811115614a16578485fd5b614a22878286016146cf565b825250614a31602084016142e8565b6020820152604083015182811115614a47578485fd5b614a5387828601614344565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115614a88578485fd5b614a9487828601614344565b60c08301525060e083015182811115614aab578485fd5b614ab78782860161454b565b60e083015250610100614acc87828601614455565b90820152610140614adf87858301614621565b6101208301526101c084015183811115614af7578586fd5b614b038882870161454b565b828401525050614b17866101e085016143e0565b61016082015295945050505050565b600060208284031215614b37578081fd5b5035919050565b600060208284031215614b4f578081fd5b5051919050565b60008060408385031215614b68578182fd5b8235915060208301356001600160401b03811115614b84578182fd5b614b90858286016142f3565b9150509250929050565b60008060408385031215614bac578182fd5b50508035926020909101359150565b600080600060608486031215614bcf578081fd5b505081359360208301359350604090920135919050565b60048110614c0457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614c208160208601602086016152b6565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452614c656080850182614c08565b905060208301518482036020860152614c7e8282614c08565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452614cde6080850182614c08565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552614d1e82860182614cc9565b9150506020830151614d336020860182614be6565b5060408301518482036040860152614d4b8282614c08565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614d838282614c08565b91505060e083015184820360e0860152614d9d8282614c50565b91505061010080840151614dbd8287018280518252602090810151910152565b5050610120830151610140614dd481870183614c9f565b8401518583036101c08701529050614dec8282614c50565b915050610160830151614e036101e0860182614c34565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038316815260406020820181905260009061438790830184614d08565b6001600160a01b03929092168252602082015260400190565b608081526000614e936080830187614c08565b6001600160a01b0395861660208401529390941660408201526060015292915050565b606081526000614ec96060830186614c08565b6001600160a01b03851660208401528281036040840152614eea8185614c08565b9695505050505050565b606081526000614f076060830186614c08565b6001600160a01b039490941660208301525060400152919050565b608081526000614f356080830187614c08565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b604081526000614f6d6040830185614c08565b8281036020840152614f7f8185614c08565b95945050505050565b604081526000614f9b6040830185614c08565b90508260208301529392505050565b606081526000614fbd6060830186614c08565b60208301949094525060400152919050565b608081526000614fe26080830187614c08565b6020830195909552506040810192909252606090910152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526000611c4c6020830184614c50565b6102408152600061505b61024083018f614cc9565b615068602084018f614be6565b828103604084015261507a818e614c08565b90508b60608401528a60808401528960a084015282810360c08401526150a0818a614c08565b905082810360e08401526150b48189614c50565b8751610100850152602088015161012085015290506150d7610140840187614c9f565b8281036101c08401526150ea8186614c50565b9150506150fb6101e0830184614c34565b9d9c50505050505050505050505050565b602081526000611c4c6020830184614d08565b82815260808101611c4c6020830184614c34565b8281526040602082015260006143876040830184614c50565b604051606081016001600160401b038111828210171561516e5761516e615398565b60405290565b604080519081016001600160401b038111828210171561516e5761516e615398565b604051602081016001600160401b038111828210171561516e5761516e615398565b604051608081016001600160401b038111828210171561516e5761516e615398565b60405161018081016001600160401b038111828210171561516e5761516e615398565b604051601f8201601f191681016001600160401b038111828210171561522557615225615398565b604052919050565b60006001600160401b0382111561524657615246615398565b50601f01601f191660200190565b600082198211156152675761526761536c565b500190565b60008261527b5761527b615382565b500490565b600081600019048311821515161561529a5761529a61536c565b500290565b6000828210156152b1576152b161536c565b500390565b60005b838110156152d15781810151838201526020016152b9565b838111156131735750506000910152565b600181811c908216806152f657607f821691505b6020821081141561531757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156153315761533161536c565b5060010190565b600060ff821660ff81141561534f5761534f61536c565b60010192915050565b60008261536757615367615382565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612e8c57600080fd5b60048110612e8c57600080fdfea26469706673582212203eee65aea4324709f5afa07dcb0398289d3baa520ea13078dbcc795ac64fdd0e64736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12772,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropIDs",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2883_storage"
      },
      {
        "astId": 12844,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "drops",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12848,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12853,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Token)22790_storage)"
      },
      {
        "astId": 12855,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "namePrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12858,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "market",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMarket)22535"
      },
      {
        "astId": 12861,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "media",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMedia)22715"
      },
      {
        "astId": 12864,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "zoo",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)1239"
      },
      {
        "astId": 12866,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "bridge",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1239": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMarket)22535": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IMedia)22715": {
        "encoding": "inplace",
        "label": "contract IMedia",
        "numberOfBytes": "20"
      },
      "t_enum(Type)22726": {
        "encoding": "inplace",
        "label": "enum IZoo.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Token)22790_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IZoo.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)22790_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BidShares)22393_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.BidShares",
        "members": [
          {
            "astId": 22386,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "prevOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(D256)6629_storage"
          },
          {
            "astId": 22389,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(D256)6629_storage"
          },
          {
            "astId": 22392,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(D256)6629_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Breed)22740_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Breed",
        "members": [
          {
            "astId": 22737,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22739,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2883_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2882,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(D256)6629_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.D256",
        "members": [
          {
            "astId": 6628,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MediaData)22561_storage": {
        "encoding": "inplace",
        "label": "struct IMedia.MediaData",
        "members": [
          {
            "astId": 22554,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 22556,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 22558,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 22560,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Meta)22758_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Meta",
        "members": [
          {
            "astId": 22751,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "eggID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22753,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "dropID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22755,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "burned",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 22757,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "swapped",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Parents)22749_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Parents",
        "members": [
          {
            "astId": 22742,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalA",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 22744,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalB",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 22746,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 22748,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenB",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rarity)22735_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Rarity",
        "members": [
          {
            "astId": 22728,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 22730,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "probability",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22732,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "yield",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 22734,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "boost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)22790_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Token",
        "members": [
          {
            "astId": 22761,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "rarity",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Rarity)22735_storage"
          },
          {
            "astId": 22764,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "kind",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Type)22726"
          },
          {
            "astId": 22766,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 22768,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "id",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 22770,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 22772,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "birthday",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 22774,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "customName",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 22777,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "parents",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Parents)22749_storage"
          },
          {
            "astId": 22780,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "breed",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(Breed)22740_storage"
          },
          {
            "astId": 22783,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "meta",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(Meta)22758_storage"
          },
          {
            "astId": 22786,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "data",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(MediaData)22561_storage"
          },
          {
            "astId": 22789,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "bidShares",
            "offset": 0,
            "slot": "23",
            "type": "t_struct(BidShares)22393_storage"
          }
        ],
        "numberOfBytes": "832"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}