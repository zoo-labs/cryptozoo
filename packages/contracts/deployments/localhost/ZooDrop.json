{
  "address": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "animals",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseEgg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseEgg",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hybridEgg",
          "type": "string"
        }
      ],
      "name": "configureEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zooKeeper",
          "type": "address"
        }
      ],
      "name": "configureKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "eggs",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "birthday",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        }
      ],
      "name": "getRandomAnimal",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        }
      ],
      "name": "getRandomHybrid",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hybridEgg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hybridParents",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hybridSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hybrids",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        }
      ],
      "name": "newHybridEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "rarities",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rarityAnimals",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raritySorted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setAnimal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct ZooDrop._Animal[]",
          "name": "_animals",
          "type": "tuple[]"
        }
      ],
      "name": "setAnimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setEgg",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct ZooDrop.Egg",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setHybrid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "parentA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "parentB",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct ZooDrop._Hybrid[]",
          "name": "_hybrids",
          "type": "tuple[]"
        }
      ],
      "name": "setHybrids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "name": "setRarity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "title",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ed59bd1dd47b48f0542498f08bffeafc4695455ee9db07e4d64501a8352b8e9",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
    "transactionIndex": 0,
    "gasUsed": "4216694",
    "logsBloom": "0x
    "blockHash": "0x9f29c93b7d7b52b0adee83e3ccd18b92c4ba70fd3babc17d73787f4f7d2fbc48",
    "transactionHash": "0x6ed59bd1dd47b48f0542498f08bffeafc4695455ee9db07e4d64501a8352b8e9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x6ed59bd1dd47b48f0542498f08bffeafc4695455ee9db07e4d64501a8352b8e9",
        "address": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0aef8b960d43418dc0a83dd0cac04a3793de3e0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9f29c93b7d7b52b0adee83e3ccd18b92c4ba70fd3babc17d73787f4f7d2fbc48"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "4216694",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Gen 0"
  ],
  "solcInputHash": "96ed39cd36be3a398a7b4c1cf440a2d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"animals\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseEgg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseEgg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hybridEgg\",\"type\":\"string\"}],\"name\":\"configureEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zooKeeper\",\"type\":\"address\"}],\"name\":\"configureKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"eggs\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"getRandomAnimal\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"}],\"name\":\"getRandomHybrid\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hybridEgg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hybridParents\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hybridSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hybrids\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"}],\"name\":\"newHybridEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityAnimals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raritySorted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setAnimal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct ZooDrop._Animal[]\",\"name\":\"_animals\",\"type\":\"tuple[]\"}],\"name\":\"setAnimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setEgg\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct ZooDrop.Egg\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setHybrid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct ZooDrop._Hybrid[]\",\"name\":\"_hybrids\",\"type\":\"tuple[]\"}],\"name\":\"setHybrids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"setRarity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ZooDrop.sol\":\"ZooDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/ZooDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Decimal } from \\\"./Decimal.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { IMedia } from \\\"./interfaces/IMedia.sol\\\";\\nimport { IZoo } from \\\"./interfaces/IZoo.sol\\\";\\n\\nimport \\\"./console.sol\\\";\\n\\n\\ncontract ZooDrop is Ownable {\\n    using SafeMath for uint256;\\n\\n    struct Egg {\\n        IZoo.Type kind;\\n        string  name;\\n        uint256 supply;\\n        uint256 price;\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        uint256 minted;       // amount minted\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Animal {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Hybrid {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        uint256 yield;\\n        string parentA;\\n        string parentB;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    // Title of drop\\n    string public title;\\n\\n    // Name of default base egg\\n    string public baseEgg;\\n\\n    // Name of configured hybrid egg\\n    string public hybridEgg;\\n\\n    // Address of ZooKeeper contract\\n    address public keeperAddress;\\n\\n    // mapping of Rarity name to Rarity\\n    mapping (string => IZoo.Rarity) public rarities;\\n\\n    // mapping of Rarity name to []string of Animal names\\n    mapping (string => string[]) public rarityAnimals;\\n\\n    // Rarity sorted by most rare -> least rare\\n    string[] public raritySorted;\\n\\n    // mapping of Egg name to Egg\\n    mapping (string => Egg) public eggs;\\n\\n    // mapping of Animal name to Animal\\n    mapping (string => Animal) public animals;\\n\\n    // mapping of animal name to Hybrid\\n    mapping (string => Hybrid) public hybrids;\\n\\n    // mapping of (parent + parent) to Hybrid\\n    mapping (string => Hybrid) public hybridParents;\\n\\n    // Ensure only ZK can call method\\n    modifier onlyZoo() {\\n        require(\\n            keeperAddress == msg.sender, \\\"ZooDrop: Only ZooKeeper can call this method\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(string memory _title) {\\n        title = _title;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return getEgg(baseEgg).minted;\\n    }\\n\\n    // Set current base and hybrid egg\\n    function configureEggs(string memory _baseEgg, string memory _hybridEgg) public onlyOwner {\\n        baseEgg = _baseEgg;\\n        hybridEgg = _hybridEgg;\\n    }\\n\\n    // Configure current ZooKeeper\\n    function configureKeeper(address zooKeeper) public onlyOwner {\\n        keeperAddress = zooKeeper;\\n    }\\n\\n    // Add or configure a given rarity\\n    function setRarity(string memory name, uint256 probability, uint256 yield, uint256 boost) public onlyOwner returns (bool) {\\n        require(probability > 0, \\\"Rarity must be over zero\\\");\\n\\n        IZoo.Rarity memory rarity = IZoo.Rarity({\\n            name: name,\\n            probability: probability,\\n            yield: yield,\\n            boost: boost\\n        });\\n\\n        // Save rarity\\n        rarities[rarity.name] = rarity;\\n        raritySorted.push(rarity.name);\\n\\n        return true;\\n    }\\n\\n    // Add or configure a given kind of egg\\n    function setEgg(string memory name, uint256 price, uint256 supply, string memory tokenURI, string memory metadataURI) public onlyOwner returns (Egg memory) {\\n        Egg memory egg;\\n        egg.name = name;\\n        egg.data = getMediaData(tokenURI, metadataURI);\\n        egg.bidShares = getBidShares();\\n        egg.price = price.mul(10**18);\\n        egg.supply = supply;\\n        eggs[name] = egg;\\n        return egg;\\n    }\\n\\n    // Add or configure a given animal\\n    function setAnimal(string memory name, string memory rarity, string memory tokenURI, string memory metadataURI) public onlyOwner returns (bool) {\\n        Animal memory animal = Animal({\\n            kind: IZoo.Type.BASE_ANIMAL,\\n            rarity: getRarity(rarity),\\n            name: name,\\n            data: getMediaData(tokenURI, metadataURI),\\n            bidShares: getBidShares()\\n        });\\n\\n        // Save animal by name\\n        animals[name] = animal;\\n\\n        // Try to add animal to rarity\\n        addAnimalToRarity(animal.rarity.name, animal.name);\\n\\n        return true;\\n    }\\n\\n    // Add or configure a given hybrid\\n    function setHybrid(string memory name, string memory rarity, uint256 yield, string memory parentA, string memory parentB, string memory tokenURI, string memory metadataURI) public onlyOwner returns (bool) {\\n        Hybrid memory hybrid = Hybrid({\\n            kind: IZoo.Type.HYBRID_ANIMAL,\\n            name: name,\\n            rarity: getRarity(rarity),\\n            yield: yield,\\n            parentA: parentA,\\n            parentB: parentB,\\n            data: getMediaData(tokenURI, metadataURI),\\n            bidShares: getBidShares()\\n        });\\n\\n        hybrids[name] = hybrid;\\n        hybridParents[parentsKey(parentA, parentB)] = hybrid;\\n        return true;\\n    }\\n\\n    struct _Animal {\\n        string rarity;\\n        string name;\\n        string tokenURI;\\n        string metadataURI;\\n    }\\n\\n    // Helper to set many Animal at once\\n    function setAnimals(_Animal[] calldata _animals) public onlyOwner {\\n        for (uint256 i = 0; i < _animals.length; i++) {\\n            _Animal calldata animal = _animals[i];\\n            setAnimal(animal.name, animal.rarity, animal.tokenURI, animal.metadataURI);\\n        }\\n    }\\n\\n    struct _Hybrid {\\n        string rarity;\\n        string name;\\n        uint256 yield;\\n        string parentA;\\n        string parentB;\\n        string tokenURI;\\n        string metadataURI;\\n    }\\n\\n\\n    // Helper to set many Animal at once\\n    function setHybrids(_Hybrid[] calldata _hybrids) public onlyOwner {\\n        for (uint256 i = 0; i < _hybrids.length; i++) {\\n            _Hybrid calldata hybrid = _hybrids[i];\\n            setHybrid(hybrid.name, hybrid.rarity, hybrid.yield, hybrid.parentA, hybrid.parentB, hybrid.tokenURI, hybrid.metadataURI);\\n        }\\n    }\\n\\n\\n    // Add Animal to rarity set if it has not been seen before\\n    function addAnimalToRarity(string memory rarity, string memory name) private {\\n        string[] storage _animals = rarityAnimals[rarity];\\n\\n        // Check if animal has been added to this rarity before\\n        for (uint256 i = 0; i < _animals.length; i++) {\\n            string memory known = _animals[i];\\n            if (keccak256(bytes(name)) == keccak256(bytes(known))) {\\n                // Not a new Animal\\n                return;\\n            }\\n        }\\n\\n        // New animal lets add to rarity list\\n        _animals.push(name);\\n\\n        // Ensure stored\\n        rarityAnimals[rarity] = _animals;\\n    }\\n\\n    // Return price for current EggDrop\\n    function eggPrice() public view returns (uint256) {\\n        return getEgg(baseEgg).price;\\n    }\\n\\n    function eggSupply() public view returns (uint256) {\\n        return getEgg(baseEgg).supply;\\n    }\\n\\n    function hybridSupply() public view returns (uint256) {\\n        return getEgg(hybridEgg).supply;\\n    }\\n\\n    // Return a new Egg Token\\n    function newEgg() external onlyZoo returns (IZoo.Token memory) {\\n        Egg memory egg = getEgg(baseEgg);\\n        require(eggSupply() == 0 || egg.minted < eggSupply(), \\\"Out of eggs\\\");\\n\\n        egg.minted++;\\n        eggs[egg.name] = egg;\\n\\n        // Convert egg into a token\\n        return IZoo.Token({\\n            rarity: getRarity('Common'),\\n            kind: IZoo.Type.BASE_EGG,\\n\\n            name: egg.name,\\n            birthday: block.number,\\n            timestamp: block.timestamp,\\n            data: egg.data,\\n            bidShares: egg.bidShares,\\n\\n            parents: IZoo.Parents(\\\"\\\", \\\"\\\", 0, 0), // Common eggs have no parents\\n\\n            id: 0,\\n            customName: \\\"\\\",\\n            breed: IZoo.Breed(0, 0),\\n            meta: IZoo.Meta(0, 0)\\n        });\\n    }\\n\\n    // Return a new Hybrid Egg Token\\n    function newHybridEgg(IZoo.Parents memory parents) external view onlyZoo returns (IZoo.Token memory) {\\n        Egg memory egg = getEgg(hybridEgg);\\n        require(hybridSupply() == 0 || egg.minted < hybridSupply(), \\\"Out of hybrid eggs\\\");\\n\\n        // Convert egg into a token\\n        return IZoo.Token({\\n            rarity: getRarity('Common'),\\n            kind: IZoo.Type.HYBRID_EGG,\\n            name: egg.name,\\n            birthday: block.number,\\n            timestamp: block.timestamp,\\n            data: egg.data,\\n            bidShares: egg.bidShares,\\n\\n            parents: parents, // Hybrid parents\\n\\n            id: 0,\\n            customName: \\\"\\\",\\n            breed: IZoo.Breed(0, 0),\\n            meta: IZoo.Meta(0, 0)\\n        });\\n    }\\n\\n    // Get Egg by name\\n    function getEgg(string memory name) private view returns (Egg memory) {\\n        return eggs[name];\\n    }\\n\\n    // Get Rarity by name\\n    function getRarity(string memory name) private view returns (IZoo.Rarity memory) {\\n        return rarities[name];\\n    }\\n\\n    // Get Animal by name\\n    function getAnimal(string memory name) private view returns (Animal memory) {\\n        return animals[name];\\n    }\\n\\n    // Get Hybrid by name\\n    function getHybrid(string memory name) private view returns (Hybrid memory) {\\n        return hybrids[name];\\n    }\\n\\n    // Chooses animal based on random number generated from(0-999)\\n    function getRandomAnimal(uint256 random) external view returns (IZoo.Token memory token) {\\n        Animal memory animal;\\n\\n        console.log('getRandomAnimal', random);\\n        console.log('raritySorted.length', raritySorted.length);\\n\\n        // Find rarest animal choices first\\n        for (uint256 i = 0; i < raritySorted.length; i++) {\\n            string memory name = raritySorted[i];\\n            IZoo.Rarity memory rarity = rarities[name];\\n\\n            console.log('rarity.name', name);\\n            console.log('rarity.probability', rarity.probability);\\n            console.log('rarityAnimals', rarityAnimals[name][0], rarityAnimals[name][1]);\\n\\n            // Highest probability first, failing that use lowest rarity (common) animal\\n            if (rarity.probability > random || i == raritySorted.length - 1) {\\n                string[] memory choices = rarityAnimals[name];\\n                animal = getAnimal(choices[random % choices.length]);\\n                break;\\n            }\\n        }\\n\\n        // Return Token\\n        token.kind = IZoo.Type.BASE_ANIMAL;\\n        token.name = animal.name;\\n        token.data = animal.data;\\n        token.rarity = animal.rarity;\\n        token.bidShares = animal.bidShares;\\n        token.timestamp = block.timestamp;\\n        token.birthday = block.number;\\n\\n        console.log('randomAnimal', animal.name, animal.rarity.name, animal.rarity.yield);\\n        console.log('randomAnimal.data.tokenURI', animal.data.tokenURI);\\n        console.log('randomAnimal.data.metadataURI', animal.data.metadataURI);\\n        return token;\\n    }\\n\\n    function getRandomHybrid(uint256 random, IZoo.Parents memory parents) external view returns (IZoo.Token memory token) {\\n        Hybrid[2] memory possible = [\\n            parentsToHybrid(parents.animalA, parents.animalB),\\n            parentsToHybrid(parents.animalB, parents.animalA)\\n        ];\\n\\n        // pick array index 0 or 1 depending on the rarity\\n        Hybrid memory hybrid = possible[random % 2];\\n\\n        // Return Token\\n        token.kind = IZoo.Type.HYBRID_ANIMAL;\\n        token.name = hybrid.name;\\n        token.data = hybrid.data;\\n        token.rarity = hybrid.rarity;\\n        token.rarity.yield = hybrid.yield; // Hybrid rarity overrides default\\n        token.bidShares = hybrid.bidShares;\\n        token.timestamp = block.timestamp;\\n        token.birthday = block.number;\\n        token.parents = parents;\\n        return token;\\n    }\\n\\n    // Helper to construct IMarket.BidShares struct\\n    function getBidShares() private pure returns (IMarket.BidShares memory) {\\n        return IMarket.BidShares({\\n            creator: Decimal.D256(10),\\n            owner: Decimal.D256(80),\\n            prevOwner: Decimal.D256(10)\\n        });\\n    }\\n\\n    // Helper to construct IMedia.MediaData struct\\n    function getMediaData(string memory tokenURI, string memory metadataURI) private pure returns (IMedia.MediaData memory) {\\n        return IMedia.MediaData({\\n            tokenURI: tokenURI,\\n            metadataURI: metadataURI,\\n            contentHash: bytes32(0),\\n            metadataHash: bytes32(0)\\n        });\\n    }\\n\\n    // Get key for two parents\\n    function parentsKey(string memory animalA, string memory animalB) private pure returns (string memory) {\\n        return string(abi.encodePacked(animalA, animalB));\\n    }\\n\\n    // Get Hybrid from Parents\\n    function parentsToHybrid(string memory nameA, string memory nameB) private view returns (Hybrid memory) {\\n        return hybridParents[parentsKey(nameA, nameB)];\\n    }\\n\\n    // Return the higher of two rarities\\n    function higher(IZoo.Rarity memory rarityA, IZoo.Rarity memory rarityB) private pure returns (IZoo.Rarity memory) {\\n        if (rarityA.probability < rarityB.probability) {\\n            return rarityA;\\n        }\\n        return rarityB;\\n    }\\n}\\n\",\"keccak256\":\"0x552d03e02a032b373d6ba46ab9cab86389df2fb418364fb55f8c2b874c02124e\",\"license\":\"MIT\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(\\n                gas(),\\n                consoleAddress,\\n                payloadStart,\\n                payloadLength,\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1df9703e731ddd2da1d569a490493a94d690d0a3586116f3ecbba545c3e9e8b1\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from \\\"../Decimal.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n\\n    struct Bid {\\n        // Amount of the currency being bid\\n        uint256 amount;\\n        // Address to the ERC20 token being used to bid\\n        address currency;\\n        // Address of the bidder\\n        address bidder;\\n        // Address of the recipient\\n        address recipient;\\n        // % of the next sale to award the current owner\\n        Decimal.D256 sellOnShare;\\n    }\\n\\n    struct Ask {\\n        // Amount of the currency being asked\\n        uint256 amount;\\n        // Address to the ERC20 token being asked\\n        address currency;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal.D256 prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal.D256 creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal.D256 owner;\\n    }\\n\\n    event BidCreated(uint256 indexed tokenID, Bid bid);\\n    event BidRemoved(uint256 indexed tokenID, Bid bid);\\n    event BidFinalized(uint256 indexed tokenID, Bid bid);\\n    event AskCreated(uint256 indexed tokenID, Ask ask);\\n    event AskRemoved(uint256 indexed tokenID, Ask ask);\\n    event BidShareUpdated(uint256 indexed tokenID, BidShares bidShares);\\n\\n    function bidForTokenBidder(uint256 tokenID, address bidder)\\n        external\\n        view\\n        returns (Bid memory);\\n\\n    function currentAskForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (Ask memory);\\n\\n    function bidSharesForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (BidShares memory);\\n\\n    function isValidBid(uint256 tokenID, uint256 bidAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isValidBidShares(BidShares calldata bidShares)\\n        external\\n        pure\\n        returns (bool);\\n\\n    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function setBidShares(uint256 tokenID, BidShares calldata bidShares)\\n        external;\\n\\n    function setAsk(uint256 tokenID, Ask calldata ask) external;\\n\\n    function removeAsk(uint256 tokenID) external;\\n\\n    function setBid(\\n        uint256 tokenID,\\n        Bid calldata bid,\\n        address spender\\n    ) external;\\n\\n    function removeBid(uint256 tokenID, address bidder) external;\\n\\n    function acceptBid(uint256 tokenID, Bid calldata expectedBid) external;\\n}\\n\",\"keccak256\":\"0xb9ae2b808f01fb70d6eb41b223faf9c0d64d4a2f17826dbddba01b9125398c71\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia {\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct MediaData {\\n        // A valid URI of the content represented by this token\\n        string tokenURI;\\n        // A valid URI of the metadata associated with this token\\n        string metadataURI;\\n        // A SHA256 hash of the content pointed to by tokenURI\\n        bytes32 contentHash;\\n        // A SHA256 hash of the content pointed to by metadataURI\\n        bytes32 metadataHash;\\n    }\\n\\n    event TokenURIUpdated(uint256 indexed _tokenID, address owner, string _uri);\\n    event TokenMetadataURIUpdated(\\n        uint256 indexed _tokenID,\\n        address owner,\\n        string _uri\\n    );\\n\\n    /**\\n     * @notice Return the metadata URI for a piece of media given the token URI\\n     */\\n    function tokenMetadataURI(uint256 tokenID)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Mint new media for msg.sender.\\n     */\\n    function mint(MediaData calldata data, IMarket.BidShares calldata bidShares)\\n        external;\\n\\n    /**\\n     * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n     */\\n    function mintWithSig(\\n        address creator,\\n        MediaData calldata data,\\n        IMarket.BidShares calldata bidShares,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Transfer the token with the given ID to a given address.\\n     * Save the previous owner before the transfer, in case there is a sell-on fee.\\n     * @dev This can only be called by the auction contract specified at deployment\\n     */\\n    function auctionTransfer(uint256 tokenID, address recipient) external;\\n\\n    /**\\n     * @notice Set the ask on a piece of media\\n     */\\n    function setAsk(uint256 tokenID, IMarket.Ask calldata ask) external;\\n\\n    /**\\n     * @notice Remove the ask on a piece of media\\n     */\\n    function removeAsk(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Set the bid on a piece of media\\n     */\\n    function setBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Remove the bid on a piece of media\\n     */\\n    function removeBid(uint256 tokenID) external;\\n\\n    function acceptBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Revoke approval for a piece of media\\n     */\\n    function revokeApproval(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Update the token URI\\n     */\\n    function updateTokenURI(uint256 tokenID, string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Update the token metadata uri\\n     */\\n    function updateTokenMetadataURI(\\n        uint256 tokenID,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    // Added for Zoo\\n    function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n    function burnToken(address owner, uint256 tokenID) external;\\n    function tokenExists(uint256 tokenID) external returns (bool);\\n}\\n\",\"keccak256\":\"0x382dc461b14d9b3b5bd03e31932a9dbe7447767a804a18c42cfe690c4854ca79\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yield;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;          // originating egg\\n        uint256 dropID;         // originating drop\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;             // unique ID\\n        uint256 timestamp;      // time created\\n        uint256 birthday;       // birth block\\n        string  customName;     // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0xe7d21793430e0e702d72166ba0939eb8b996575bf7bf4b56277f47f721156bfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6762,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "title",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6764,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "baseEgg",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6766,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybridEgg",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6768,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "keeperAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6773,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "rarities",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Rarity)20055_storage)"
      },
      {
        "astId": 6778,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "rarityAnimals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 6781,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "raritySorted",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6786,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "eggs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Egg)6724_storage)"
      },
      {
        "astId": 6791,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "animals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Animal)6739_storage)"
      },
      {
        "astId": 6796,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybrids",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6760_storage)"
      },
      {
        "astId": 6801,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybridParents",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6760_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Type)20046": {
        "encoding": "inplace",
        "label": "enum IZoo.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Animal)6739_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Animal)",
        "numberOfBytes": "32",
        "value": "t_struct(Animal)6739_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Egg)6724_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Egg)",
        "numberOfBytes": "32",
        "value": "t_struct(Egg)6724_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6760_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Hybrid)",
        "numberOfBytes": "32",
        "value": "t_struct(Hybrid)6760_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Rarity)20055_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IZoo.Rarity)",
        "numberOfBytes": "32",
        "value": "t_struct(Rarity)20055_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Animal)6739_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Animal",
        "members": [
          {
            "astId": 6727,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)20046"
          },
          {
            "astId": 6730,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "rarity",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rarity)20055_storage"
          },
          {
            "astId": 6732,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 6735,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(MediaData)19881_storage"
          },
          {
            "astId": 6738,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(BidShares)19713_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(BidShares)19713_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.BidShares",
        "members": [
          {
            "astId": 19706,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "prevOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(D256)4192_storage"
          },
          {
            "astId": 19709,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(D256)4192_storage"
          },
          {
            "astId": 19712,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(D256)4192_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(D256)4192_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.D256",
        "members": [
          {
            "astId": 4191,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Egg)6724_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Egg",
        "members": [
          {
            "astId": 6705,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)20046"
          },
          {
            "astId": 6707,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6709,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "supply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6711,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6713,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6715,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "birthday",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6717,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "minted",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6720,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(MediaData)19881_storage"
          },
          {
            "astId": 6723,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(BidShares)19713_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Hybrid)6760_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Hybrid",
        "members": [
          {
            "astId": 6742,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)20046"
          },
          {
            "astId": 6745,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "rarity",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rarity)20055_storage"
          },
          {
            "astId": 6747,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 6749,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "yield",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6751,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "parentA",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 6753,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "parentB",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 6756,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(MediaData)19881_storage"
          },
          {
            "astId": 6759,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(BidShares)19713_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(MediaData)19881_storage": {
        "encoding": "inplace",
        "label": "struct IMedia.MediaData",
        "members": [
          {
            "astId": 19874,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "tokenURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19876,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 19878,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 19880,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "metadataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rarity)20055_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Rarity",
        "members": [
          {
            "astId": 20048,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 20050,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "probability",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20052,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "yield",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20054,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "boost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}