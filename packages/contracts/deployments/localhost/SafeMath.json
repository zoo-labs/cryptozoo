{
  "address": "0x1D8A3bF24Fe919c90Af60fd1c722BB69B85a562e",
  "abi": [],
  "transactionHash": "0x87729422de7b477a58083ae5797a70239b974847f9c21609592d68b66739c97a",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x1D8A3bF24Fe919c90Af60fd1c722BB69B85a562e",
    "transactionIndex": 0,
    "gasUsed": "71933",
    "logsBloom": "0x
    "blockHash": "0x9ae7f1562c0b55a44a3b23cce870a9e53e361ef8c433d31f72d77562059b1f1d",
    "transactionHash": "0x87729422de7b477a58083ae5797a70239b974847f9c21609592d68b66739c97a",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "71933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "83eb26c8b70c9d872f06943a4772a560",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/uniswapv2/libraries/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xa93023aac1c9ddc7f0044c4e163f1a8d30eac4b229ea7861045dd35c85f3dc9e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6e9863b66f19c0c5c3395c27b6fd6987cbeb8d389f0f839ec98a24e9129947a64736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6e9863b66f19c0c5c3395c27b6fd6987cbeb8d389f0f839ec98a24e9129947a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}