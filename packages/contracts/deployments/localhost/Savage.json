{
  "address": "0x1D8A3bF24Fe919c90Af60fd1c722BB69B85a562e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "z",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "m",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x68558856578af1a52763a50faf37bf7ee43fbd48ccc2038b0eeeea2f922c8b01",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x1D8A3bF24Fe919c90Af60fd1c722BB69B85a562e",
    "transactionIndex": 0,
    "gasUsed": "551588",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5f9e3c5b9b9747b288b361160fabc36cf33b830ec834e5e992e47f4cf4dba30f",
    "transactionHash": "0x68558856578af1a52763a50faf37bf7ee43fbd48ccc2038b0eeeea2f922c8b01",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "551588",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
    "0x8e7788ee2b1d3e5451e182035d6b2b566c2fe997",
    "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
    "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    100000000000,
    90000000000
  ],
  "solcInputHash": "2b5d52734284a176ffb9682aaf2f708d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Savage.sol\":\"Savage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"src/Savage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\nimport { IERC20Uniswap } from \\\"./uniswapv2/interfaces/IERC20.sol\\\";\\n\\ncontract Savage {\\n    IERC20Uniswap B; // token 1\\n    IERC20Uniswap Z; // token 2\\n    address PF;      // factory\\n    address PR;      // router\\n    uint256 A;       // amount\\n    uint256 M;       // min amount out\\n\\n    // Setup swap\\n    constructor(address b, address z, address pf, address pr, uint256 a, uint256 m) {\\n        B = IERC20Uniswap(b);\\n        Z = IERC20Uniswap(z);\\n        PF = address(pf);\\n        PR = address(pr);\\n        A = a;\\n        M = m;\\n    }\\n\\n    // Execute swap\\n    function swap() public {\\n        uint amountIn = A * 10 ** Z.decimals();\\n\\n        require(Z.transferFrom(msg.sender, address(this), amountIn), 'transferFrom failed');\\n        require(Z.approve(address(PR), amountIn), 'approve failed');\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(Z);\\n        path[1] = address(B);\\n\\n        // function swapExactTokensForTokens()\\n        IUniswapV2Router01(PR).swapExactTokensForETH(amountIn, M, path, msg.sender, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x524a3f38e19d794179b0c1f71200bbc5f9c3aab8dcab74055d29f5cd05021e91\",\"license\":\"MIT\"},\"src/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x76866491759a6f069ddc030d52df08d4105a8bcef0e3330dee261cf7ee049b1a\",\"license\":\"GPL-3.0\"},\"src/uniswapv2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xcaec675e6250bf4cd3364459a0cbf789262af2aaa377d61d4d463f657aea7b50\",\"license\":\"GPL-3.0\"},\"src/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161079b38038061079b83398101604081905261002f916100a7565b600080546001600160a01b039788166001600160a01b031991821617909155600180549688169682169690961790955560028054948716948616949094179093556003805492909516919093161790925560045560055561010c565b80516001600160a01b03811681146100a257600080fd5b919050565b60008060008060008060c087890312156100bf578182fd5b6100c88761008b565b95506100d66020880161008b565b94506100e46040880161008b565b93506100f26060880161008b565b92506080870151915060a087015190509295509295509295565b6106808061011b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638119c06514610030575b600080fd5b61003861003a565b005b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561007f57600080fd5b505afa158015610093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b7919061047e565b6100c290600a610552565b6004546100cf91906105ff565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561012257600080fd5b505af1158015610136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015a9190610457565b6101a15760405162461bcd60e51b81526020600482015260136024820152721d1c985b9cd9995c919c9bdb4819985a5b1959606a1b60448201526064015b60405180910390fd5b60015460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156101f157600080fd5b505af1158015610205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102299190610457565b6102665760405162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd994819985a5b195960921b6044820152606401610198565b604080516002808252606082018352600092602083019080368337505060015482519293506001600160a01b0316918391506000906102b557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526000548251911690829060019081106102f457634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526003546005546040516318cbafe560e01b815291909216916318cbafe59161033c91869186903390429060040161049f565b600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103929190810190610397565b505050565b600060208083850312156103a9578182fd5b825167ffffffffffffffff808211156103c0578384fd5b818501915085601f8301126103d3578384fd5b8151818111156103e5576103e5610634565b8060051b604051601f19603f8301168101818110858211171561040a5761040a610634565b604052828152858101935084860182860187018a1015610428578788fd5b8795505b8386101561044a57805185526001959095019493860193860161042c565b5098975050505050505050565b600060208284031215610468578081fd5b81518015158114610477578182fd5b9392505050565b60006020828403121561048f578081fd5b815160ff81168114610477578182fd5b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156104ee5784516001600160a01b0316835293830193918301916001016104c9565b50506001600160a01b03969096166060850152505050608001529392505050565b600181815b8085111561054a5781600019048211156105305761053061061e565b8085161561053d57918102915b93841c9390800290610514565b509250929050565b600061047760ff84168360008261056b575060016105f9565b81610578575060006105f9565b816001811461058e5760028114610598576105b4565b60019150506105f9565b60ff8411156105a9576105a961061e565b50506001821b6105f9565b5060208310610133831016604e8410600b84101617156105d7575081810a6105f9565b6105e1838361050f565b80600019048211156105f5576105f561061e565b0290505b92915050565b60008160001904831182151516156106195761061961061e565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c79b5a1c708173f9ebe7b6f155a7db2dbf430219a272732b265959c704a2173b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638119c06514610030575b600080fd5b61003861003a565b005b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561007f57600080fd5b505afa158015610093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b7919061047e565b6100c290600a610552565b6004546100cf91906105ff565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561012257600080fd5b505af1158015610136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015a9190610457565b6101a15760405162461bcd60e51b81526020600482015260136024820152721d1c985b9cd9995c919c9bdb4819985a5b1959606a1b60448201526064015b60405180910390fd5b60015460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156101f157600080fd5b505af1158015610205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102299190610457565b6102665760405162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd994819985a5b195960921b6044820152606401610198565b604080516002808252606082018352600092602083019080368337505060015482519293506001600160a01b0316918391506000906102b557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526000548251911690829060019081106102f457634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526003546005546040516318cbafe560e01b815291909216916318cbafe59161033c91869186903390429060040161049f565b600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103929190810190610397565b505050565b600060208083850312156103a9578182fd5b825167ffffffffffffffff808211156103c0578384fd5b818501915085601f8301126103d3578384fd5b8151818111156103e5576103e5610634565b8060051b604051601f19603f8301168101818110858211171561040a5761040a610634565b604052828152858101935084860182860187018a1015610428578788fd5b8795505b8386101561044a57805185526001959095019493860193860161042c565b5098975050505050505050565b600060208284031215610468578081fd5b81518015158114610477578182fd5b9392505050565b60006020828403121561048f578081fd5b815160ff81168114610477578182fd5b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156104ee5784516001600160a01b0316835293830193918301916001016104c9565b50506001600160a01b03969096166060850152505050608001529392505050565b600181815b8085111561054a5781600019048211156105305761053061061e565b8085161561053d57918102915b93841c9390800290610514565b509250929050565b600061047760ff84168360008261056b575060016105f9565b81610578575060006105f9565b816001811461058e5760028114610598576105b4565b60019150506105f9565b60ff8411156105a9576105a961061e565b50506001821b6105f9565b5060208310610133831016604e8410600b84101617156105d7575081810a6105f9565b6105e1838361050f565b80600019048211156105f5576105f561061e565b0290505b92915050565b60008160001904831182151516156106195761061961061e565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c79b5a1c708173f9ebe7b6f155a7db2dbf430219a272732b265959c704a2173b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9,
        "contract": "src/Savage.sol:Savage",
        "label": "B",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20Uniswap)237"
      },
      {
        "astId": 12,
        "contract": "src/Savage.sol:Savage",
        "label": "Z",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Uniswap)237"
      },
      {
        "astId": 14,
        "contract": "src/Savage.sol:Savage",
        "label": "PF",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16,
        "contract": "src/Savage.sol:Savage",
        "label": "PR",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "src/Savage.sol:Savage",
        "label": "A",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "src/Savage.sol:Savage",
        "label": "M",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Uniswap)237": {
        "encoding": "inplace",
        "label": "contract IERC20Uniswap",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}