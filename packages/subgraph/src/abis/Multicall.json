{
  "address": "0x9D3055C28844eB83eb75aC8A9638a8d2E5eF61C9",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa76b98bab399e07dd9938ba5aa216f9e0e272a6c57851382f26ff6e7ba084094",
  "receipt": {
    "to": null,
    "from": "0x459De3c6FeE2700707DD3563824c2258D89C9660",
    "contractAddress": "0x9D3055C28844eB83eb75aC8A9638a8d2E5eF61C9",
    "transactionIndex": 210,
    "gasUsed": "386549",
    "logsBloom": "0x
    "blockHash": "0xdd1b505c18c556a63f626e832f9e0cd75740fbf6b19494ee4811dd23c4e51834",
    "transactionHash": "0xa76b98bab399e07dd9938ba5aa216f9e0e272a6c57851382f26ff6e7ba084094",
    "logs": [],
    "blockNumber": 13596915,
    "cumulativeGasUsed": "20200422",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a57ebe8bfba90c8450b490d5d009a6f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multicall/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"src/multicall/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall {\\n  struct Call {\\n    address target;\\n    bytes callData;\\n  }\\n\\n  function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n    blockNumber = block.number;\\n    returnData = new bytes[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n      require(success);\\n      returnData[i] = ret;\\n    }\\n  }\\n\\n  // Helper functions\\n  function getEthBalance(address addr) public view returns (uint256 balance) {\\n    balance = addr.balance;\\n  }\\n\\n  function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n    blockHash = blockhash(blockNumber);\\n  }\\n\\n  function getLastBlockHash() public view returns (bytes32 blockHash) {\\n    blockHash = blockhash(block.number - 1);\\n  }\\n\\n  function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n    timestamp = block.timestamp;\\n  }\\n\\n  function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n    difficulty = block.difficulty;\\n  }\\n\\n  function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n    gaslimit = block.gaslimit;\\n  }\\n\\n  function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n    coinbase = block.coinbase;\\n  }\\n}\\n\",\"keccak256\":\"0x7c83c332dd14011e0e4921157fa9e7896ff779ff63f29d6fbd45833631853d90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610608806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80630f28c97d1461007d578063252dba421461009257806327e86d6e146100b35780634d2301cc146100bb57806372425d9d146100d657806386d516e8146100dc578063a8b0574e146100e2578063ee82ac5e146100f0575b600080fd5b425b6040519081526020015b60405180910390f35b6100a56100a0366004610376565b610102565b60405161008992919061046b565b61007f610279565b61007f6100c9366004610355565b6001600160a01b03163190565b4461007f565b4561007f565b604051418152602001610089565b61007f6100fe366004610437565b4090565b805143906060906001600160401b0381111561012e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561016157816020015b606081526020019060019003908161014c5790505b50905060005b83518110156102735760008085838151811061019357634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03168684815181106101c857634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516101e1919061044f565b6000604051808303816000865af19150503d806000811461021e576040519150601f19603f3d011682016040523d82523d6000602084013e610223565b606091505b50915091508161023257600080fd5b8084848151811061025357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061026b9061058b565b915050610167565b50915091565b6000610286600143610544565b40905090565b80356001600160a01b03811681146102a357600080fd5b919050565b6000604082840312156102b9578081fd5b6102c16104ec565b90506102cc8261028c565b81526020808301356001600160401b03808211156102e957600080fd5b818501915085601f8301126102fd57600080fd5b81358181111561030f5761030f6105bc565b610321601f8201601f19168501610514565b9150808252868482850101111561033757600080fd5b80848401858401376000908201840152918301919091525092915050565b600060208284031215610366578081fd5b61036f8261028c565b9392505050565b60006020808385031215610388578182fd5b82356001600160401b038082111561039e578384fd5b818501915085601f8301126103b1578384fd5b8135818111156103c3576103c36105bc565b8060051b6103d2858201610514565b8281528581019085870183870188018b10156103ec578889fd5b8893505b848410156104295780358681111561040657898afd5b6104148c8a838b01016102a8565b845250600193909301929187019187016103f0565b509998505050505050505050565b600060208284031215610448578081fd5b5035919050565b6000825161046181846020870161055b565b9190910192915050565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b828110156104de57878603605f19018452815180518088526104bf81888a0189850161055b565b601f01601f191696909601850195509284019290840190600101610498565b509398975050505050505050565b604080519081016001600160401b038111828210171561050e5761050e6105bc565b60405290565b604051601f8201601f191681016001600160401b038111828210171561053c5761053c6105bc565b604052919050565b600082821015610556576105566105a6565b500390565b60005b8381101561057657818101518382015260200161055e565b83811115610585576000848401525b50505050565b600060001982141561059f5761059f6105a6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220eaa9b864c5d1685335ce9dbdb9cced67d1837f36ae759a68955758fefe15549664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80630f28c97d1461007d578063252dba421461009257806327e86d6e146100b35780634d2301cc146100bb57806372425d9d146100d657806386d516e8146100dc578063a8b0574e146100e2578063ee82ac5e146100f0575b600080fd5b425b6040519081526020015b60405180910390f35b6100a56100a0366004610376565b610102565b60405161008992919061046b565b61007f610279565b61007f6100c9366004610355565b6001600160a01b03163190565b4461007f565b4561007f565b604051418152602001610089565b61007f6100fe366004610437565b4090565b805143906060906001600160401b0381111561012e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561016157816020015b606081526020019060019003908161014c5790505b50905060005b83518110156102735760008085838151811061019357634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03168684815181106101c857634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516101e1919061044f565b6000604051808303816000865af19150503d806000811461021e576040519150601f19603f3d011682016040523d82523d6000602084013e610223565b606091505b50915091508161023257600080fd5b8084848151811061025357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061026b9061058b565b915050610167565b50915091565b6000610286600143610544565b40905090565b80356001600160a01b03811681146102a357600080fd5b919050565b6000604082840312156102b9578081fd5b6102c16104ec565b90506102cc8261028c565b81526020808301356001600160401b03808211156102e957600080fd5b818501915085601f8301126102fd57600080fd5b81358181111561030f5761030f6105bc565b610321601f8201601f19168501610514565b9150808252868482850101111561033757600080fd5b80848401858401376000908201840152918301919091525092915050565b600060208284031215610366578081fd5b61036f8261028c565b9392505050565b60006020808385031215610388578182fd5b82356001600160401b038082111561039e578384fd5b818501915085601f8301126103b1578384fd5b8135818111156103c3576103c36105bc565b8060051b6103d2858201610514565b8281528581019085870183870188018b10156103ec578889fd5b8893505b848410156104295780358681111561040657898afd5b6104148c8a838b01016102a8565b845250600193909301929187019187016103f0565b509998505050505050505050565b600060208284031215610448578081fd5b5035919050565b6000825161046181846020870161055b565b9190910192915050565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b828110156104de57878603605f19018452815180518088526104bf81888a0189850161055b565b601f01601f191696909601850195509284019290840190600101610498565b509398975050505050505050565b604080519081016001600160401b038111828210171561050e5761050e6105bc565b60405290565b604051601f8201601f191681016001600160401b038111828210171561053c5761053c6105bc565b604052919050565b600082821015610556576105566105a6565b500390565b60005b8381101561057657818101518382015260200161055e565b83811115610585576000848401525b50505050565b600060001982141561059f5761059f6105a6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220eaa9b864c5d1685335ce9dbdb9cced67d1837f36ae759a68955758fefe15549664736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}