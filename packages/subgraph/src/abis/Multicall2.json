{
  "address": "0xf26cD5d9a7248e51Ef95e181354DaC19641E8469",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa49333e64dd1c8678d7373d6d27d91ae63a92f65aa6c102f44bea24ead47f98d",
  "receipt": {
    "to": null,
    "from": "0x459De3c6FeE2700707DD3563824c2258D89C9660",
    "contractAddress": "0xf26cD5d9a7248e51Ef95e181354DaC19641E8469",
    "transactionIndex": 220,
    "gasUsed": "613292",
    "logsBloom": "0x
    "blockHash": "0xe3f8b2776a5618df69960ec79bdc3369f90957f88bc3a0fcb6b31dbd5c65ca54",
    "transactionHash": "0xa49333e64dd1c8678d7373d6d27d91ae63a92f65aa6c102f44bea24ead47f98d",
    "logs": [],
    "blockNumber": 13597118,
    "cumulativeGasUsed": "14676518",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "abb3f2031fa433426913a5b8933dd0cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multicall/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"src/multicall/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n  struct Call {\\n    address target;\\n    bytes callData;\\n  }\\n  struct Result {\\n    bool success;\\n    bytes returnData;\\n  }\\n\\n  function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n    blockNumber = block.number;\\n    returnData = new bytes[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n      require(success, 'Multicall aggregate: call failed');\\n      returnData[i] = ret;\\n    }\\n  }\\n\\n  function blockAndAggregate(Call[] memory calls)\\n    public\\n    returns (\\n      uint256 blockNumber,\\n      bytes32 blockHash,\\n      Result[] memory returnData\\n    )\\n  {\\n    (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n  }\\n\\n  function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n    blockHash = blockhash(blockNumber);\\n  }\\n\\n  function getBlockNumber() public view returns (uint256 blockNumber) {\\n    blockNumber = block.number;\\n  }\\n\\n  function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n    coinbase = block.coinbase;\\n  }\\n\\n  function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n    difficulty = block.difficulty;\\n  }\\n\\n  function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n    gaslimit = block.gaslimit;\\n  }\\n\\n  function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n    timestamp = block.timestamp;\\n  }\\n\\n  function getEthBalance(address addr) public view returns (uint256 balance) {\\n    balance = addr.balance;\\n  }\\n\\n  function getLastBlockHash() public view returns (bytes32 blockHash) {\\n    blockHash = blockhash(block.number - 1);\\n  }\\n\\n  function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n    returnData = new Result[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n      if (requireSuccess) {\\n        require(success, 'Multicall2 aggregate: call failed');\\n      }\\n\\n      returnData[i] = Result(success, ret);\\n    }\\n  }\\n\\n  function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls)\\n    public\\n    returns (\\n      uint256 blockNumber,\\n      bytes32 blockHash,\\n      Result[] memory returnData\\n    )\\n  {\\n    blockNumber = block.number;\\n    blockHash = blockhash(block.number);\\n    returnData = tryAggregate(requireSuccess, calls);\\n  }\\n}\\n\",\"keccak256\":\"0x9617988d4f52b08ec9b5b9e6d78306f51ea8e4eaf67a65031f084ca42539db0d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a22806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c80630f28c97d146100a9578063252dba42146100be57806327e86d6e146100df578063399542e9146100e757806342cbb15c146101095780634d2301cc1461010f57806372425d9d1461012a57806386d516e814610130578063a8b0574e14610136578063bce38bd714610144578063c3077fa914610164578063ee82ac5e14610177575b600080fd5b425b6040519081526020015b60405180910390f35b6100d16100cc36600461070a565b610189565b6040516100b5929190610875565b6100ab610348565b6100fa6100f5366004610744565b61035b565b6040516100b5939291906108de565b436100ab565b6100ab61011d3660046106e9565b6001600160a01b03163190565b446100ab565b456100ab565b6040514181526020016100b5565b610157610152366004610744565b610373565b6040516100b59190610862565b6100fa61017236600461070a565b610564565b6100ab610185366004610795565b4090565b805143906060906001600160401b038111156101b557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156103425760008085838151811061021a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031686848151811061024f57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516102689190610846565b6000604051808303816000865af19150503d80600081146102a5576040519150601f19603f3d011682016040523d82523d6000602084013e6102aa565b606091505b5091509150816103015760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061032257634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061033a906109a5565b9150506101ee565b50915091565b600061035560014361095e565b40905090565b438040606061036a8585610373565b90509250925092565b606081516001600160401b0381111561039c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103e257816020015b6040805180820190915260008152606060208201528152602001906001900390816103ba5790505b50905060005b825181101561055d5760008084838151811061041457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031685848151811061044957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516104629190610846565b6000604051808303816000865af19150503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b5091509150851561050657816105065760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102f8565b604051806040016040528083151581526020018281525084848151811061053d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080610555906109a5565b9150506103e8565b5092915050565b600080606061057460018561035b565b9196909550909350915050565b80356001600160a01b038116811461059857600080fd5b919050565b600082601f8301126105ad578081fd5b813560206001600160401b03808311156105c9576105c96109d6565b8260051b6105d883820161092e565b8481528381019087850183890186018a10156105f2578788fd5b8793505b8684101561062f5780358581111561060c578889fd5b61061a8b88838d010161063c565b845250600193909301929185019185016105f6565b5098975050505050505050565b60006040828403121561064d578081fd5b610655610906565b905061066082610581565b81526020808301356001600160401b038082111561067d57600080fd5b818501915085601f83011261069157600080fd5b8135818111156106a3576106a36109d6565b6106b5601f8201601f1916850161092e565b915080825286848285010111156106cb57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000602082840312156106fa578081fd5b61070382610581565b9392505050565b60006020828403121561071b578081fd5b81356001600160401b03811115610730578182fd5b61073c8482850161059d565b949350505050565b60008060408385031215610756578081fd5b82358015158114610765578182fd5b915060208301356001600160401b0381111561077f578182fd5b61078b8582860161059d565b9150509250929050565b6000602082840312156107a6578081fd5b5035919050565b600082825180855260208086019550808260051b840101818601855b8481101561080d57858303601f19018952815180511515845284015160408585018190526107f98186018361081a565b9a86019a94505050908301906001016107c9565b5090979650505050505050565b60008151808452610832816020860160208601610975565b601f01601f19169290920160200192915050565b60008251610858818460208701610975565b9190910192915050565b60208152600061070360208301846107ad565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b828110156108d057605f198887030184526108be86835161081a565b955092840192908401906001016108a2565b509398975050505050505050565b8381528260208201526060604082015260006108fd60608301846107ad565b95945050505050565b604080519081016001600160401b0381118282101715610928576109286109d6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610956576109566109d6565b604052919050565b600082821015610970576109706109c0565b500390565b60005b83811015610990578181015183820152602001610978565b8381111561099f576000848401525b50505050565b60006000198214156109b9576109b96109c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206b5c3c37bb1d6662d8b8118806c0ffa416799d7b0d768cb952397162d268edc664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a45760003560e01c80630f28c97d146100a9578063252dba42146100be57806327e86d6e146100df578063399542e9146100e757806342cbb15c146101095780634d2301cc1461010f57806372425d9d1461012a57806386d516e814610130578063a8b0574e14610136578063bce38bd714610144578063c3077fa914610164578063ee82ac5e14610177575b600080fd5b425b6040519081526020015b60405180910390f35b6100d16100cc36600461070a565b610189565b6040516100b5929190610875565b6100ab610348565b6100fa6100f5366004610744565b61035b565b6040516100b5939291906108de565b436100ab565b6100ab61011d3660046106e9565b6001600160a01b03163190565b446100ab565b456100ab565b6040514181526020016100b5565b610157610152366004610744565b610373565b6040516100b59190610862565b6100fa61017236600461070a565b610564565b6100ab610185366004610795565b4090565b805143906060906001600160401b038111156101b557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156103425760008085838151811061021a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031686848151811061024f57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516102689190610846565b6000604051808303816000865af19150503d80600081146102a5576040519150601f19603f3d011682016040523d82523d6000602084013e6102aa565b606091505b5091509150816103015760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061032257634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061033a906109a5565b9150506101ee565b50915091565b600061035560014361095e565b40905090565b438040606061036a8585610373565b90509250925092565b606081516001600160401b0381111561039c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103e257816020015b6040805180820190915260008152606060208201528152602001906001900390816103ba5790505b50905060005b825181101561055d5760008084838151811061041457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031685848151811061044957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516104629190610846565b6000604051808303816000865af19150503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b5091509150851561050657816105065760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102f8565b604051806040016040528083151581526020018281525084848151811061053d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080610555906109a5565b9150506103e8565b5092915050565b600080606061057460018561035b565b9196909550909350915050565b80356001600160a01b038116811461059857600080fd5b919050565b600082601f8301126105ad578081fd5b813560206001600160401b03808311156105c9576105c96109d6565b8260051b6105d883820161092e565b8481528381019087850183890186018a10156105f2578788fd5b8793505b8684101561062f5780358581111561060c578889fd5b61061a8b88838d010161063c565b845250600193909301929185019185016105f6565b5098975050505050505050565b60006040828403121561064d578081fd5b610655610906565b905061066082610581565b81526020808301356001600160401b038082111561067d57600080fd5b818501915085601f83011261069157600080fd5b8135818111156106a3576106a36109d6565b6106b5601f8201601f1916850161092e565b915080825286848285010111156106cb57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000602082840312156106fa578081fd5b61070382610581565b9392505050565b60006020828403121561071b578081fd5b81356001600160401b03811115610730578182fd5b61073c8482850161059d565b949350505050565b60008060408385031215610756578081fd5b82358015158114610765578182fd5b915060208301356001600160401b0381111561077f578182fd5b61078b8582860161059d565b9150509250929050565b6000602082840312156107a6578081fd5b5035919050565b600082825180855260208086019550808260051b840101818601855b8481101561080d57858303601f19018952815180511515845284015160408585018190526107f98186018361081a565b9a86019a94505050908301906001016107c9565b5090979650505050505050565b60008151808452610832816020860160208601610975565b601f01601f19169290920160200192915050565b60008251610858818460208701610975565b9190910192915050565b60208152600061070360208301846107ad565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b828110156108d057605f198887030184526108be86835161081a565b955092840192908401906001016108a2565b509398975050505050505050565b8381528260208201526060604082015260006108fd60608301846107ad565b95945050505050565b604080519081016001600160401b0381118282101715610928576109286109d6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610956576109566109d6565b604052919050565b600082821015610970576109706109c0565b500390565b60005b83811015610990578181015183820152602001610978565b8381111561099f576000848401525b50505050565b60006000198214156109b9576109b96109c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206b5c3c37bb1d6662d8b8118806c0ffa416799d7b0d768cb952397162d268edc664736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}