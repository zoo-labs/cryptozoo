// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Adddrop extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("DropAddress", Value.fromString(""));
    this.set("Title", Value.fromString(""));
    this.set("Eggsupply", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Adddrop entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Adddrop entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Adddrop", id.toString(), this);
    }
  }

  static load(id: string): Adddrop | null {
    return changetype<Adddrop | null>(store.get("Adddrop", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get DropAddress(): string {
    let value = this.get("DropAddress");
    return value!.toString();
  }

  set DropAddress(value: string) {
    this.set("DropAddress", Value.fromString(value));
  }

  get Title(): string {
    let value = this.get("Title");
    return value!.toString();
  }

  set Title(value: string) {
    this.set("Title", Value.fromString(value));
  }

  get Eggsupply(): BigInt {
    let value = this.get("Eggsupply");
    return value!.toBigInt();
  }

  set Eggsupply(value: BigInt) {
    this.set("Eggsupply", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class breed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("ParentA", Value.fromBigInt(BigInt.zero()));
    this.set("ParentB", Value.fromBigInt(BigInt.zero()));
    this.set("eggId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save breed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save breed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("breed", id.toString(), this);
    }
  }

  static load(id: string): breed | null {
    return changetype<breed | null>(store.get("breed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get ParentA(): BigInt {
    let value = this.get("ParentA");
    return value!.toBigInt();
  }

  set ParentA(value: BigInt) {
    this.set("ParentA", Value.fromBigInt(value));
  }

  get ParentB(): BigInt {
    let value = this.get("ParentB");
    return value!.toBigInt();
  }

  set ParentB(value: BigInt) {
    this.set("ParentB", Value.fromBigInt(value));
  }

  get eggId(): BigInt {
    let value = this.get("eggId");
    return value!.toBigInt();
  }

  set eggId(value: BigInt) {
    this.set("eggId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("TokenId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save burn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("burn", id.toString(), this);
    }
  }

  static load(id: string): burn | null {
    return changetype<burn | null>(store.get("burn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get TokenId(): BigInt {
    let value = this.get("TokenId");
    return value!.toBigInt();
  }

  set TokenId(value: BigInt) {
    this.set("TokenId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class buyEgg extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("eggId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save buyEgg entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save buyEgg entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("buyEgg", id.toString(), this);
    }
  }

  static load(id: string): buyEgg | null {
    return changetype<buyEgg | null>(store.get("buyEgg", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get eggId(): BigInt {
    let value = this.get("eggId");
    return value!.toBigInt();
  }

  set eggId(value: BigInt) {
    this.set("eggId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class hatch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("eggId", Value.fromBigInt(BigInt.zero()));
    this.set("TokenId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save hatch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save hatch entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("hatch", id.toString(), this);
    }
  }

  static load(id: string): hatch | null {
    return changetype<hatch | null>(store.get("hatch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get eggId(): BigInt {
    let value = this.get("eggId");
    return value!.toBigInt();
  }

  set eggId(value: BigInt) {
    this.set("eggId", Value.fromBigInt(value));
  }

  get TokenId(): BigInt {
    let value = this.get("TokenId");
    return value!.toBigInt();
  }

  set TokenId(value: BigInt) {
    this.set("TokenId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("TokenId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save mint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("mint", id.toString(), this);
    }
  }

  static load(id: string): mint | null {
    return changetype<mint | null>(store.get("mint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get TokenId(): BigInt {
    let value = this.get("TokenId");
    return value!.toBigInt();
  }

  set TokenId(value: BigInt) {
    this.set("TokenId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Owner", Value.fromString(""));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("ChainId", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("swap", id.toString(), this);
    }
  }

  static load(id: string): swap | null {
    return changetype<swap | null>(store.get("swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ChainId(): BigInt {
    let value = this.get("ChainId");
    return value!.toBigInt();
  }

  set ChainId(value: BigInt) {
    this.set("ChainId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}
