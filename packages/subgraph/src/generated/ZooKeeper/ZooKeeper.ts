// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddDrop extends ethereum.Event {
  get params(): AddDrop__Params {
    return new AddDrop__Params(this);
  }
}

export class AddDrop__Params {
  _event: AddDrop;

  constructor(event: AddDrop) {
    this._event = event;
  }

  get dropAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }

  get eggSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Breed extends ethereum.Event {
  get params(): Breed__Params {
    return new Breed__Params(this);
  }
}

export class Breed__Params {
  _event: Breed;

  constructor(event: Breed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get parentA(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get parentB(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get eggID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BuyEgg extends ethereum.Event {
  get params(): BuyEgg__Params {
    return new BuyEgg__Params(this);
  }
}

export class BuyEgg__Params {
  _event: BuyEgg;

  constructor(event: BuyEgg) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eggID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Free extends ethereum.Event {
  get params(): Free__Params {
    return new Free__Params(this);
  }
}

export class Free__Params {
  _event: Free;

  constructor(event: Free) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get yield(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Hatch extends ethereum.Event {
  get params(): Hatch__Params {
    return new Hatch__Params(this);
  }
}

export class Hatch__Params {
  _event: Hatch;

  constructor(event: Hatch) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eggID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get chainID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ZooKeeper__tokensResultRarityStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get probability(): BigInt {
    return this[1].toBigInt();
  }

  get yield(): BigInt {
    return this[2].toBigInt();
  }

  get boost(): BigInt {
    return this[3].toBigInt();
  }
}

export class ZooKeeper__tokensResultParentsStruct extends ethereum.Tuple {
  get animalA(): string {
    return this[0].toString();
  }

  get animalB(): string {
    return this[1].toString();
  }

  get tokenA(): BigInt {
    return this[2].toBigInt();
  }

  get tokenB(): BigInt {
    return this[3].toBigInt();
  }
}

export class ZooKeeper__tokensResultBreedStruct extends ethereum.Tuple {
  get count(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class ZooKeeper__tokensResultMetaStruct extends ethereum.Tuple {
  get eggID(): BigInt {
    return this[0].toBigInt();
  }

  get dropID(): BigInt {
    return this[1].toBigInt();
  }

  get burned(): boolean {
    return this[2].toBoolean();
  }

  get swapped(): boolean {
    return this[3].toBoolean();
  }
}

export class ZooKeeper__tokensResultDataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class ZooKeeper__tokensResultBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): ZooKeeper__tokensResultBidSharesPrevOwnerStruct {
    return changetype<ZooKeeper__tokensResultBidSharesPrevOwnerStruct>(
      this[0].toTuple()
    );
  }

  get creator(): ZooKeeper__tokensResultBidSharesCreatorStruct {
    return changetype<ZooKeeper__tokensResultBidSharesCreatorStruct>(
      this[1].toTuple()
    );
  }

  get owner(): ZooKeeper__tokensResultBidSharesOwnerStruct {
    return changetype<ZooKeeper__tokensResultBidSharesOwnerStruct>(
      this[2].toTuple()
    );
  }
}

export class ZooKeeper__tokensResultBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ZooKeeper__tokensResultBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ZooKeeper__tokensResultBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ZooKeeper__tokensResult {
  value0: ZooKeeper__tokensResultRarityStruct;
  value1: i32;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: ZooKeeper__tokensResultParentsStruct;
  value8: ZooKeeper__tokensResultBreedStruct;
  value9: ZooKeeper__tokensResultMetaStruct;
  value10: ZooKeeper__tokensResultDataStruct;
  value11: ZooKeeper__tokensResultBidSharesStruct;

  constructor(
    value0: ZooKeeper__tokensResultRarityStruct,
    value1: i32,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: ZooKeeper__tokensResultParentsStruct,
    value8: ZooKeeper__tokensResultBreedStruct,
    value9: ZooKeeper__tokensResultMetaStruct,
    value10: ZooKeeper__tokensResultDataStruct,
    value11: ZooKeeper__tokensResultBidSharesStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromTuple(this.value7));
    map.set("value8", ethereum.Value.fromTuple(this.value8));
    map.set("value9", ethereum.Value.fromTuple(this.value9));
    map.set("value10", ethereum.Value.fromTuple(this.value10));
    map.set("value11", ethereum.Value.fromTuple(this.value11));
    return map;
  }
}

export class ZooKeeper extends ethereum.SmartContract {
  static bind(address: Address): ZooKeeper {
    return new ZooKeeper("ZooKeeper", address);
  }

  addDrop(dropAddress: Address): BigInt {
    let result = super.call("addDrop", "addDrop(address):(uint256)", [
      ethereum.Value.fromAddress(dropAddress)
    ]);

    return result[0].toBigInt();
  }

  try_addDrop(dropAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("addDrop", "addDrop(address):(uint256)", [
      ethereum.Value.fromAddress(dropAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bridge(): Address {
    let result = super.call("bridge", "bridge():(address)", []);

    return result[0].toAddress();
  }

  try_bridge(): ethereum.CallResult<Address> {
    let result = super.tryCall("bridge", "bridge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dropAddresses(param0: Address): BigInt {
    let result = super.call(
      "dropAddresses",
      "dropAddresses(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_dropAddresses(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dropAddresses",
      "dropAddresses(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drops(param0: BigInt): Address {
    let result = super.call("drops", "drops(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_drops(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("drops", "drops(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  media(): Address {
    let result = super.call("media", "media():(address)", []);

    return result[0].toAddress();
  }

  try_media(): ethereum.CallResult<Address> {
    let result = super.tryCall("media", "media():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  namePrice(): BigInt {
    let result = super.call("namePrice", "namePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_namePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("namePrice", "namePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supplyBNB(): BigInt {
    let result = super.call("supplyBNB", "supplyBNB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supplyBNB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supplyBNB", "supplyBNB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyZOO(): BigInt {
    let result = super.call("supplyZOO", "supplyZOO():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supplyZOO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supplyZOO", "supplyZOO():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): ZooKeeper__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(uint256):((string,uint256,uint256,uint256),uint8,string,uint256,uint256,uint256,string,(string,string,uint256,uint256),(uint256,uint256),(uint256,uint256,bool,bool),(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<ZooKeeper__tokensResult>(
      new ZooKeeper__tokensResult(
        changetype<ZooKeeper__tokensResultRarityStruct>(result[0].toTuple()),
        result[1].toI32(),
        result[2].toString(),
        result[3].toBigInt(),
        result[4].toBigInt(),
        result[5].toBigInt(),
        result[6].toString(),
        changetype<ZooKeeper__tokensResultParentsStruct>(result[7].toTuple()),
        changetype<ZooKeeper__tokensResultBreedStruct>(result[8].toTuple()),
        changetype<ZooKeeper__tokensResultMetaStruct>(result[9].toTuple()),
        changetype<ZooKeeper__tokensResultDataStruct>(result[10].toTuple()),
        changetype<ZooKeeper__tokensResultBidSharesStruct>(result[11].toTuple())
      )
    );
  }

  try_tokens(param0: BigInt): ethereum.CallResult<ZooKeeper__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(uint256):((string,uint256,uint256,uint256),uint8,string,uint256,uint256,uint256,string,(string,string,uint256,uint256),(uint256,uint256),(uint256,uint256,bool,bool),(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ZooKeeper__tokensResult>(
        new ZooKeeper__tokensResult(
          changetype<ZooKeeper__tokensResultRarityStruct>(value[0].toTuple()),
          value[1].toI32(),
          value[2].toString(),
          value[3].toBigInt(),
          value[4].toBigInt(),
          value[5].toBigInt(),
          value[6].toString(),
          changetype<ZooKeeper__tokensResultParentsStruct>(value[7].toTuple()),
          changetype<ZooKeeper__tokensResultBreedStruct>(value[8].toTuple()),
          changetype<ZooKeeper__tokensResultMetaStruct>(value[9].toTuple()),
          changetype<ZooKeeper__tokensResultDataStruct>(value[10].toTuple()),
          changetype<ZooKeeper__tokensResultBidSharesStruct>(
            value[11].toTuple()
          )
        )
      )
    );
  }

  unlocked(): boolean {
    let result = super.call("unlocked", "unlocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_unlocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("unlocked", "unlocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  zoo(): Address {
    let result = super.call("zoo", "zoo():(address)", []);

    return result[0].toAddress();
  }

  try_zoo(): ethereum.CallResult<Address> {
    let result = super.tryCall("zoo", "zoo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zooPriceBNB(): BigInt {
    let result = super.call("zooPriceBNB", "zooPriceBNB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_zooPriceBNB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("zooPriceBNB", "zooPriceBNB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddDropCall extends ethereum.Call {
  get inputs(): AddDropCall__Inputs {
    return new AddDropCall__Inputs(this);
  }

  get outputs(): AddDropCall__Outputs {
    return new AddDropCall__Outputs(this);
  }
}

export class AddDropCall__Inputs {
  _call: AddDropCall;

  constructor(call: AddDropCall) {
    this._call = call;
  }

  get dropAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddDropCall__Outputs {
  _call: AddDropCall;

  constructor(call: AddDropCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyEggsCall extends ethereum.Call {
  get inputs(): BuyEggsCall__Inputs {
    return new BuyEggsCall__Inputs(this);
  }

  get outputs(): BuyEggsCall__Outputs {
    return new BuyEggsCall__Outputs(this);
  }
}

export class BuyEggsCall__Inputs {
  _call: BuyEggsCall;

  constructor(call: BuyEggsCall) {
    this._call = call;
  }

  get dropID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyEggsCall__Outputs {
  _call: BuyEggsCall;

  constructor(call: BuyEggsCall) {
    this._call = call;
  }
}

export class BuyEggsBNBCall extends ethereum.Call {
  get inputs(): BuyEggsBNBCall__Inputs {
    return new BuyEggsBNBCall__Inputs(this);
  }

  get outputs(): BuyEggsBNBCall__Outputs {
    return new BuyEggsBNBCall__Outputs(this);
  }
}

export class BuyEggsBNBCall__Inputs {
  _call: BuyEggsBNBCall;

  constructor(call: BuyEggsBNBCall) {
    this._call = call;
  }

  get dropID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyEggsBNBCall__Outputs {
  _call: BuyEggsBNBCall;

  constructor(call: BuyEggsBNBCall) {
    this._call = call;
  }
}

export class ConfigureCall extends ethereum.Call {
  get inputs(): ConfigureCall__Inputs {
    return new ConfigureCall__Inputs(this);
  }

  get outputs(): ConfigureCall__Outputs {
    return new ConfigureCall__Outputs(this);
  }
}

export class ConfigureCall__Inputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }

  get _media(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _zoo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pair(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _bridge(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _unlocked(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ConfigureCall__Outputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }
}

export class ImportEggCall extends ethereum.Call {
  get inputs(): ImportEggCall__Inputs {
    return new ImportEggCall__Inputs(this);
  }

  get outputs(): ImportEggCall__Outputs {
    return new ImportEggCall__Outputs(this);
  }
}

export class ImportEggCall__Inputs {
  _call: ImportEggCall;

  constructor(call: ImportEggCall) {
    this._call = call;
  }

  get mediaV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dropID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ImportEggCall__Outputs {
  _call: ImportEggCall;

  constructor(call: ImportEggCall) {
    this._call = call;
  }

  get value0(): ImportEggCallValue0Struct {
    return changetype<ImportEggCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class ImportEggCallValue0Struct extends ethereum.Tuple {
  get rarity(): ImportEggCallValue0RarityStruct {
    return changetype<ImportEggCallValue0RarityStruct>(this[0].toTuple());
  }

  get kind(): i32 {
    return this[1].toI32();
  }

  get name(): string {
    return this[2].toString();
  }

  get id(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get birthday(): BigInt {
    return this[5].toBigInt();
  }

  get customName(): string {
    return this[6].toString();
  }

  get parents(): ImportEggCallValue0ParentsStruct {
    return changetype<ImportEggCallValue0ParentsStruct>(this[7].toTuple());
  }

  get breed(): ImportEggCallValue0BreedStruct {
    return changetype<ImportEggCallValue0BreedStruct>(this[8].toTuple());
  }

  get meta(): ImportEggCallValue0MetaStruct {
    return changetype<ImportEggCallValue0MetaStruct>(this[9].toTuple());
  }

  get data(): ImportEggCallValue0DataStruct {
    return changetype<ImportEggCallValue0DataStruct>(this[10].toTuple());
  }

  get bidShares(): ImportEggCallValue0BidSharesStruct {
    return changetype<ImportEggCallValue0BidSharesStruct>(this[11].toTuple());
  }
}

export class ImportEggCallValue0RarityStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get probability(): BigInt {
    return this[1].toBigInt();
  }

  get yield(): BigInt {
    return this[2].toBigInt();
  }

  get boost(): BigInt {
    return this[3].toBigInt();
  }
}

export class ImportEggCallValue0ParentsStruct extends ethereum.Tuple {
  get animalA(): string {
    return this[0].toString();
  }

  get animalB(): string {
    return this[1].toString();
  }

  get tokenA(): BigInt {
    return this[2].toBigInt();
  }

  get tokenB(): BigInt {
    return this[3].toBigInt();
  }
}

export class ImportEggCallValue0BreedStruct extends ethereum.Tuple {
  get count(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class ImportEggCallValue0MetaStruct extends ethereum.Tuple {
  get eggID(): BigInt {
    return this[0].toBigInt();
  }

  get dropID(): BigInt {
    return this[1].toBigInt();
  }

  get burned(): boolean {
    return this[2].toBoolean();
  }

  get swapped(): boolean {
    return this[3].toBoolean();
  }
}

export class ImportEggCallValue0DataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class ImportEggCallValue0BidSharesStruct extends ethereum.Tuple {
  get prevOwner(): ImportEggCallValue0BidSharesPrevOwnerStruct {
    return changetype<ImportEggCallValue0BidSharesPrevOwnerStruct>(
      this[0].toTuple()
    );
  }

  get creator(): ImportEggCallValue0BidSharesCreatorStruct {
    return changetype<ImportEggCallValue0BidSharesCreatorStruct>(
      this[1].toTuple()
    );
  }

  get owner(): ImportEggCallValue0BidSharesOwnerStruct {
    return changetype<ImportEggCallValue0BidSharesOwnerStruct>(
      this[2].toTuple()
    );
  }
}

export class ImportEggCallValue0BidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ImportEggCallValue0BidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ImportEggCallValue0BidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemintCall extends ethereum.Call {
  get inputs(): RemintCall__Inputs {
    return new RemintCall__Inputs(this);
  }

  get outputs(): RemintCall__Outputs {
    return new RemintCall__Outputs(this);
  }
}

export class RemintCall__Inputs {
  _call: RemintCall;

  constructor(call: RemintCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): RemintCallTokenStruct {
    return changetype<RemintCallTokenStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class RemintCall__Outputs {
  _call: RemintCall;

  constructor(call: RemintCall) {
    this._call = call;
  }
}

export class RemintCallTokenStruct extends ethereum.Tuple {
  get rarity(): RemintCallTokenRarityStruct {
    return changetype<RemintCallTokenRarityStruct>(this[0].toTuple());
  }

  get kind(): i32 {
    return this[1].toI32();
  }

  get name(): string {
    return this[2].toString();
  }

  get id(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get birthday(): BigInt {
    return this[5].toBigInt();
  }

  get customName(): string {
    return this[6].toString();
  }

  get parents(): RemintCallTokenParentsStruct {
    return changetype<RemintCallTokenParentsStruct>(this[7].toTuple());
  }

  get breed(): RemintCallTokenBreedStruct {
    return changetype<RemintCallTokenBreedStruct>(this[8].toTuple());
  }

  get meta(): RemintCallTokenMetaStruct {
    return changetype<RemintCallTokenMetaStruct>(this[9].toTuple());
  }

  get data(): RemintCallTokenDataStruct {
    return changetype<RemintCallTokenDataStruct>(this[10].toTuple());
  }

  get bidShares(): RemintCallTokenBidSharesStruct {
    return changetype<RemintCallTokenBidSharesStruct>(this[11].toTuple());
  }
}

export class RemintCallTokenRarityStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get probability(): BigInt {
    return this[1].toBigInt();
  }

  get yield(): BigInt {
    return this[2].toBigInt();
  }

  get boost(): BigInt {
    return this[3].toBigInt();
  }
}

export class RemintCallTokenParentsStruct extends ethereum.Tuple {
  get animalA(): string {
    return this[0].toString();
  }

  get animalB(): string {
    return this[1].toString();
  }

  get tokenA(): BigInt {
    return this[2].toBigInt();
  }

  get tokenB(): BigInt {
    return this[3].toBigInt();
  }
}

export class RemintCallTokenBreedStruct extends ethereum.Tuple {
  get count(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class RemintCallTokenMetaStruct extends ethereum.Tuple {
  get eggID(): BigInt {
    return this[0].toBigInt();
  }

  get dropID(): BigInt {
    return this[1].toBigInt();
  }

  get burned(): boolean {
    return this[2].toBoolean();
  }

  get swapped(): boolean {
    return this[3].toBoolean();
  }
}

export class RemintCallTokenDataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class RemintCallTokenBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): RemintCallTokenBidSharesPrevOwnerStruct {
    return changetype<RemintCallTokenBidSharesPrevOwnerStruct>(
      this[0].toTuple()
    );
  }

  get creator(): RemintCallTokenBidSharesCreatorStruct {
    return changetype<RemintCallTokenBidSharesCreatorStruct>(this[1].toTuple());
  }

  get owner(): RemintCallTokenBidSharesOwnerStruct {
    return changetype<RemintCallTokenBidSharesOwnerStruct>(this[2].toTuple());
  }
}

export class RemintCallTokenBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class RemintCallTokenBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class RemintCallTokenBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNamePriceCall extends ethereum.Call {
  get inputs(): SetNamePriceCall__Inputs {
    return new SetNamePriceCall__Inputs(this);
  }

  get outputs(): SetNamePriceCall__Outputs {
    return new SetNamePriceCall__Outputs(this);
  }
}

export class SetNamePriceCall__Inputs {
  _call: SetNamePriceCall;

  constructor(call: SetNamePriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNamePriceCall__Outputs {
  _call: SetNamePriceCall;

  constructor(call: SetNamePriceCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get chainID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawBNBCall extends ethereum.Call {
  get inputs(): WithdrawBNBCall__Inputs {
    return new WithdrawBNBCall__Inputs(this);
  }

  get outputs(): WithdrawBNBCall__Outputs {
    return new WithdrawBNBCall__Outputs(this);
  }
}

export class WithdrawBNBCall__Inputs {
  _call: WithdrawBNBCall;

  constructor(call: WithdrawBNBCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBNBCall__Outputs {
  _call: WithdrawBNBCall;

  constructor(call: WithdrawBNBCall) {
    this._call = call;
  }
}

export class WithdrawZOOCall extends ethereum.Call {
  get inputs(): WithdrawZOOCall__Inputs {
    return new WithdrawZOOCall__Inputs(this);
  }

  get outputs(): WithdrawZOOCall__Outputs {
    return new WithdrawZOOCall__Outputs(this);
  }
}

export class WithdrawZOOCall__Inputs {
  _call: WithdrawZOOCall;

  constructor(call: WithdrawZOOCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawZOOCall__Outputs {
  _call: WithdrawZOOCall;

  constructor(call: WithdrawZOOCall) {
    this._call = call;
  }
}
