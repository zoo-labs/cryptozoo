{
  "address": "0x4Dcb572d8cB14f07f85EDE038486b412Cf48E849",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggSupply",
          "type": "uint256"
        }
      ],
      "name": "AddDrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentB",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "Breed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        }
      ],
      "name": "BuyEgg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "yields",
          "type": "uint256"
        }
      ],
      "name": "Free",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eggID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Hatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dropAddress",
          "type": "address"
        }
      ],
      "name": "addDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyEggsBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_media",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zoo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_unlocked",
          "type": "bool"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dropAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mediaV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dropID",
          "type": "uint256"
        }
      ],
      "name": "importEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yields",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "media",
      "outputs": [
        {
          "internalType": "contract IMedia",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "namePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yields",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "name": "remint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setNamePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyZOO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yields",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "birthday",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "customName",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Breed",
          "name": "breed",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eggID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dropID",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapped",
              "type": "bool"
            }
          ],
          "internalType": "struct IZoo.Meta",
          "name": "meta",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawZOO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zoo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zooPriceBNB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8fe39e5c4e0b5ee123e90b796bba3cc3fa60f50ce9f33f325c1a1ced1fdda2ac",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x4Dcb572d8cB14f07f85EDE038486b412Cf48E849",
    "transactionIndex": 0,
    "gasUsed": "2956197",
    "logsBloom": "0x
    "blockHash": "0x6b5fe15fdba317d600c800b14bb7147c6b0f68f75056ec6b824fb1859c79d4d9",
    "transactionHash": "0x8fe39e5c4e0b5ee123e90b796bba3cc3fa60f50ce9f33f325c1a1ced1fdda2ac",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 45,
        "transactionHash": "0x8fe39e5c4e0b5ee123e90b796bba3cc3fa60f50ce9f33f325c1a1ced1fdda2ac",
        "address": "0x4Dcb572d8cB14f07f85EDE038486b412Cf48E849",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0aef8b960d43418dc0a83dd0cac04a3793de3e0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6b5fe15fdba317d600c800b14bb7147c6b0f68f75056ec6b824fb1859c79d4d9"
      }
    ],
    "blockNumber": 45,
    "cumulativeGasUsed": "2956197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ae8380b16cbf17785ac018785234318e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggSupply\",\"type\":\"uint256\"}],\"name\":\"AddDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentB\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"Breed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"}],\"name\":\"BuyEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"}],\"name\":\"Free\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Hatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropAddress\",\"type\":\"address\"}],\"name\":\"addDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyEggsBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_media\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zoo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_unlocked\",\"type\":\"bool\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dropAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mediaV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"name\":\"importEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"media\",\"outputs\":[{\"internalType\":\"contract IMedia\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"remint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyZOO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawZOO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ZooKeeper.sol\":\"ZooKeeper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/ZooKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Counters } from '@openzeppelin/contracts/utils/Counters.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport { UUPSUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\nimport { IDrop } from './interfaces/IDrop.sol';\\nimport { IMedia } from './interfaces/IMedia.sol';\\nimport { IZoo } from './interfaces/IZoo.sol';\\nimport { IERC721Burnable } from './interfaces/IERC721Burnable.sol';\\nimport { IUniswapV2Pair } from './uniswapv2/interfaces/IUniswapV2Pair.sol';\\n\\nimport './console.sol';\\n\\n\\ncontract ZooKeeper is Ownable {\\n// contract ZooKeeper is UUPSUpgradeable, OwnableUpgradeable {\\n  using SafeMath for uint256;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private dropIDs;\\n\\n  // Declare an Event\\n  event AddDrop(address indexed dropAddress, string title, uint256 eggSupply);\\n  event Breed(address indexed from, uint256 parentA, uint256 parentB, uint256 indexed eggID);\\n  event Burn(address indexed from, uint256 indexed tokenID);\\n  event BuyEgg(address indexed from, uint256 indexed eggID);\\n  event Free(address indexed from, uint256 indexed tokenID, uint256 indexed yields);\\n  event Hatch(address indexed from, uint256 eggID, uint256 indexed tokenID);\\n  event Mint(address indexed from, uint256 indexed tokenID);\\n  event Swap(address indexed owner, uint256 indexed tokenID, uint256 indexed chainId);\\n\\n  // Mapping of Address to Drop ID\\n  mapping(uint256 => address) public drops;\\n\\n  // Mapping of ID to Address\\n  mapping(address => uint256) public dropAddresses;\\n\\n  // Mapping of ID to NFT\\n  mapping(uint256 => IZoo.Token) public tokens;\\n\\n  // Price to set name of Token\\n  uint256 public namePrice;\\n\\n  // External contracts\\n  IMedia public media;\\n  IERC20 public zoo;\\n  IUniswapV2Pair public pair;\\n  address public bridge;\\n  bool public unlocked;\\n\\n  // Only bridge can call method\\n  modifier onlyBridge() {\\n    require(msg.sender == bridge);\\n    _;\\n  }\\n\\n  // // Ensure only owner can upgrade contract\\n  // function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  // // Initialize upgradeable contract\\n  // function initialize() public initializer {\\n  //   __Ownable_init_unchained();\\n  // }\\n\\n  // Configure ZooKeeper\\n  function configure(\\n    address _media,\\n    address _zoo,\\n    address _pair,\\n    address _bridge,\\n    bool _unlocked\\n  ) public onlyOwner {\\n    media = IMedia(_media);\\n    zoo = IERC20(_zoo);\\n    pair = IUniswapV2Pair(_pair);\\n    bridge = _bridge;\\n    unlocked = _unlocked;\\n  }\\n\\n  // Add new drop\\n  function addDrop(address dropAddress) public onlyOwner returns (uint256) {\\n    require(dropAddresses[dropAddress] == 0, 'Drop already added');\\n    IDrop drop = IDrop(dropAddress);\\n    dropIDs.increment();\\n    uint256 dropID = dropIDs.current();\\n    drops[dropID] = dropAddress;\\n    dropAddresses[dropAddress] = dropID;\\n    emit AddDrop(dropAddress, drop.title(), drop.eggSupply());\\n    return dropID;\\n  }\\n\\n  // Set price for buying a name\\n  function setNamePrice(uint256 price) public onlyOwner {\\n    namePrice = price.mul(10**18);\\n  }\\n\\n  // Issue a new token to owner\\n  function mint(address owner, IZoo.Token memory token) private returns (IZoo.Token memory) {\\n    console.log('mint', owner, token.name);\\n    token = media.mintToken(owner, token);\\n    tokens[token.id] = token;\\n    emit Mint(owner, token.id);\\n    return token;\\n  }\\n\\n  // Burn token owned by owner\\n  function burn(address owner, uint256 tokenID) private {\\n    console.log('burn', owner, tokenID);\\n    media.burnToken(owner, tokenID);\\n    tokens[tokenID].meta.burned = true;\\n    emit Burn(owner, tokenID);\\n  }\\n\\n  // Swap to new chain requested\\n  function swap(\\n    address owner,\\n    uint256 tokenID,\\n    uint256 chainId\\n  ) external onlyBridge {\\n    console.log('swap', owner, tokenID);\\n    burn(owner, tokenID);\\n    tokens[tokenID].meta.swapped = true;\\n    emit Swap(owner, tokenID, chainId);\\n  }\\n\\n  // Remint token swapped from another chain\\n  function remint(\\n    address owner,\\n    IZoo.Token memory token\\n  ) external onlyBridge {\\n    mint(owner, token);\\n  }\\n\\n  // Mint egg\\n  function mintEgg(uint256 dropID, address owner) internal returns (IZoo.Token memory) {\\n    require(media.balanceOf(owner) < 3, 'Only 3 eggs allowed');\\n\\n    // Get Egg for drop\\n    IDrop drop = IDrop(drops[dropID]);\\n    IZoo.Token memory egg = drop.newEgg();\\n\\n    // Mint Egg Token\\n    egg = mint(owner, egg);\\n    console.log('minted egg', egg.id);\\n    emit BuyEgg(owner, egg.id);\\n    return egg;\\n  }\\n\\n\\n  // Accept ZOO and return Egg NFT\\n  function buyEgg(uint256 dropID, address buyer) private returns (IZoo.Token memory) {\\n    console.log('buyEgg', dropID);\\n\\n    // Check egg price\\n    IDrop drop = IDrop(drops[dropID]);\\n    require(zoo.balanceOf(buyer) >= drop.eggPrice(), 'Not enough ZOO');\\n\\n    // Transfer funds\\n    console.log('Transfer ZOO', buyer, address(this), drop.eggPrice());\\n    zoo.transferFrom(buyer, address(this), drop.eggPrice());\\n\\n    // Mint and return NFT\\n    return mintEgg(dropID, buyer);\\n  }\\n\\n  // Accept ZOO and return Egg NFT\\n  function buyEggs(uint256 dropID, uint256 quantity) public {\\n    console.log('buyEggs', dropID, quantity);\\n    for (uint8 i = 0; i < quantity; i++) {\\n      buyEgg(dropID, msg.sender);\\n    }\\n  }\\n\\n  function buyEggsBNB(uint256 dropID, uint256 quantity) public payable {\\n    console.log('buyEggsBNB', dropID, quantity);\\n\\n    // Ensure enough BNB was sent\\n    IDrop drop = IDrop(drops[dropID]);\\n    uint256 bnbPrice = (drop.eggPrice() + (18000 * (10 ** 18))) / zooPriceBNB(); // 420k ZOO in BNB\\n    console.log('msg.value', msg.value);\\n    console.log('bnbPrice', bnbPrice);\\n    console.log('drop.eggPrice', drop.eggPrice());\\n    console.log('zooPriceBNB()', zooPriceBNB());\\n    require(msg.value >= bnbPrice * quantity, \\\"Not enough BNB\\\");\\n\\n    for (uint8 i = 0; i < quantity; i++) {\\n      mintEgg(dropID, msg.sender);\\n    }\\n  }\\n\\n  // Import Egg for V2 users\\n  function importEgg(address mediaV2, uint256 tokenID, uint256 dropID) public payable returns (IZoo.Token memory) {\\n    console.log('importEgg', mediaV2, tokenID, dropID);\\n    IERC721Burnable v2 = IERC721Burnable(mediaV2); // V2 Eggs\\n\\n    // Import V2 Egg\\n    require(v2.ownerOf(tokenID) == msg.sender, \\\"Not owner of NFT\\\");\\n    v2.burn(tokenID);\\n\\n    // Ensure enough BNB was sent\\n    IDrop drop = IDrop(drops[dropID]);\\n    uint256 bnbPrice = zooPriceBNB() * (drop.eggPrice() + (18000 * (10 ** 18))); // 378k ZOO in BNB\\n    console.log(\\\"zooPriceBNB()\\\", zooPriceBNB());\\n    console.log(\\\"drop.eggPrice()\\\", drop.eggPrice());\\n    console.log(\\\"bnbPrice\\\", bnbPrice);\\n    console.log(\\\"msg.value\\\", msg.value);\\n    require(msg.value >= bnbPrice, \\\"Not enough BNB\\\");\\n\\n    // Mint them a shiny new egg\\n    return mintEgg(dropID, msg.sender);\\n  }\\n\\n  // DISABLED FOR NOW\\n  // // Burn egg and randomly return an animal NFT\\n  // function hatchEgg(uint256 dropID, uint256 eggID) public returns (IZoo.Token memory) {\\n  //   require(unlocked, 'Game is not unlocked yet');\\n\\n  //   console.log('hatchEgg', dropID, eggID);\\n\\n  //   require(media.tokenExists(eggID), 'Egg is burned or does not exist');\\n\\n  //   // Get animal for given Egg\\n  //   IZoo.Token memory animal = getAnimal(dropID, eggID);\\n  //   animal.meta.eggID = eggID;\\n  //   animal.meta.dropID = dropID;\\n  //   console.log('animal', animal.name);\\n\\n  //   // ...it's hatching!\\n  //   animal = mint(msg.sender, animal);\\n  //   console.log('minted animal', animal.id, eggID);\\n\\n  //   // bye egg\\n  //   burn(msg.sender, eggID);\\n  //   console.log('burned', eggID);\\n\\n  //   emit Hatch(msg.sender, eggID, animal.id);\\n  //   return animal;\\n  // }\\n\\n  // Ensure animals can breed\\n  // modifier canBreed(uint256 parentA, uint256 parentB) {\\n  //   console.log('canBreed', parentA, parentB);\\n\\n  //   require(media.tokenExists(parentA) && media.tokenExists(parentB), 'Non-existent token');\\n  //   require(keccak256(abi.encode(parentA)) != keccak256(abi.encode(parentB)), 'Not able to breed with self');\\n  //   require(breedReady(parentA) && breedReady(parentB), 'Wait for cooldown to finish.');\\n  //   require(isBaseAnimal(parentA) && isBaseAnimal(parentB), 'Only BASE_ANIMAL can breed.');\\n  //   _;\\n  // }\\n\\n\\n  // // Breed two animals and create a hybrid egg\\n  // function breedAnimals(\\n  //   uint256 dropID,\\n  //   uint256 tokenA,\\n  //   uint256 tokenB\\n  // ) public canBreed(tokenA, tokenB) returns (IZoo.Token memory) {\\n  //   console.log('breedAnimals', dropID, tokenA, tokenB);\\n\\n  //   IZoo.Token memory egg = IDrop(drops[dropID]).newHybridEgg(IZoo.Parents({ animalA: tokens[tokenA].name, animalB: tokens[tokenB].name, tokenA: tokenA, tokenB: tokenB }));\\n\\n  //   // Update breeding delay for each parent\\n  //   updateBreedDelays(tokenA, tokenB);\\n\\n  //   egg = mint(msg.sender, egg);\\n  //   emit Breed(msg.sender, tokenA, tokenB, egg.id);\\n  //   return egg;\\n  // }\\n\\n  // // Freeing an animal burns the animal NFT and returns the ZOO to the owner\\n  // function freeAnimal(uint256 tokenID) public returns (uint256 yields) {\\n  //   console.log('freeAnimal', tokenID);\\n\\n  //   IZoo.Token memory token = tokens[tokenID];\\n\\n  //   // Burn the token\\n  //   burn(msg.sender, tokenID);\\n\\n  //   // How long did we HODL?\\n  //   uint256 blockAge = block.number - token.birthday;\\n  //   uint256 daysOld = blockAge.div(28800);\\n\\n  //   // Calculate yields\\n  //   yields = daysOld.mul(token.rarity.yields.mul(10**18));\\n  //   console.log('calculateYield', blockAge, daysOld, yields);\\n\\n  //   // Transfer yields\\n  //   zoo.transfer(msg.sender, yields);\\n\\n  //   emit Free(msg.sender, tokenID, yields);\\n\\n  //   return yields;\\n  // }\\n\\n  // // Buy a custom name for your NFT\\n  // function buyName(uint256 tokenID, string memory customName) public {\\n  //   require(zoo.balanceOf(msg.sender) < namePrice, 'ZK: Not enough ZOO to purchase Name');\\n\\n  //   zoo.transferFrom(msg.sender, address(this), namePrice);\\n\\n  //   IZoo.Token memory token = tokens[tokenID];\\n  //   token.customName = customName;\\n  //   tokens[tokenID] = token;\\n  // }\\n\\n  // // Temporary random function\\n  // function unsafeRandom() private view returns (uint256) {\\n  //   uint256 randomNumber = uint256(keccak256(abi.encodePacked(block.number, msg.sender, block.timestamp))) % 10000;\\n  //   return randomNumber;\\n  // }\\n\\n  // // Ensure base animal\\n  // function isBaseAnimal(uint256 tokenID) private view returns (bool) {\\n  //   return tokens[tokenID].kind == IZoo.Type.BASE_ANIMAL;\\n  // }\\n\\n  // // Get a random base or hybrid animal based on a given egg\\n  // function getAnimal(uint256 dropID, uint256 eggID) private view returns (IZoo.Token memory) {\\n  //   console.log('getAnimal', dropID, eggID);\\n\\n  //   // Get Egg\\n  //   IZoo.Token memory egg = tokens[eggID];\\n\\n  //   // Get random animal or hybrid from Drop\\n  //   if (egg.kind == IZoo.Type.BASE_EGG) {\\n  //     console.log('getRandomAnimal', dropID, eggID);\\n  //     return IDrop(drops[dropID]).getRandomAnimal(unsafeRandom());\\n  //   } else {\\n  //     console.log('getRandomHybrid', dropID, eggID);\\n  //     return IDrop(drops[dropID]).getRandomHybrid(unsafeRandom(), egg.parents);\\n  //   }\\n  // }\\n\\n  // // Update breed delays\\n  // function updateBreedDelays(uint256 parentA, uint256 parentB) private {\\n  //   console.log('updateBreedDelays', parentA, parentB);\\n\\n  //   tokens[parentA].breed.count++;\\n  //   tokens[parentB].breed.count++;\\n  //   tokens[parentA].breed.timestamp = block.timestamp;\\n  //   tokens[parentB].breed.timestamp = block.timestamp;\\n  // }\\n\\n  // // Get next timestamp token can be bred\\n  // function breedNext(uint256 tokenID) public view returns (uint256) {\\n  //   IZoo.Token memory token = tokens[tokenID];\\n  //   return token.breed.timestamp + (token.breed.count * 1 days);\\n  // }\\n\\n  // // Check whether token is ready to breed again\\n  // function breedReady(uint256 tokenID) public view returns (bool) {\\n  //   // Never bred? Lets go\\n  //   if (tokens[tokenID].breed.count == 0) {\\n  //     return true;\\n  //   }\\n  //   // If current timestamp is greater than the next breed time, lets go\\n  //   if (block.timestamp > breedNext(tokenID)) {\\n  //     return true;\\n  //   }\\n\\n  //   // Not ready\\n  //   return false;\\n  // }\\n\\n  // Calculate price of ZOO denominted in BNB based on pair reserves\\n  function zooPriceBNB() public view returns (uint256) {\\n    (uint zooAmount, uint bnbAmount,) = pair.getReserves();\\n    return zooAmount / bnbAmount;\\n  }\\n\\n  // Return total amount of ZOO in contract\\n  function supplyBNB() public view returns (uint256) {\\n    return zoo.balanceOf(address(this));\\n  }\\n\\n  // Return total amount of ZOO in contract\\n  function supplyZOO() public view returns (uint256) {\\n    return zoo.balanceOf(address(this));\\n  }\\n\\n  // Enable owner to withdraw ZOO if necessary\\n  function withdrawBNB(address payable receiver, uint256 amount) public onlyOwner {\\n    require(receiver.send(amount));\\n  }\\n\\n  // Enable owner to withdraw ZOO if necessary\\n  function withdrawZOO(address receiver, uint256 amount) public onlyOwner {\\n    require(zoo.transfer(receiver, amount));\\n  }\\n\\n  // Helper to do fractional math\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"Math overflow\\\");\\n  }\\n\\n  // Payable fallback functions\\n  receive() external payable {}\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x4268efc339eeb0fcf190e9f955821146529898c5014e39678de8db730c6525f0\",\"license\":\"MIT\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/IDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IDrop {\\n    struct Egg {\\n        IZoo.Type kind;\\n        string  name;\\n        uint256 supply;\\n        uint256 price;\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        uint256 minted;       // amount minted\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Animal {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Hybrid {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        uint256 yields;\\n        string parentA;\\n        string parentB;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    function title() external view returns (string memory);\\n    function eggPrice() external view returns (uint256);\\n    function eggSupply() external view returns (uint256);\\n    function newEgg() external returns (IZoo.Token memory);\\n    function newHybridEgg(IZoo.Parents memory) external returns (IZoo.Token memory);\\n    function getRandomAnimal(uint256) external view returns (IZoo.Token memory);\\n    function getRandomHybrid(uint256, IZoo.Parents memory) external view returns (IZoo.Token memory);\\n}\\n\",\"keccak256\":\"0x9f45ba8429d93f8c0fa9610ee8b0fa00bcd9a31db02e0521b81d739851fd7655\",\"license\":\"MIT\"},\"src/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IERC721Burnable is IERC721 {\\n    function burn(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xfae97b17cee6105ebfc5b1a3c38470d0ae59da12f50e3014f44870203413ee72\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from '../Decimal.sol';\\nimport { IDrop } from './IDrop.sol';\\nimport { IZoo } from './IZoo.sol';\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n  struct Bid {\\n    // Amount of the currency being bid\\n    uint256 amount;\\n    // Address to the ERC20 token being used to bid\\n    address currency;\\n    // Address of the bidder\\n    address bidder;\\n    // Address of the recipient\\n    address recipient;\\n    // % of the next sale to award the current owner\\n    Decimal.D256 sellOnShare;\\n    // Flag bid as offline for OTC sale\\n    bool offline;\\n  }\\n\\n  struct Ask {\\n    // Amount of the currency being asked\\n    uint256 amount;\\n    // Address to the ERC20 token being asked\\n    address currency;\\n    // Flag ask as offline for OTC sale\\n    bool offline;\\n  }\\n\\n  struct BidShares {\\n    // % of sale value that goes to the _previous_ owner of the nft\\n    Decimal.D256 prevOwner;\\n    // % of sale value that goes to the original creator of the nft\\n    Decimal.D256 creator;\\n    // % of sale value that goes to the seller (current owner) of the nft\\n    Decimal.D256 owner;\\n  }\\n\\n  event BidCreated(uint256 indexed tokenId, Bid bid);\\n  event BidRemoved(uint256 indexed tokenId, Bid bid);\\n  event BidFinalized(uint256 indexed tokenId, Bid bid);\\n  event AskCreated(uint256 indexed tokenId, Ask ask);\\n  event AskRemoved(uint256 indexed tokenId, Ask ask);\\n  event BidShareUpdated(uint256 indexed tokenId, BidShares bidShares);\\n  event LazyBidFinalized(uint256 dropId, string name, uint256 indexed tokenId, Bid bid);\\n  event LazyBidCreated(uint256 dropId, string name, Bid bid);\\n  event LazyBidRemoved(uint256 dropId, string name, Bid bid);\\n\\n  function bidForTokenBidder(uint256 tokenId, address bidder) external view returns (Bid memory);\\n\\n  function lazyBidForTokenBidder(uint256 dropId, string memory name, address bidder) external view returns (Bid memory);\\n\\n  function currentAskForToken(uint256 tokenId) external view returns (Ask memory);\\n\\n  function bidSharesForToken(uint256 tokenId) external view returns (BidShares memory);\\n\\n  function isValidBid(uint256 tokenId, uint256 bidAmount) external view returns (bool);\\n\\n  function isValidBidShares(BidShares calldata bidShares) external pure returns (bool);\\n\\n  function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount) external pure returns (uint256);\\n\\n  function configure(address mediaContractAddress) external;\\n\\n  function setBidShares(uint256 tokenId, BidShares calldata bidShares) external;\\n\\n  function setAsk(uint256 tokenId, Ask calldata ask) external;\\n\\n  function removeAsk(uint256 tokenId) external;\\n\\n  function setBid(\\n    uint256 tokenId,\\n    Bid calldata bid,\\n    address spender\\n  ) external;\\n\\n  function setLazyBidFromApp(\\n    uint256 dropId,\\n    IDrop.Egg memory egg,\\n    Bid memory bid,\\n    address spender\\n  ) external;\\n\\n  function removeBid(uint256 tokenId, address bidder) external;\\n\\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address sender) external;\\n\\n  function acceptBid(uint256 tokenId, Bid calldata expectedBid) external;\\n\\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, Bid calldata expectedBid) external;\\n\\n  function isOfflineBidder(address bidder) external returns (bool);\\n\\n  function setOfflineBidder(address bidder, bool authorized) external;\\n}\\n\",\"keccak256\":\"0x590a28995dbfa7adac8d6ab13dff40e31189fa68415abed1da1571a2d47c66ed\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { IMarket } from './IMarket.sol';\\nimport { IZoo } from './IZoo.sol';\\nimport { IDrop } from './IDrop.sol';\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia is IERC721 {\\n  struct EIP712Signature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  struct MediaData {\\n    // A valid URI of the content represented by this token\\n    string tokenURI;\\n    // A valid URI of the metadata associated with this token\\n    string metadataURI;\\n    // A SHA256 hash of the content pointed to by tokenURI\\n    bytes32 contentHash;\\n    // A SHA256 hash of the content pointed to by metadataURI\\n    bytes32 metadataHash;\\n  }\\n\\n  event TokenURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\\n  event TokenMetadataURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\\n\\n  /**\\n   * @notice Return the metadata URI for a piece of media given the token URI\\n   */\\n  function tokenMetadataURI(uint256 tokenId) external view returns (string memory);\\n\\n  /**\\n   * @notice Mint new media for msg.sender.\\n   */\\n  function mint(MediaData calldata data, IMarket.BidShares calldata bidShares) external;\\n\\n  /**\\n   * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n   */\\n  function mintWithSig(\\n    address creator,\\n    MediaData calldata data,\\n    IMarket.BidShares calldata bidShares,\\n    EIP712Signature calldata sig\\n  ) external;\\n\\n  /**\\n   * @notice Transfer the token with the given ID to a given address.\\n   * Save the previous owner before the transfer, in case there is a sell-on fee.\\n   * @dev This can only be called by the auction contract specified at deployment\\n   */\\n  function auctionTransfer(uint256 tokenId, address recipient) external;\\n\\n  /**\\n   * @notice Set the ask on a piece of media\\n   */\\n  function setAsk(uint256 tokenId, IMarket.Ask calldata ask) external;\\n\\n  /**\\n   * @notice Remove the ask on a piece of media\\n   */\\n  function removeAsk(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Set the bid on a piece of media\\n   */\\n  function setBid(uint256 tokenId, IMarket.Bid calldata bid) external;\\n\\n  /**\\n   * @notice Remove the bid on a piece of media\\n   */\\n  function removeBid(uint256 tokenId) external;\\n\\n  function acceptBid(uint256 tokenId, IMarket.Bid calldata bid) external;\\n\\n  /**\\n   * @notice Revoke approval for a piece of media\\n   */\\n  function revokeApproval(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Update the token URI\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata tokenURI) external;\\n\\n  /**\\n   * @notice Update the token metadata uri\\n   */\\n  function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n   */\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    EIP712Signature calldata sig\\n  ) external;\\n\\n  // Added for App\\n\\n  /**\\n   * @notice Set the ask on a piece of media\\n   */\\n  function setAskFromApp(uint256 tokenId, IMarket.Ask calldata ask) external;\\n\\n  /**\\n   * @notice Set the bid on a piece of media\\n   */\\n  function setBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external;\\n\\n  /**\\n   * @notice Remove the bid on a piece of media\\n   */\\n  function removeBidFromApp(uint256 tokenId, address sender) external;\\n\\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address sender) external;\\n\\n  function acceptBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external;\\n\\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, IMarket.Bid memory bid) external;\\n\\n  function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n\\n  function burnToken(address owner, uint256 tokenID) external;\\n\\n  function tokenExists(uint256 tokenID) external returns (bool);\\n\\n  function tokenCreator(uint256 tokenID) external returns (address);\\n  \\n  function previousTokenOwner(uint256 tokenID) external returns (address);\\n\\n  function setLazyBidFromApp(\\n    uint256 dropId,\\n    IDrop.Egg memory egg,\\n    IMarket.Bid memory bid,\\n    address spender\\n  ) external;\\n\\n}\\n\",\"keccak256\":\"0x087f0c8ee53c1704df53a3749303154d3257c2efc26c271ddecbe228ce72edb6\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yields;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;       // originating egg\\n        uint256 dropID;      // originating drop\\n        bool burned;         // token has been burned\\n        bool swapped;        // token has been swapped\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;           // unique ID\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        string  customName;   // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0x43992e03cccb578e6ab7da4a234675f3523dc481d68022514555befe69df4b63\",\"license\":\"MIT\"},\"src/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61340c80620000836000396000f3fe6080604052600436106101275760003560e01c806312d67d57146101305780631e676a58146101595780632626f4e01461016c57806349077a4f1461018c5780634f2cabdf146101b95780634f64b2be146101f45780635eb399681461022c578063685bf0cd146102625780636a5e265014610282578063715018a6146102b3578063796851ae146102c85780637b6a8777146102dd5780638da5cb5b146102fd5780639b9e45de146103125780639f1d0f5914610327578063a8aa1b3114610347578063a97af1f214610367578063b22073b614610387578063e5a984801461039d578063e78cea92146103bd578063e8ed3358146103dd578063edc70c84146102c8578063f2fde38b146103fd578063fab81d6a1461041d578063fbc36e0a1461043d57005b3661012e57005b005b61014361013e366004612a45565b61045d565b6040516101509190613181565b60405180910390f35b61012e610167366004612ca6565b6107c1565b34801561017857600080fd5b5061012e610187366004612c76565b6109e3565b34801561019857600080fd5b506006546101ac906001600160a01b031681565b6040516101509190612eec565b3480156101c557600080fd5b506101e66101d43660046127ea565b60036020526000908152604090205481565b604051908152602001610150565b34801561020057600080fd5b5061021461020f366004612c76565b610a2a565b6040516101509c9b9a999897969594939291906130bb565b34801561023857600080fd5b506101ac610247366004612c76565b6002602052600090815260409020546001600160a01b031681565b34801561026e57600080fd5b5061012e61027d366004612ca6565b610f64565b34801561028e57600080fd5b506009546102a390600160a01b900460ff1681565b6040519015158152602001610150565b3480156102bf57600080fd5b5061012e610fbe565b3480156102d457600080fd5b506101e6610ff9565b3480156102e957600080fd5b506007546101ac906001600160a01b031681565b34801561030957600080fd5b506101ac61107f565b34801561031e57600080fd5b506101e661108e565b34801561033357600080fd5b5061012e610342366004612a45565b61113b565b34801561035357600080fd5b506008546101ac906001600160a01b031681565b34801561037357600080fd5b5061012e610382366004612822565b6111da565b34801561039357600080fd5b506101e660055481565b3480156103a957600080fd5b506101e66103b83660046127ea565b61123b565b3480156103c957600080fd5b506009546101ac906001600160a01b031681565b3480156103e957600080fd5b5061012e6103f836600461284d565b611443565b34801561040957600080fd5b5061012e6104183660046127ea565b6114da565b34801561042957600080fd5b5061012e6104383660046128bd565b61157a565b34801561044957600080fd5b5061012e610458366004612a33565b61159b565b610465612191565b61049260405180604001604052806009815260200168696d706f727445676760b81b815250858585611657565b6040516331a9108f60e11b815260048101849052849033906001600160a01b03831690636352211e9060240160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190612806565b6001600160a01b03161461055c5760405162461bcd60e51b815260206004820152601060248201526f139bdd081bdddb995c881bd98813919560821b60448201526064015b60405180910390fd5b604051630852cd8d60e31b8152600481018590526001600160a01b038216906342966c6890602401600060405180830381600087803b15801561059e57600080fd5b505af11580156105b2573d6000803e3d6000fd5b505050600084815260026020908152604080832054815163182f1aa960e11b815291516001600160a01b039091169450849263305e35529260048082019391829003018186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612c8e565b610651906903cfc82e37e9a740000061329c565b61065961108e565b61066391906132d4565b905061069b6040518060400160405280600d81526020016c7a6f6f5072696365424e42282960981b81525061069661108e565b6116a6565b6107376040518060400160405280600f81526020016e64726f702e6567675072696365282960881b815250836001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190612c8e565b61076160405180604001604052806008815260200167626e62507269636560c01b815250826116a6565b61078c604051806040016040528060098152602001686d73672e76616c756560b81b815250346116a6565b803410156107ac5760405162461bcd60e51b81526004016105539061305e565b6107b685336116eb565b979650505050505050565b6107ee6040518060400160405280600a815260200169313abca2b3b3b9a1272160b11b81525083836118c5565b6000828152600260205260408120546001600160a01b03169061080f61108e565b826001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190612c8e565b610894906903cfc82e37e9a740000061329c565b61089e91906132b4565b90506108cb604051806040016040528060098152602001686d73672e76616c756560b81b815250346116a6565b6108f560405180604001604052806008815260200167626e62507269636560c01b815250826116a6565b6109576040518060400160405280600d81526020016c64726f702e656767507269636560981b815250836001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ff57600080fd5b6109886040518060400160405280600d81526020016c7a6f6f5072696365424e42282960981b81525061069661108e565b61099283826132d4565b3410156109b15760405162461bcd60e51b81526004016105539061305e565b60005b838160ff1610156109dc576109c985336116eb565b50806109d48161335a565b9150506109b4565b5050505050565b336109ec61107f565b6001600160a01b031614610a125760405162461bcd60e51b815260040161055390613086565b610a2481670de0b6b3a764000061190c565b60055550565b600460205280600052604060002060009150905080600001604051806080016040529081600082018054610a5d9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a899061331f565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff90921692610b1a9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b469061331f565b8015610b935780601f10610b6857610100808354040283529160200191610b93565b820191906000526020600020905b815481529060010190602001808311610b7657829003601f168201915b505050505090806006015490806007015490806008015490806009018054610bba9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610be69061331f565b8015610c335780601f10610c0857610100808354040283529160200191610c33565b820191906000526020600020905b815481529060010190602001808311610c1657829003601f168201915b50505050509080600a01604051806080016040529081600082018054610c589061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c849061331f565b8015610cd15780601f10610ca657610100808354040283529160200191610cd1565b820191906000526020600020905b815481529060010190602001808311610cb457829003601f168201915b50505050508152602001600182018054610cea9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d169061331f565b8015610d635780601f10610d3857610100808354040283529160200191610d63565b820191906000526020600020905b815481529060010190602001808311610d4657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610df99061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e259061331f565b8015610e725780601f10610e4757610100808354040283529160200191610e72565b820191906000526020600020905b815481529060010190602001808311610e5557829003601f168201915b50505050508152602001600182018054610e8b9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb79061331f565b8015610f045780601f10610ed957610100808354040283529160200191610f04565b820191906000526020600020905b815481529060010190602001808311610ee757829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610f8e604051806040016040528060078152602001666275794567677360c81b81525083836118c5565b60005b818160ff161015610fb957610fa6833361191f565b5080610fb18161335a565b915050610f91565b505050565b33610fc761107f565b6001600160a01b031614610fed5760405162461bcd60e51b815260040161055390613086565b610ff76000611c66565b565b6007546040516370a0823160e01b81526000916001600160a01b0316906370a082319061102a903090600401612eec565b60206040518083038186803b15801561104257600080fd5b505afa158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a9190612c8e565b905090565b6000546001600160a01b031690565b6000806000600860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111199190612c28565b506001600160701b03918216935016905061113481836132b4565b9250505090565b6009546001600160a01b0316331461115257600080fd5b611179604051806040016040528060048152602001630737761760e41b8152508484611cb6565b6111838383611cfd565b600082815260046020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b336111e361107f565b6001600160a01b0316146112095760405162461bcd60e51b815260040161055390613086565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505061123757600080fd5b5050565b60003361124661107f565b6001600160a01b03161461126c5760405162461bcd60e51b815260040161055390613086565b6001600160a01b038216600090815260036020526040902054156112c75760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b6044820152606401610553565b816112d6600180546001019055565b60006112e160015490565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526003909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b39190810190612a95565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612c8e565b604051611432929190613017565b60405180910390a29150505b919050565b3361144c61107f565b6001600160a01b0316146114725760405162461bcd60e51b815260040161055390613086565b600680546001600160a01b039687166001600160a01b031991821617909155600780549587169582169590951790945560088054938616939094169290921790925560098054911515600160a01b026001600160a81b03199092169290931691909117179055565b336114e361107f565b6001600160a01b0316146115095760405162461bcd60e51b815260040161055390613086565b6001600160a01b03811661156e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610553565b61157781611c66565b50565b6009546001600160a01b0316331461159157600080fd5b610fb98282611dda565b336115a461107f565b6001600160a01b0316146115ca5760405162461bcd60e51b815260040161055390613086565b60075460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906115fc9085908590600401612f24565b602060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612a79565b61123757600080fd5b6116a0848484846040516024016116719493929190612fdf565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b1790526120e0565b50505050565b61123782826040516024016116bc929190613017565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526120e0565b6116f3612191565b6006546040516370a0823160e01b81526003916001600160a01b0316906370a0823190611724908690600401612eec565b60206040518083038186803b15801561173c57600080fd5b505afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190612c8e565b106117b75760405162461bcd60e51b815260206004820152601360248201527213db9b1e480cc81959d9dcc8185b1b1bddd959606a1b6044820152606401610553565b600083815260026020526040808220548151630244d47b60e11b815291516001600160a01b0390911692918391630489a8f691600480820192869290919082900301818387803b15801561180a57600080fd5b505af115801561181e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118469190810190612ac7565b90506118528482611dda565b90506118846040518060400160405280600a8152602001696d696e7465642065676760b01b81525082606001516116a6565b60608101516040516001600160a01b038616907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a3949350505050565b610fb98383836040516024016118dd93929190613039565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790526120e0565b600061191882846132d4565b9392505050565b611927612191565b61194f6040518060400160405280600681526020016562757945676760d01b815250846116a6565b60008381526002602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561199e57600080fd5b505afa1580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d69190612c8e565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611a06908790600401612eec565b60206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190612c8e565b1015611a955760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f756768205a4f4f60901b6044820152606401610553565b611b356040518060400160405280600c81526020016b5472616e73666572205a4f4f60a01b8152508430846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b158015611af857600080fd5b505afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b309190612c8e565b612101565b600760009054906101000a90046001600160a01b03166001600160a01b03166323b872dd8430846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190612c8e565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015611c1b57600080fd5b505af1158015611c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c539190612a79565b50611c5e84846116eb565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610fb9838383604051602401611cce93929190612fb1565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526120e0565b611d2460405180604001604052806004815260200163313ab93760e11b8152508383611cb6565b600654604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90611d569085908590600401612f24565b600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b505050600082815260046020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b611de2612191565b611e0d604051806040016040528060048152602001631b5a5b9d60e21b81525084846040015161214a565b600654604051631dc925ff60e31b81526001600160a01b039091169063ee492ff890611e3f9086908690600401612f00565b600060405180830381600087803b158015611e5957600080fd5b505af1158015611e6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e959190810190612ac7565b606081015160009081526004602090815260409091208251805180519496508694929391928492611eca9284929101906122ac565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115611f2357634e487b7160e01b600052602160045260246000fd5b021790555060408201518051611f439160058401916020909101906122ac565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051611f7d9160098401916020909101906122ac565b5060e082015180518051600a840191611f9b918391602001906122ac565b506020828101518051611fb492600185019201906122ac565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff0019161792151590910291909117909155610140830151805180519192601385019261204892849201906122ac565b50602082810151805161206192600185019201906122ac565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6116a08484848460405160240161211b9493929190612f3d565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b1790526120e0565b610fb983838360405160240161216293929190612f73565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526120e0565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e08301528190815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200161221b6040518060800160405280606081526020016060815260200160008152602001600081525090565b815260200161223d604051806040016040528060008152602001600081525090565b815260408051608081018252600080825260208281018290529282018190526060820152910190815260200161229a6040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016122a7612330565b905290565b8280546122b89061331f565b90600052602060002090601f0160209004810192826122da5760008555612320565b82601f106122f357805160ff1916838001178555612320565b82800160010185558215612320579182015b82811115612320578251825591602001919060010190612305565b5061232c92915061235d565b5090565b6040518060600160405280612343612372565b8152602001612350612372565b81526020016122a7612372565b5b8082111561232c576000815560010161235e565b6040518060200160405280600081525090565b803561143e816133c9565b805161143e816133c9565b600082601f8301126123ab578081fd5b81356123be6123b982613275565b613245565b8181528460208386010111156123d2578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126123fc578081fd5b815161240a6123b982613275565b81815284602083860101111561241e578283fd5b611c5e8260208301602087016132f3565b600060608284031215612440578081fd5b612448613194565b90506124548383612524565b81526124638360208401612524565b60208201526124758360408401612524565b604082015292915050565b600060608284031215612491578081fd5b612499613194565b90506124a58383612547565b81526124b48360208401612547565b60208201526124758360408401612547565b6000604082840312156124d7578081fd5b6124df6131bc565b9050813581526020820135602082015292915050565b600060408284031215612506578081fd5b61250e6131bc565b9050815181526020820151602082015292915050565b600060208284031215612535578081fd5b61253d6131de565b9135825250919050565b600060208284031215612558578081fd5b6125606131de565b9151825250919050565b60006080828403121561257b578081fd5b612583613200565b905081356001600160401b038082111561259c57600080fd5b6125a88583860161239b565b835260208401359150808211156125be57600080fd5b506125cb8482850161239b565b602083015250604082013560408201526060820135606082015292915050565b6000608082840312156125fc578081fd5b612604613200565b905081516001600160401b038082111561261d57600080fd5b612629858386016123ec565b8352602084015191508082111561263f57600080fd5b5061264c848285016123ec565b602083015250604082015160408201526060820151606082015292915050565b60006080828403121561267d578081fd5b612685613200565b9050813581526020820135602082015260408201356126a3816133bb565b604082015260608201356126b6816133bb565b606082015292915050565b6000608082840312156126d2578081fd5b6126da613200565b9050815181526020820151602082015260408201516126f8816133bb565b604082015260608201516126b6816133bb565b60006080828403121561271c578081fd5b612724613200565b905081356001600160401b0381111561273c57600080fd5b6127488482850161239b565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060808284031215612780578081fd5b612788613200565b905081516001600160401b038111156127a057600080fd5b6127ac848285016123ec565b82525060208201516020820152604082015160408201526060820151606082015292915050565b80516001600160701b038116811461143e57600080fd5b6000602082840312156127fb578081fd5b8135611918816133a6565b600060208284031215612817578081fd5b8151611918816133a6565b60008060408385031215612834578081fd5b823561283f816133a6565b946020939093013593505050565b600080600080600060a08688031215612864578081fd5b853561286f816133a6565b9450602086013561287f816133a6565b9350604086013561288f816133a6565b9250606086013561289f816133a6565b915060808601356128af816133bb565b809150509295509295909350565b600080604083850312156128cf578182fd5b82356128da816133a6565b915060208301356001600160401b03808211156128f5578283fd5b908401906102408287031215612909578283fd5b612911613222565b82358281111561291f578485fd5b61292b8882860161270b565b82525061293a60208401612385565b6020820152604083013582811115612950578485fd5b61295c8882860161239b565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115612991578485fd5b61299d8882860161239b565b60c08301525060e0830135828111156129b4578485fd5b6129c08882860161256a565b60e0830152506101006129d5888286016124c6565b908201526101406129e88885830161266c565b6101208301526101c084013583811115612a00578586fd5b612a0c8982870161256a565b828401525050612a20876101e0850161242f565b6101608201528093505050509250929050565b60008060408385031215612834578182fd5b600080600060608486031215612a59578081fd5b8335612a64816133a6565b95602085013595506040909401359392505050565b600060208284031215612a8a578081fd5b8151611918816133bb565b600060208284031215612aa6578081fd5b81516001600160401b03811115612abb578182fd5b611c5e848285016123ec565b600060208284031215612ad8578081fd5b81516001600160401b0380821115612aee578283fd5b908301906102408286031215612b02578283fd5b612b0a613222565b825182811115612b18578485fd5b612b248782860161276f565b825250612b3360208401612390565b6020820152604083015182811115612b49578485fd5b612b55878286016123ec565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115612b8a578485fd5b612b96878286016123ec565b60c08301525060e083015182811115612bad578485fd5b612bb9878286016125eb565b60e083015250610100612bce878286016124f5565b90820152610140612be1878583016126c1565b6101208301526101c084015183811115612bf9578586fd5b612c05888287016125eb565b828401525050612c19866101e08501612480565b61016082015295945050505050565b600080600060608486031215612c3c578081fd5b612c45846127d3565b9250612c53602085016127d3565b9150604084015163ffffffff81168114612c6b578182fd5b809150509250925092565b600060208284031215612c87578081fd5b5035919050565b600060208284031215612c9f578081fd5b5051919050565b60008060408385031215612cb8578182fd5b50508035926020909101359150565b60048110612ce557634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452612d018160208601602086016132f3565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452612d466080850182612ce9565b905060208301518482036020860152612d5f8282612ce9565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452612dbf6080850182612ce9565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552612dff82860182612daa565b9150506020830151612e146020860182612cc7565b5060408301518482036040860152612e2c8282612ce9565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152612e648282612ce9565b91505060e083015184820360e0860152612e7e8282612d31565b91505061010080840151612e9e8287018280518252602090810151910152565b5050610120830151610140612eb581870183612d80565b8401518583036101c08701529050612ecd8282612d31565b915050610160830151612ee46101e0860182612d15565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604060208201819052600090611c5e90830184612de9565b6001600160a01b03929092168252602082015260400190565b608081526000612f506080830187612ce9565b6001600160a01b0395861660208401529390941660408201526060015292915050565b606081526000612f866060830186612ce9565b6001600160a01b03851660208401528281036040840152612fa78185612ce9565b9695505050505050565b606081526000612fc46060830186612ce9565b6001600160a01b039490941660208301525060400152919050565b608081526000612ff26080830187612ce9565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60408152600061302a6040830185612ce9565b90508260208301529392505050565b60608152600061304c6060830186612ce9565b60208301949094525060400152919050565b6020808252600e908201526d2737ba1032b737bab3b41021272160911b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b610240815260006130d061024083018f612daa565b6130dd602084018f612cc7565b82810360408401526130ef818e612ce9565b90508b60608401528a60808401528960a084015282810360c0840152613115818a612ce9565b905082810360e08401526131298189612d31565b87516101008501526020880151610120850152905061314c610140840187612d80565b8281036101c084015261315f8186612d31565b9150506131706101e0830184612d15565b9d9c50505050505050505050505050565b6020815260006119186020830184612de9565b604051606081016001600160401b03811182821017156131b6576131b6613390565b60405290565b604080519081016001600160401b03811182821017156131b6576131b6613390565b604051602081016001600160401b03811182821017156131b6576131b6613390565b604051608081016001600160401b03811182821017156131b6576131b6613390565b60405161018081016001600160401b03811182821017156131b6576131b6613390565b604051601f8201601f191681016001600160401b038111828210171561326d5761326d613390565b604052919050565b60006001600160401b0382111561328e5761328e613390565b50601f01601f191660200190565b600082198211156132af576132af61337a565b500190565b6000826132cf57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156132ee576132ee61337a565b500290565b60005b8381101561330e5781810151838201526020016132f6565b838111156116a05750506000910152565b600181811c9082168061333357607f821691505b6020821081141561335457634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff8114156133715761337161337a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461157757600080fd5b801515811461157757600080fd5b6004811061157757600080fdfea26469706673582212204f4c067199c2fc1a9e57dd07908300a3111c0c3c0fafd900efa28b8c549ac68364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101275760003560e01c806312d67d57146101305780631e676a58146101595780632626f4e01461016c57806349077a4f1461018c5780634f2cabdf146101b95780634f64b2be146101f45780635eb399681461022c578063685bf0cd146102625780636a5e265014610282578063715018a6146102b3578063796851ae146102c85780637b6a8777146102dd5780638da5cb5b146102fd5780639b9e45de146103125780639f1d0f5914610327578063a8aa1b3114610347578063a97af1f214610367578063b22073b614610387578063e5a984801461039d578063e78cea92146103bd578063e8ed3358146103dd578063edc70c84146102c8578063f2fde38b146103fd578063fab81d6a1461041d578063fbc36e0a1461043d57005b3661012e57005b005b61014361013e366004612a45565b61045d565b6040516101509190613181565b60405180910390f35b61012e610167366004612ca6565b6107c1565b34801561017857600080fd5b5061012e610187366004612c76565b6109e3565b34801561019857600080fd5b506006546101ac906001600160a01b031681565b6040516101509190612eec565b3480156101c557600080fd5b506101e66101d43660046127ea565b60036020526000908152604090205481565b604051908152602001610150565b34801561020057600080fd5b5061021461020f366004612c76565b610a2a565b6040516101509c9b9a999897969594939291906130bb565b34801561023857600080fd5b506101ac610247366004612c76565b6002602052600090815260409020546001600160a01b031681565b34801561026e57600080fd5b5061012e61027d366004612ca6565b610f64565b34801561028e57600080fd5b506009546102a390600160a01b900460ff1681565b6040519015158152602001610150565b3480156102bf57600080fd5b5061012e610fbe565b3480156102d457600080fd5b506101e6610ff9565b3480156102e957600080fd5b506007546101ac906001600160a01b031681565b34801561030957600080fd5b506101ac61107f565b34801561031e57600080fd5b506101e661108e565b34801561033357600080fd5b5061012e610342366004612a45565b61113b565b34801561035357600080fd5b506008546101ac906001600160a01b031681565b34801561037357600080fd5b5061012e610382366004612822565b6111da565b34801561039357600080fd5b506101e660055481565b3480156103a957600080fd5b506101e66103b83660046127ea565b61123b565b3480156103c957600080fd5b506009546101ac906001600160a01b031681565b3480156103e957600080fd5b5061012e6103f836600461284d565b611443565b34801561040957600080fd5b5061012e6104183660046127ea565b6114da565b34801561042957600080fd5b5061012e6104383660046128bd565b61157a565b34801561044957600080fd5b5061012e610458366004612a33565b61159b565b610465612191565b61049260405180604001604052806009815260200168696d706f727445676760b81b815250858585611657565b6040516331a9108f60e11b815260048101849052849033906001600160a01b03831690636352211e9060240160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190612806565b6001600160a01b03161461055c5760405162461bcd60e51b815260206004820152601060248201526f139bdd081bdddb995c881bd98813919560821b60448201526064015b60405180910390fd5b604051630852cd8d60e31b8152600481018590526001600160a01b038216906342966c6890602401600060405180830381600087803b15801561059e57600080fd5b505af11580156105b2573d6000803e3d6000fd5b505050600084815260026020908152604080832054815163182f1aa960e11b815291516001600160a01b039091169450849263305e35529260048082019391829003018186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612c8e565b610651906903cfc82e37e9a740000061329c565b61065961108e565b61066391906132d4565b905061069b6040518060400160405280600d81526020016c7a6f6f5072696365424e42282960981b81525061069661108e565b6116a6565b6107376040518060400160405280600f81526020016e64726f702e6567675072696365282960881b815250836001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190612c8e565b61076160405180604001604052806008815260200167626e62507269636560c01b815250826116a6565b61078c604051806040016040528060098152602001686d73672e76616c756560b81b815250346116a6565b803410156107ac5760405162461bcd60e51b81526004016105539061305e565b6107b685336116eb565b979650505050505050565b6107ee6040518060400160405280600a815260200169313abca2b3b3b9a1272160b11b81525083836118c5565b6000828152600260205260408120546001600160a01b03169061080f61108e565b826001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190612c8e565b610894906903cfc82e37e9a740000061329c565b61089e91906132b4565b90506108cb604051806040016040528060098152602001686d73672e76616c756560b81b815250346116a6565b6108f560405180604001604052806008815260200167626e62507269636560c01b815250826116a6565b6109576040518060400160405280600d81526020016c64726f702e656767507269636560981b815250836001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ff57600080fd5b6109886040518060400160405280600d81526020016c7a6f6f5072696365424e42282960981b81525061069661108e565b61099283826132d4565b3410156109b15760405162461bcd60e51b81526004016105539061305e565b60005b838160ff1610156109dc576109c985336116eb565b50806109d48161335a565b9150506109b4565b5050505050565b336109ec61107f565b6001600160a01b031614610a125760405162461bcd60e51b815260040161055390613086565b610a2481670de0b6b3a764000061190c565b60055550565b600460205280600052604060002060009150905080600001604051806080016040529081600082018054610a5d9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a899061331f565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b505050918352505060018201546020820152600282015460408201526003909101546060909101526004820154600583018054929360ff90921692610b1a9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b469061331f565b8015610b935780601f10610b6857610100808354040283529160200191610b93565b820191906000526020600020905b815481529060010190602001808311610b7657829003601f168201915b505050505090806006015490806007015490806008015490806009018054610bba9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610be69061331f565b8015610c335780601f10610c0857610100808354040283529160200191610c33565b820191906000526020600020905b815481529060010190602001808311610c1657829003601f168201915b50505050509080600a01604051806080016040529081600082018054610c589061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c849061331f565b8015610cd15780601f10610ca657610100808354040283529160200191610cd1565b820191906000526020600020905b815481529060010190602001808311610cb457829003601f168201915b50505050508152602001600182018054610cea9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d169061331f565b8015610d635780601f10610d3857610100808354040283529160200191610d63565b820191906000526020600020905b815481529060010190602001808311610d4657829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280518082018252600e8501548152600f8501548184015281516080808201845260108701548252601187015494820194909452601286015460ff80821615158386015261010090910416151560608201528251938401909252601385018054949591949293919282908290610df99061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e259061331f565b8015610e725780601f10610e4757610100808354040283529160200191610e72565b820191906000526020600020905b815481529060010190602001808311610e5557829003601f168201915b50505050508152602001600182018054610e8b9061331f565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb79061331f565b8015610f045780601f10610ed957610100808354040283529160200191610f04565b820191906000526020600020905b815481529060010190602001808311610ee757829003601f168201915b5050509183525050600282015460208083019190915260039092015460409182015280516080810182526017850154606082019081528152815180840183526018860154815281840152815192830182526019909401548252830152908c565b610f8e604051806040016040528060078152602001666275794567677360c81b81525083836118c5565b60005b818160ff161015610fb957610fa6833361191f565b5080610fb18161335a565b915050610f91565b505050565b33610fc761107f565b6001600160a01b031614610fed5760405162461bcd60e51b815260040161055390613086565b610ff76000611c66565b565b6007546040516370a0823160e01b81526000916001600160a01b0316906370a082319061102a903090600401612eec565b60206040518083038186803b15801561104257600080fd5b505afa158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a9190612c8e565b905090565b6000546001600160a01b031690565b6000806000600860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111199190612c28565b506001600160701b03918216935016905061113481836132b4565b9250505090565b6009546001600160a01b0316331461115257600080fd5b611179604051806040016040528060048152602001630737761760e41b8152508484611cb6565b6111838383611cfd565b600082815260046020526040808220601201805461ff00191661010017905551829184916001600160a01b038716917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a75891a4505050565b336111e361107f565b6001600160a01b0316146112095760405162461bcd60e51b815260040161055390613086565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505061123757600080fd5b5050565b60003361124661107f565b6001600160a01b03161461126c5760405162461bcd60e51b815260040161055390613086565b6001600160a01b038216600090815260036020526040902054156112c75760405162461bcd60e51b8152602060048201526012602482015271111c9bdc08185b1c9958591e48185919195960721b6044820152606401610553565b816112d6600180546001019055565b60006112e160015490565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038a81169182179092558085526003909352818420859055815163129e754360e21b8152915194955091937f2924d682319c0da5a600d8e093bcb0fb706de4e6bb58e114c69dee5587e2ec2d9392871692634a79d50c9260048082019391829003018186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b39190810190612a95565b846001600160a01b031663d232b7976040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612c8e565b604051611432929190613017565b60405180910390a29150505b919050565b3361144c61107f565b6001600160a01b0316146114725760405162461bcd60e51b815260040161055390613086565b600680546001600160a01b039687166001600160a01b031991821617909155600780549587169582169590951790945560088054938616939094169290921790925560098054911515600160a01b026001600160a81b03199092169290931691909117179055565b336114e361107f565b6001600160a01b0316146115095760405162461bcd60e51b815260040161055390613086565b6001600160a01b03811661156e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610553565b61157781611c66565b50565b6009546001600160a01b0316331461159157600080fd5b610fb98282611dda565b336115a461107f565b6001600160a01b0316146115ca5760405162461bcd60e51b815260040161055390613086565b60075460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906115fc9085908590600401612f24565b602060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612a79565b61123757600080fd5b6116a0848484846040516024016116719493929190612fdf565b60408051601f198184030181529190526020810180516001600160e01b031663daa394bd60e01b1790526120e0565b50505050565b61123782826040516024016116bc929190613017565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526120e0565b6116f3612191565b6006546040516370a0823160e01b81526003916001600160a01b0316906370a0823190611724908690600401612eec565b60206040518083038186803b15801561173c57600080fd5b505afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190612c8e565b106117b75760405162461bcd60e51b815260206004820152601360248201527213db9b1e480cc81959d9dcc8185b1b1bddd959606a1b6044820152606401610553565b600083815260026020526040808220548151630244d47b60e11b815291516001600160a01b0390911692918391630489a8f691600480820192869290919082900301818387803b15801561180a57600080fd5b505af115801561181e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118469190810190612ac7565b90506118528482611dda565b90506118846040518060400160405280600a8152602001696d696e7465642065676760b01b81525082606001516116a6565b60608101516040516001600160a01b038616907fb6fcdc0b9a5291c95b93142b5e81d61a0b01a26b043be034e6daaa1219e7ebc190600090a3949350505050565b610fb98383836040516024016118dd93929190613039565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790526120e0565b600061191882846132d4565b9392505050565b611927612191565b61194f6040518060400160405280600681526020016562757945676760d01b815250846116a6565b60008381526002602090815260409182902054825163182f1aa960e11b815292516001600160a01b0390911692839263305e355292600480840193829003018186803b15801561199e57600080fd5b505afa1580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d69190612c8e565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611a06908790600401612eec565b60206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190612c8e565b1015611a955760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f756768205a4f4f60901b6044820152606401610553565b611b356040518060400160405280600c81526020016b5472616e73666572205a4f4f60a01b8152508430846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b158015611af857600080fd5b505afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b309190612c8e565b612101565b600760009054906101000a90046001600160a01b03166001600160a01b03166323b872dd8430846001600160a01b031663305e35526040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190612c8e565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b158015611c1b57600080fd5b505af1158015611c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c539190612a79565b50611c5e84846116eb565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610fb9838383604051602401611cce93929190612fb1565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526120e0565b611d2460405180604001604052806004815260200163313ab93760e11b8152508383611cb6565b600654604051633477cc1b60e21b81526001600160a01b039091169063d1df306c90611d569085908590600401612f24565b600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b505050600082815260046020526040808220601201805460ff19166001179055518392506001600160a01b038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca591a35050565b611de2612191565b611e0d604051806040016040528060048152602001631b5a5b9d60e21b81525084846040015161214a565b600654604051631dc925ff60e31b81526001600160a01b039091169063ee492ff890611e3f9086908690600401612f00565b600060405180830381600087803b158015611e5957600080fd5b505af1158015611e6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e959190810190612ac7565b606081015160009081526004602090815260409091208251805180519496508694929391928492611eca9284929101906122ac565b50602082015181600101556040820151816002015560608201518160030155505060208201518160040160006101000a81548160ff02191690836003811115611f2357634e487b7160e01b600052602160045260246000fd5b021790555060408201518051611f439160058401916020909101906122ac565b50606082015160068201556080820151600782015560a0820151600882015560c08201518051611f7d9160098401916020909101906122ac565b5060e082015180518051600a840191611f9b918391602001906122ac565b506020828101518051611fb492600185019201906122ac565b506040828101516002830155606092830151600390920191909155610100848101518051600e860155602090810151600f8601556101208601518051601087015580820151601187015592830151601286018054949095015161ffff1990941690151561ff0019161792151590910291909117909155610140830151805180519192601385019261204892849201906122ac565b50602082810151805161206192600185019201906122ac565b5060408281015160028301556060928301516003909201919091556101609390930151805151601784015560208101515160188401558301515160199092019190915583015190516001600160a01b038516907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a350919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6116a08484848460405160240161211b9493929190612f3d565b60408051601f198184030181529190526020810180516001600160e01b0316636eb7943d60e01b1790526120e0565b610fb983838360405160240161216293929190612f73565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526120e0565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e08301528190815260200160008152602001606081526020016000815260200160008152602001600081526020016060815260200161221b6040518060800160405280606081526020016060815260200160008152602001600081525090565b815260200161223d604051806040016040528060008152602001600081525090565b815260408051608081018252600080825260208281018290529282018190526060820152910190815260200161229a6040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016122a7612330565b905290565b8280546122b89061331f565b90600052602060002090601f0160209004810192826122da5760008555612320565b82601f106122f357805160ff1916838001178555612320565b82800160010185558215612320579182015b82811115612320578251825591602001919060010190612305565b5061232c92915061235d565b5090565b6040518060600160405280612343612372565b8152602001612350612372565b81526020016122a7612372565b5b8082111561232c576000815560010161235e565b6040518060200160405280600081525090565b803561143e816133c9565b805161143e816133c9565b600082601f8301126123ab578081fd5b81356123be6123b982613275565b613245565b8181528460208386010111156123d2578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126123fc578081fd5b815161240a6123b982613275565b81815284602083860101111561241e578283fd5b611c5e8260208301602087016132f3565b600060608284031215612440578081fd5b612448613194565b90506124548383612524565b81526124638360208401612524565b60208201526124758360408401612524565b604082015292915050565b600060608284031215612491578081fd5b612499613194565b90506124a58383612547565b81526124b48360208401612547565b60208201526124758360408401612547565b6000604082840312156124d7578081fd5b6124df6131bc565b9050813581526020820135602082015292915050565b600060408284031215612506578081fd5b61250e6131bc565b9050815181526020820151602082015292915050565b600060208284031215612535578081fd5b61253d6131de565b9135825250919050565b600060208284031215612558578081fd5b6125606131de565b9151825250919050565b60006080828403121561257b578081fd5b612583613200565b905081356001600160401b038082111561259c57600080fd5b6125a88583860161239b565b835260208401359150808211156125be57600080fd5b506125cb8482850161239b565b602083015250604082013560408201526060820135606082015292915050565b6000608082840312156125fc578081fd5b612604613200565b905081516001600160401b038082111561261d57600080fd5b612629858386016123ec565b8352602084015191508082111561263f57600080fd5b5061264c848285016123ec565b602083015250604082015160408201526060820151606082015292915050565b60006080828403121561267d578081fd5b612685613200565b9050813581526020820135602082015260408201356126a3816133bb565b604082015260608201356126b6816133bb565b606082015292915050565b6000608082840312156126d2578081fd5b6126da613200565b9050815181526020820151602082015260408201516126f8816133bb565b604082015260608201516126b6816133bb565b60006080828403121561271c578081fd5b612724613200565b905081356001600160401b0381111561273c57600080fd5b6127488482850161239b565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060808284031215612780578081fd5b612788613200565b905081516001600160401b038111156127a057600080fd5b6127ac848285016123ec565b82525060208201516020820152604082015160408201526060820151606082015292915050565b80516001600160701b038116811461143e57600080fd5b6000602082840312156127fb578081fd5b8135611918816133a6565b600060208284031215612817578081fd5b8151611918816133a6565b60008060408385031215612834578081fd5b823561283f816133a6565b946020939093013593505050565b600080600080600060a08688031215612864578081fd5b853561286f816133a6565b9450602086013561287f816133a6565b9350604086013561288f816133a6565b9250606086013561289f816133a6565b915060808601356128af816133bb565b809150509295509295909350565b600080604083850312156128cf578182fd5b82356128da816133a6565b915060208301356001600160401b03808211156128f5578283fd5b908401906102408287031215612909578283fd5b612911613222565b82358281111561291f578485fd5b61292b8882860161270b565b82525061293a60208401612385565b6020820152604083013582811115612950578485fd5b61295c8882860161239b565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013582811115612991578485fd5b61299d8882860161239b565b60c08301525060e0830135828111156129b4578485fd5b6129c08882860161256a565b60e0830152506101006129d5888286016124c6565b908201526101406129e88885830161266c565b6101208301526101c084013583811115612a00578586fd5b612a0c8982870161256a565b828401525050612a20876101e0850161242f565b6101608201528093505050509250929050565b60008060408385031215612834578182fd5b600080600060608486031215612a59578081fd5b8335612a64816133a6565b95602085013595506040909401359392505050565b600060208284031215612a8a578081fd5b8151611918816133bb565b600060208284031215612aa6578081fd5b81516001600160401b03811115612abb578182fd5b611c5e848285016123ec565b600060208284031215612ad8578081fd5b81516001600160401b0380821115612aee578283fd5b908301906102408286031215612b02578283fd5b612b0a613222565b825182811115612b18578485fd5b612b248782860161276f565b825250612b3360208401612390565b6020820152604083015182811115612b49578485fd5b612b55878286016123ec565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115612b8a578485fd5b612b96878286016123ec565b60c08301525060e083015182811115612bad578485fd5b612bb9878286016125eb565b60e083015250610100612bce878286016124f5565b90820152610140612be1878583016126c1565b6101208301526101c084015183811115612bf9578586fd5b612c05888287016125eb565b828401525050612c19866101e08501612480565b61016082015295945050505050565b600080600060608486031215612c3c578081fd5b612c45846127d3565b9250612c53602085016127d3565b9150604084015163ffffffff81168114612c6b578182fd5b809150509250925092565b600060208284031215612c87578081fd5b5035919050565b600060208284031215612c9f578081fd5b5051919050565b60008060408385031215612cb8578182fd5b50508035926020909101359150565b60048110612ce557634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452612d018160208601602086016132f3565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452612d466080850182612ce9565b905060208301518482036020860152612d5f8282612ce9565b91505060408301516040850152606083015160608501528091505092915050565b80518252602081015160208301526040810151151560408301526060810151151560608301525050565b6000815160808452612dbf6080850182612ce9565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60006102408251818552612dff82860182612daa565b9150506020830151612e146020860182612cc7565b5060408301518482036040860152612e2c8282612ce9565b915050606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152612e648282612ce9565b91505060e083015184820360e0860152612e7e8282612d31565b91505061010080840151612e9e8287018280518252602090810151910152565b5050610120830151610140612eb581870183612d80565b8401518583036101c08701529050612ecd8282612d31565b915050610160830151612ee46101e0860182612d15565b509392505050565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604060208201819052600090611c5e90830184612de9565b6001600160a01b03929092168252602082015260400190565b608081526000612f506080830187612ce9565b6001600160a01b0395861660208401529390941660408201526060015292915050565b606081526000612f866060830186612ce9565b6001600160a01b03851660208401528281036040840152612fa78185612ce9565b9695505050505050565b606081526000612fc46060830186612ce9565b6001600160a01b039490941660208301525060400152919050565b608081526000612ff26080830187612ce9565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60408152600061302a6040830185612ce9565b90508260208301529392505050565b60608152600061304c6060830186612ce9565b60208301949094525060400152919050565b6020808252600e908201526d2737ba1032b737bab3b41021272160911b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b610240815260006130d061024083018f612daa565b6130dd602084018f612cc7565b82810360408401526130ef818e612ce9565b90508b60608401528a60808401528960a084015282810360c0840152613115818a612ce9565b905082810360e08401526131298189612d31565b87516101008501526020880151610120850152905061314c610140840187612d80565b8281036101c084015261315f8186612d31565b9150506131706101e0830184612d15565b9d9c50505050505050505050505050565b6020815260006119186020830184612de9565b604051606081016001600160401b03811182821017156131b6576131b6613390565b60405290565b604080519081016001600160401b03811182821017156131b6576131b6613390565b604051602081016001600160401b03811182821017156131b6576131b6613390565b604051608081016001600160401b03811182821017156131b6576131b6613390565b60405161018081016001600160401b03811182821017156131b6576131b6613390565b604051601f8201601f191681016001600160401b038111828210171561326d5761326d613390565b604052919050565b60006001600160401b0382111561328e5761328e613390565b50601f01601f191660200190565b600082198211156132af576132af61337a565b500190565b6000826132cf57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156132ee576132ee61337a565b500290565b60005b8381101561330e5781810151838201526020016132f6565b838111156116a05750506000910152565b600181811c9082168061333357607f821691505b6020821081141561335457634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff8114156133715761337161337a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461157757600080fd5b801515811461157757600080fd5b6004811061157757600080fdfea26469706673582212204f4c067199c2fc1a9e57dd07908300a3111c0c3c0fafd900efa28b8c549ac68364736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1426,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14638,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropIDs",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)3922_storage"
      },
      {
        "astId": 14702,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "drops",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14706,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "dropAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14711,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Token)24622_storage)"
      },
      {
        "astId": 14713,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "namePrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14716,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "media",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMedia)24547"
      },
      {
        "astId": 14719,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "zoo",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)2278"
      },
      {
        "astId": 14722,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "pair",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUniswapV2Pair)26393"
      },
      {
        "astId": 14724,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "bridge",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 14726,
        "contract": "src/ZooKeeper.sol:ZooKeeper",
        "label": "unlocked",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2278": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMedia)24547": {
        "encoding": "inplace",
        "label": "contract IMedia",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)26393": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_enum(Type)24558": {
        "encoding": "inplace",
        "label": "enum IZoo.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Token)24622_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IZoo.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)24622_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BidShares)24035_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.BidShares",
        "members": [
          {
            "astId": 24028,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "prevOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(D256)7699_storage"
          },
          {
            "astId": 24031,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(D256)7699_storage"
          },
          {
            "astId": 24034,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(D256)7699_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Breed)24572_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Breed",
        "members": [
          {
            "astId": 24569,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24571,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3922_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3921,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(D256)7699_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.D256",
        "members": [
          {
            "astId": 7698,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MediaData)24305_storage": {
        "encoding": "inplace",
        "label": "struct IMedia.MediaData",
        "members": [
          {
            "astId": 24298,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24300,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 24302,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 24304,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "metadataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Meta)24590_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Meta",
        "members": [
          {
            "astId": 24583,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "eggID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24585,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "dropID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24587,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "burned",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 24589,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "swapped",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Parents)24581_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Parents",
        "members": [
          {
            "astId": 24574,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalA",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24576,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "animalB",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 24578,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24580,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "tokenB",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rarity)24567_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Rarity",
        "members": [
          {
            "astId": 24560,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 24562,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "probability",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24564,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "yields",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24566,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "boost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)24622_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Token",
        "members": [
          {
            "astId": 24593,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "rarity",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Rarity)24567_storage"
          },
          {
            "astId": 24596,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "kind",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Type)24558"
          },
          {
            "astId": 24598,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 24600,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "id",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24602,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 24604,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "birthday",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 24606,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "customName",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 24609,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "parents",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Parents)24581_storage"
          },
          {
            "astId": 24612,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "breed",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(Breed)24572_storage"
          },
          {
            "astId": 24615,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "meta",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(Meta)24590_storage"
          },
          {
            "astId": 24618,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "data",
            "offset": 0,
            "slot": "19",
            "type": "t_struct(MediaData)24305_storage"
          },
          {
            "astId": 24621,
            "contract": "src/ZooKeeper.sol:ZooKeeper",
            "label": "bidShares",
            "offset": 0,
            "slot": "23",
            "type": "t_struct(BidShares)24035_storage"
          }
        ],
        "numberOfBytes": "832"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}