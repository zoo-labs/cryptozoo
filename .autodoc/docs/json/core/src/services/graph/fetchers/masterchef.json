{
  "fileName": "masterchef.ts",
  "filePath": "core/src/services/graph/fetchers/masterchef.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/services/graph/fetchers/masterchef.ts",
  "summary": "This code provides a set of functions for interacting with the subgraphs of the SushiSwap decentralized exchange on various blockchains. The subgraphs are used to query data from the blockchain and return it in a structured format. \n\nThe code imports a set of queries from a separate file, which are used to retrieve data from the subgraphs. It also imports a set of constants and functions from other files, including `ChainId` from the `@zoolabs/zdk` library, `GRAPH_HOST` from a `constants` file, and `getTokenSubset` from an `exchange` file. \n\nThe code defines a set of constants for the different subgraphs that can be queried, including `MINICHEF`, `MASTERCHEF_V2`, and `MASTERCHEF_V1`. Each of these constants is an object that maps a `ChainId` to a subgraph name. \n\nThe code defines a set of functions for querying the subgraphs, including `miniChef`, `masterChefV2`, and `masterChefV1`. Each of these functions takes a `query` parameter, which is a GraphQL query string, and an optional `chainId` parameter, which specifies the blockchain to query. The functions use the `request` function from the `graphql-request` library to send a request to the subgraph and return the result. \n\nThe code defines a set of functions for retrieving data from the subgraphs, including `getMasterChefV1TotalAllocPoint`, `getMasterChefV1SushiPerBlock`, `getMasterChefV1Farms`, `getMasterChefV1PairAddreses`, `getMasterChefV2Farms`, `getMasterChefV2PairAddreses`, `getMiniChefFarms`, and `getMiniChefPairAddreses`. Each of these functions calls the corresponding query function with the appropriate query string and returns the relevant data from the result. \n\nOverall, this code provides a set of tools for querying and retrieving data from the SushiSwap subgraphs on various blockchains. These tools can be used by other parts of the larger project to retrieve data about farms, pools, and other aspects of the decentralized exchange. \n\nExample usage:\n\n```\nimport { getMasterChefV1Farms } from 'zoo'\n\nconst farms = await getMasterChefV1Farms()\nconsole.log(farms)\n// Output: [{ id: '0x...', ... }, { id: '0x...', ... }, ...]\n```",
  "questions": "1. What is the purpose of the `zoo` project and how does this code fit into it?\n- This code provides functions for querying data from subgraphs related to SushiSwap's MasterChef and MiniChef contracts on various blockchains. It is likely part of a larger project related to analyzing or interacting with these contracts.\n\n2. What is the difference between `getMasterChefV1Farms` and `getMasterChefV1PairAddreses`?\n- `getMasterChefV1Farms` returns an array of objects representing the pools in the MasterChef contract, while `getMasterChefV1PairAddreses` returns an array of strings representing the addresses of the pairs in those pools.\n\n3. What is the purpose of the `getTokenSubset` function and where is it defined?\n- `getTokenSubset` is not defined in this file, but is likely defined in the `exchange.js` file imported on line 5. It appears to be a function for querying token data from a blockchain, and is used in `getMasterChefV2Farms` to retrieve information about the reward tokens for each pool.",
  "checksum": "ba50d7c5fdf96d0055e2ebcc6c5e51aa"
}