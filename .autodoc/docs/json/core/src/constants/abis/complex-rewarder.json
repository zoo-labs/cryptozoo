{
  "fileName": "complex-rewarder.json",
  "filePath": "core/src/constants/abis/complex-rewarder.json",
  "url": "zoo-labs/zoo/blob/master/core/src/constants/abis/complex-rewarder.json",
  "summary": "This code defines a set of constructors, events, and functions for a smart contract that manages a pool of rewards for a decentralized finance (DeFi) project called \"zoo\". The contract is designed to distribute rewards to users who provide liquidity to the project's pools.\n\nThe constructor takes three inputs: the address of the reward token, the amount of reward tokens to be distributed per second, and the address of the project's MasterChef V2 contract. The contract emits an event called \"LogInit\" when it is initialized.\n\nThe contract also defines several events that are emitted during various operations. These events include \"LogOnReward\", which is emitted when a user receives a reward, \"LogPoolAddition\", which is emitted when a new pool is added to the contract, and \"LogUpdatePool\", which is emitted when a pool is updated.\n\nThe contract also defines several functions that can be called by users or other contracts. These functions include \"add\", which adds a new pool to the contract, \"massUpdatePools\", which updates all pools in the contract, and \"set\", which updates the allocation points for a specific pool.\n\nOne important function is \"onSushiReward\", which is called by the MasterChef V2 contract when a user earns a reward. This function updates the user's reward debt and emits a \"LogOnReward\" event.\n\nAnother important function is \"updatePool\", which updates the reward distribution for a specific pool. This function calculates the amount of rewards that have been earned since the last update and distributes them to the pool's users.\n\nOverall, this contract is an essential component of the zoo DeFi project, as it manages the distribution of rewards to users who provide liquidity to the project's pools. Developers working on the project can use this contract to add new pools, update reward allocations, and distribute rewards to users.",
  "questions": "1. What is the purpose of this code and what does it do?\n   - This code defines a contract for a reward distribution system for a decentralized application. It includes functions for adding and updating reward pools, distributing rewards to users, and transferring ownership of the contract.\n2. What types of inputs and outputs are used in this code?\n   - The inputs and outputs include various data types such as addresses, uint256 integers, and structs. The functions have different state mutability, with some being nonpayable and others being view-only.\n3. What events are emitted by this code and what information do they provide?\n   - This code emits several events, including LogInit, LogOnReward, LogPoolAddition, LogRewardPerSecond, LogSetPool, LogUpdatePool, and OwnershipTransferred. These events provide information about the initialization of the contract, reward distribution to users, addition and modification of reward pools, and ownership transfers.",
  "checksum": "aafecd64a297fa90e0e365a6e464e34e"
}