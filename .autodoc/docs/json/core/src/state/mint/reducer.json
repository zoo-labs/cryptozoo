{
  "fileName": "reducer.ts",
  "filePath": "core/src/state/mint/reducer.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/state/mint/reducer.ts",
  "summary": "This code defines a Redux reducer for the `MintState` slice of the store in the `zoo` project. The `MintState` interface defines the shape of the state object, which has three properties: `independentField`, `typedValue`, and `otherTypedValue`. The `createReducer` function from the `@reduxjs/toolkit` package is used to create the reducer function, which takes an initial state object and a \"builder\" function that defines how the state should be updated in response to different actions.\n\nThe `resetMintState` action resets the state to the initial state, and the `typeInput` action updates the state based on the `field`, `typedValue`, and `noLiquidity` payload properties. If `noLiquidity` is true, it means that there is no liquidity for the selected currency pair, so the user is typing into the field they last typed in. If the `field` matches the current `independentField`, the `typedValue` is updated for that field. Otherwise, the `otherTypedValue` property is updated with the previous `typedValue`, and the `independentField` and `typedValue` properties are updated for the new field.\n\nThis reducer can be used in the `zoo` project to manage the state of the minting feature, which allows users to create new tokens by providing liquidity to a currency pair. The `MintState` slice of the store tracks the user's input for the minting process, including the selected currency pair and the amount of tokens to mint. The `typeInput` action is dispatched whenever the user types into one of the input fields, and the reducer updates the state accordingly. The `resetMintState` action can be dispatched to reset the state when the user cancels the minting process. \n\nExample usage:\n\n```typescript\nimport { createStore } from 'redux'\nimport mintReducer, { MintState, resetMintState, typeInput, Field } from './mintReducer'\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n}\n\nconst store = createStore(mintReducer, initialState)\n\nstore.dispatch(typeInput({\n  field: Field.CURRENCY_B,\n  typedValue: '100',\n  noLiquidity: false,\n}))\n\nconsole.log(store.getState())\n// Output: { independentField: Field.CURRENCY_B, typedValue: '100', otherTypedValue: '' }\n\nstore.dispatch(resetMintState())\n\nconsole.log(store.getState())\n// Output: { independentField: Field.CURRENCY_A, typedValue: '', otherTypedValue: '' }\n```",
  "questions": "1. What is the purpose of this code and what problem does it solve?\n   - This code is a reducer function for managing state related to a minting feature. It handles resetting the state and updating the state based on user input.\n2. What are the possible values for the `Field` enum and how are they used in this code?\n   - The `Field` enum has at least two possible values, `CURRENCY_A` and `CURRENCY_B`, which represent the two fields that the user can input values into. In this code, the `independentField` property of the state is set to one of these values and is updated based on user input.\n3. What is the purpose of the `noLiquidity` parameter and how does it affect the behavior of the `typeInput` case?\n   - The `noLiquidity` parameter is a boolean value that indicates whether or not there is liquidity available for the selected currency pair. If there is no liquidity, the behavior of the `typeInput` case is different - it stores the value of the previously typed field in the `otherTypedValue` property of the state.",
  "checksum": "0ea09fc2041a0fde726a9b9e9217c2ef"
}