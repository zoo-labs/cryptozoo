{
  "fileName": "useAddTokenToMetaMask.ts",
  "filePath": "core/src/hooks/useAddTokenToMetaMask.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/hooks/useAddTokenToMetaMask.ts",
  "summary": "The code is a custom React hook that allows users to add a new token to their MetaMask wallet. It imports two modules: `Currency` and `Token` from the `@zoolabs/zdk` library, and `useCallback` and `useState` from the `react` library. It also imports two functions from other files: `getCurrencyLogoUrls` from `./../components/CurrencyLogo` and `useActiveWeb3React` from `./useActiveWeb3React`.\n\nThe `useAddTokenToMetaMask` hook takes a `currencyToAdd` parameter, which is an optional `Currency` object. It returns an object with two properties: `addToken` and `success`. `addToken` is a function that, when called, attempts to add the `Token` object wrapped inside the `currencyToAdd` object to the user's MetaMask wallet. `success` is a boolean value that indicates whether the token was successfully added to the wallet.\n\nThe hook first retrieves the current `chainId` and `library` using the `useActiveWeb3React` hook. It then extracts the `Token` object from the `currencyToAdd` object, if it exists. It initializes the `success` state variable to `undefined`.\n\nThe `addToken` function checks if the `library` is available, if the provider is MetaMask, and if the `Token` object exists. If all conditions are met, it calls the `wallet_watchAsset` method on the provider with an object containing the token's address, symbol, decimals, and image. If the method call is successful, it sets the `success` state variable to `true`. If it fails, it sets `success` to `false`. If any of the conditions are not met, it sets `success` to `false`.\n\nThis hook can be used in a larger project that involves interacting with the Ethereum blockchain and MetaMask wallet. For example, it can be used in a decentralized exchange application to allow users to add new tokens to their wallets before trading them. Here is an example usage of the hook:\n\n```\nimport { Currency, Token } from '@zoolabs/zdk'\nimport useAddTokenToMetaMask from './useAddTokenToMetaMask'\n\nfunction AddTokenButton({ currencyToAdd }) {\n  const { addToken, success } = useAddTokenToMetaMask(currencyToAdd)\n\n  return (\n    <button onClick={addToken}>\n      Add {currencyToAdd?.wrapped?.symbol} to MetaMask\n      {success === true && <span> ✓</span>}\n      {success === false && <span> ✕</span>}\n    </button>\n  )\n}\n```\n\nIn this example, the `AddTokenButton` component takes a `currencyToAdd` prop, which is a `Currency` object. It uses the `useAddTokenToMetaMask` hook to get the `addToken` function and `success` state variable. It renders a button that calls `addToken` when clicked. It also displays a checkmark or an X mark depending on the value of `success`.",
  "questions": "1. What is the purpose of this code?\n   - This code defines a custom hook called `useAddTokenToMetaMask` that adds a token to the user's MetaMask wallet.\n2. What dependencies does this code have?\n   - This code imports `Currency` and `Token` from the `@zoolabs/zdk` library, as well as `useCallback` and `useState` from `react`. It also imports `getCurrencyLogoUrls` and `useActiveWeb3React` from local files.\n3. What parameters does the `useAddTokenToMetaMask` hook take?\n   - The `useAddTokenToMetaMask` hook takes a single parameter called `currencyToAdd`, which is either a `Currency` or `undefined`.",
  "checksum": "ee7ff6252f4b5a3c71ff3a4ce0f2bc49"
}