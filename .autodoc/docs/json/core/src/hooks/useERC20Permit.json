{
  "fileName": "useERC20Permit.ts",
  "filePath": "core/src/hooks/useERC20Permit.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/hooks/useERC20Permit.ts",
  "summary": "The code is a TypeScript module that exports three functions: `useERC20Permit`, `useV2LiquidityTokenPermit`, and `useERC20PermitFromTrade`. The module imports several dependencies, including `@zoolabs/zdk`, `react`, and `@ethersproject/bytes`. \n\nThe `useERC20Permit` function is a React hook that returns an object with three properties: `state`, `signatureData`, and `gatherPermitSignature`. The function takes three arguments: `currencyAmount`, `spender`, and `overridePermitInfo`. The `currencyAmount` argument is an object that represents the amount of a currency to be approved for spending. The `spender` argument is a string that represents the Ethereum address of the account that will be allowed to spend the approved currency. The `overridePermitInfo` argument is an optional object that provides additional information about the permit. \n\nThe `useV2LiquidityTokenPermit` function is a wrapper around `useERC20Permit` that provides default values for the `overridePermitInfo` argument. \n\nThe `useERC20PermitFromTrade` function is a helper function that takes a `V2Trade` object and an allowed slippage percentage as arguments. The function returns the result of calling `useERC20Permit` with the maximum amount of currency that can be spent in the trade and the `spender` argument set to the trade object. \n\nThe module also defines several constants, interfaces, and types, including `PermitType`, `PERMIT_VALIDITY_BUFFER`, `PermitInfo`, `PERMITTABLE_TOKENS`, `UseERC20PermitState`, `BaseSignatureData`, `StandardSignatureData`, `AllowedSignatureData`, `SignatureData`, `EIP712_DOMAIN_TYPE`, `EIP712_DOMAIN_TYPE_NO_VERSION`, `EIP2612_TYPE`, and `PERMIT_ALLOWED_TYPE`. \n\nThe `PERMITTABLE_TOKENS` object is a mapping of Ethereum chain IDs to objects that map token addresses to `PermitInfo` objects. The `PermitInfo` object contains information about the type of permit required for the token, such as the name of the token and the version of the permit. \n\nThe `useERC20Permit` function uses the `useActiveWeb3React` hook to get the current Ethereum account and chain ID. It then uses the `useEIP2612Contract` hook to get the contract object for the token. The function also uses the `useIsArgentWallet` hook to determine if the user is using an Argent wallet. \n\nThe function then checks if all the required arguments are present and returns an object with `state` set to `NOT_APPLICABLE` if any of the arguments are missing. If the required arguments are present, the function checks if the token supports the permit type required by the `PermitInfo` object. If the token does not support the permit type, the function returns an object with `state` set to `NOT_APPLICABLE`. \n\nIf the token supports the permit type, the function gets the nonce for the token and checks if it is valid. If the nonce is not valid, the function returns an object with `state` set to `LOADING`. If the nonce is valid, the function checks if the signature data is valid. If the signature data is valid, the function returns an object with `state` set to `SIGNED`. If the signature data is not valid, the function returns an object with `state` set to `NOT_SIGNED`. \n\nIf the signature data is not valid, the function returns an object with `gatherPermitSignature` set to a function that gathers the permit signature. The function uses the `eth_signTypedData_v4` method to sign the permit data and sets the `signatureData` object with the signed data. \n\nOverall, this module provides a set of functions that can be used to generate permit signatures for ERC20 tokens. These functions are designed to be used in a React application and rely on several hooks to interact with the Ethereum blockchain.",
  "questions": "1. What is the purpose of the `useERC20Permit` function and how is it used?\n   \n   The `useERC20Permit` function is used to generate a permit signature for a given ERC20 token and spender. It takes in a `currencyAmount` and `spender` as arguments, and returns an object with `signatureData`, `state`, and `gatherPermitSignature` properties. The `signatureData` property contains the permit signature data, the `state` property indicates whether the permit has been signed or not, and the `gatherPermitSignature` property is a function that can be called to initiate the permit signature process.\n\n2. What is the purpose of the `PERMITTABLE_TOKENS` object and how is it used?\n   \n   The `PERMITTABLE_TOKENS` object is a mapping of token addresses to permit information for various chains. It is used to determine whether a given token is permit-enabled and what type of permit is required. The `useERC20Permit` function uses this object to determine the permit information for a given token.\n\n3. What is the purpose of the `useV2LiquidityTokenPermit` function and how is it used?\n   \n   The `useV2LiquidityTokenPermit` function is a specialized version of the `useERC20Permit` function that is used specifically for removing liquidity from a Uniswap V2 pool. It takes in a `liquidityAmount` and `spender` as arguments, and returns an object with `signatureData`, `state`, and `gatherPermitSignature` properties. The `signatureData` property contains the permit signature data, the `state` property indicates whether the permit has been signed or not, and the `gatherPermitSignature` property is a function that can be called to initiate the permit signature process.",
  "checksum": "a168218b8f82e9459a7c4c9bac3508b5"
}