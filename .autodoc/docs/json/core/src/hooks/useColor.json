{
  "fileName": "useColor.ts",
  "filePath": "core/src/hooks/useColor.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/hooks/useColor.ts",
  "summary": "This code defines two React hooks, `useColor` and `useListColor`, that are used to determine the dominant color of an image. The hooks use the `Vibrant` library to extract the color palette of an image and return the hex code of the most vibrant color. \n\nThe `getColorFromToken` function is used to extract the color of a token logo. It takes a `Token` object as input and returns a promise that resolves to a hex code string or null. If the token is on the Rinkeby network and has a specific address, the function returns a pre-defined hex code. Otherwise, it constructs a URL to the token's logo image and uses `Vibrant` to extract the color palette. If a vibrant color is found, the function applies the `shade` function from the `polished` library to the color until it has a minimum contrast score of 3 against white. The function then returns the resulting hex code.\n\nThe `getColorFromUriPath` function is used to extract the color of an image from a URI. It takes a URI string as input and returns a promise that resolves to a hex code string or null. The function first converts the URI to an HTTP URL using the `uriToHttp` function from a separate file. It then uses `Vibrant` to extract the color palette of the image and returns the hex code of the most vibrant color.\n\nThe `useColor` hook takes a `Token` object as input and returns the dominant color of the token's logo image. It initializes the color state to `#0094ec` and uses `useLayoutEffect` to asynchronously fetch the color from the token's logo image. If the token is not null and a color is found, the hook updates the color state with the new value. If the token is null or the component is unmounted before the color is fetched, the hook sets the color state back to `#0094ec`.\n\nThe `useListColor` hook takes a URI string as input and returns the dominant color of the image at the URI. It initializes the color state to `#0094ec` and uses `useLayoutEffect` to asynchronously fetch the color from the image. If the URI is not null and a color is found, the hook updates the color state with the new value. If the URI is null or the component is unmounted before the color is fetched, the hook sets the color state back to `#0094ec`.\n\nThese hooks can be used in the larger project to dynamically set the color of components based on the dominant color of an image. For example, the `useColor` hook could be used to set the background color of a token card to the dominant color of the token's logo image. The `useListColor` hook could be used to set the background color of a list item to the dominant color of the item's image.",
  "questions": "1. What is the purpose of the `getColorFromToken` function?\n- The `getColorFromToken` function takes a `Token` object and returns a promise that resolves to a string representing the color of the token's logo image.\n\n2. What is the purpose of the `useColor` function?\n- The `useColor` function is a React hook that takes a `Token` object and returns a color string based on the logo image of the token. It uses the `getColorFromToken` function internally.\n\n3. What is the purpose of the `useListColor` function?\n- The `useListColor` function is another React hook that takes a URI string representing an image and returns a color string based on the image. It uses the `getColorFromUriPath` function internally.",
  "checksum": "94517330da909a4c3dbc47ac178a460c"
}