{
  "fileName": "types.ts",
  "filePath": "core/src/components/Toast/types.ts",
  "url": "zoo-labs/zoo/blob/master/core/src/components/Toast/types.ts",
  "summary": "This code defines a set of interfaces and types related to displaying toast notifications in a web application. Toast notifications are small messages that appear on the screen to provide feedback or alerts to the user. \n\nThe `types` object defines three different types of toast notifications: DANGER, WARNING, and INFO. These types are represented as strings that can be used to style the toast notification appropriately. \n\nThe `Types` type is a union type that represents all possible values of the `types` object. This type is used to ensure that the `type` property of the `Toast` interface is always one of the valid types defined in the `types` object. \n\nThe `ToastAction` interface defines the structure of an action that can be associated with a toast notification. This includes a `text` property that describes the action and a `url` property that specifies the URL to navigate to when the action is clicked. \n\nThe `Toast` interface defines the structure of a toast notification. Each toast has an `id` property that uniquely identifies it, a `type` property that specifies the type of the toast (using one of the values from the `types` object), a `title` property that provides a short description of the toast, an optional `description` property that provides additional information, and an optional `action` property that specifies an action associated with the toast. \n\nThe `ToastContainerProps` interface defines the properties that can be passed to a component that displays a collection of toast notifications. This includes an array of `toasts` to display, a `stackSpacing` property that specifies the spacing between stacked toasts, a `ttl` property that specifies the time-to-live (in milliseconds) for each toast, and an `onRemove` callback function that is called when a toast is dismissed. \n\nThe `ToastProps` interface defines the properties that can be passed to a component that displays a single toast notification. This includes the `toast` object to display, the `onRemove` callback function, the `ttl` property, and a `style` property that can be used to apply custom styles to the toast. \n\nOverall, this code provides a set of interfaces and types that can be used to define and display toast notifications in a web application. By using these interfaces and types, developers can ensure that their toast notifications are consistent and easy to manage. \n\nExample usage:\n\n```typescript\nimport { Toast, ToastContainerProps, ToastProps } from 'zoo';\n\nconst toasts: Toast[] = [\n  {\n    id: '1',\n    type: 'warning',\n    title: 'Warning!',\n    description: 'Something went wrong.',\n    action: {\n      text: 'Retry',\n      url: '/retry',\n    },\n  },\n  {\n    id: '2',\n    type: 'info',\n    title: 'Information',\n    description: 'Your changes have been saved.',\n  },\n];\n\nfunction handleRemove(id: string) {\n  // Remove the toast with the specified ID\n}\n\nfunction renderToast(toast: Toast) {\n  return (\n    <ToastProps\n      toast={toast}\n      onRemove={handleRemove}\n      ttl={5000}\n      style={{ backgroundColor: 'white' }}\n    />\n  );\n}\n\nfunction renderToastContainer() {\n  return (\n    <ToastContainerProps\n      toasts={toasts}\n      stackSpacing={10}\n      ttl={5000}\n      onRemove={handleRemove}\n    >\n      {toasts.map(renderToast)}\n    </ToastContainerProps>\n  );\n}\n```",
  "questions": "1. What are the different types of toasts that can be displayed?\n- The different types of toasts that can be displayed are DANGER, WARNING, and INFO.\n\n2. What is the purpose of the `ToastContainerProps` interface?\n- The `ToastContainerProps` interface is used to define the props that are passed to the `ToastContainer` component, including the array of `toasts`, `stackSpacing`, `ttl`, and `onRemove` function.\n\n3. What is the relationship between `ToastProps` and `ToastContainerProps`?\n- `ToastProps` extends `ToastContainerProps` and adds additional props specific to an individual toast, such as `toast`, `ttl`, and `style`.",
  "checksum": "dc34573ab37dc334556dfbdf12344d62"
}