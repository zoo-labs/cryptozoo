{
  "fileName": "AssetSale.tsx",
  "filePath": "core/src/zoo/AssetSale.tsx",
  "url": "zoo-labs/zoo/blob/master/core/src/zoo/AssetSale.tsx",
  "summary": "The `AssetSale` component is a React component that renders a single asset for sale. It takes in a number of props, including the `dropId`, `name`, `contentURI`, `metadataURI`, `ask`, `formattedAmount`, `usdAmount`, `symbol`, `highest`, `className`, `height`, `width`, `showPrice`, `isOwner`, `autoPlay`, `animate`, `large`, `getUsdAmount`, `onClickBid`, and `onClickTokenType`. \n\nThe component first imports several dependencies, including `React`, `useCallback`, `useEffect`, `useRef`, and `useState` from the `react` package, `Player` from the `react-player` package, `BigintIsh` and `ZERO_ADDRESS` from the `@zoolabs/zdk` package, `getContent` and `useTokenType` from a local `state` module, `Ask`, `Bid`, `GraphBid`, and `HighestBid` from a local `types` module, `useActiveWeb3React` and `useContract` from a local `hooks` module, `EyeIcon` from the `@heroicons/react/solid` package, `shortenAddress` from a local `functions` module, `TimeAgo` from the `react-timeago` package, and `Image` from the `next/image` package.\n\nThe component then defines a type for its props, which includes all of the props listed above, as well as some additional HTML attributes. The component itself is defined as a function that takes in its props as an argument. \n\nWithin the component, several variables are defined using destructuring assignment from the props object, including `account`, `ask`, `highest`, `dropId`, `name`, `showPrice`, `formattedAmount`, `usdAmount`, `symbol`, `getUsdAmount`, and `isOwner`. The `useTokenType` hook is called with `dropId` and `name` as arguments to get information about the token type associated with the asset. The `useState` hook is used to define state variables for `bid` and `tokenType`. The `useContract` hook is called with `\"Drop\"` as an argument to get the contract for the `Drop` smart contract. The `getContent` function is called with `props.contentURI` as an argument to get information about the content associated with the asset. The `shortenAddress` function is used to shorten the address of the highest bidder. \n\nThe component then returns a div that contains the asset for sale. If `props.large` is true and the asset has a video, a `Player` component is rendered with the video as its `url` prop. Otherwise, an `Image` component is rendered with the image as its `src` prop. \n\nBelow the asset, information about the asset is displayed, including its name, the number of tokens that have been minted and sold, and the highest bid (if applicable). If `showPrice` is true and the asset has a formatted amount and symbol, the highest bid is displayed along with the bid amount and the USD amount (if available). If the user is the owner of the asset, an \"Accept Bid\" button is also displayed. \n\nFinally, the component exports the `AssetSale` function as the default export of the module. \n\nOverall, the `AssetSale` component is a reusable component that can be used to display a single asset for sale, along with information about the asset and its current bid status. It can be customized with a variety of props to control its appearance and behavior.",
  "questions": "1. What is the purpose of the `AssetSale` component?\n- The `AssetSale` component is used to display information about an asset for sale, including its name, image or video, sale price, and highest bid.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries and dependencies, including React, react-player, @zoolabs/zdk, @heroicons/react, react-timeago, and next/image.\n\n3. What is the role of the `useActiveWeb3React` and `useContract` hooks?\n- The `useActiveWeb3React` hook is used to access the current user's Ethereum account and provider, while the `useContract` hook is used to interact with Ethereum smart contracts.",
  "checksum": "2f2b22ee9b8ba1aec53325afacd524e5"
}