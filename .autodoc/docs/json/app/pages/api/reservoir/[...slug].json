{
  "fileName": "[...slug].ts",
  "filePath": "app/pages/api/reservoir/[...slug].ts",
  "url": "zoo-labs/zoo/blob/master/app/pages/api/reservoir/[...slug].ts",
  "summary": "This code defines an API endpoint that acts as a proxy to redirect all requests to `/api/reservoir/*` to the Reservoir API. The endpoint is designed to be used with Next.js, a React-based web framework. The purpose of this code is to provide a secure way to access the Reservoir API without exposing the API key to the client.\n\nThe code imports several modules, including `setParams` from `@reservoir0x/reservoir-sdk`, `NextApiRequest` and `NextApiResponse` from `next`, `supportedChains` and `DefaultChain` from `utils/chains`, `constants` from `ethers`, `mainnet` and `goerli` from `wagmi`, and `wrappedContracts` from `utils/wrappedContracts`.\n\nThe `proxy` function is defined as an async function that takes two arguments, `req` and `res`, which represent the request and response objects, respectively. The function first extracts the `query`, `body`, `method`, and `headers` properties from the `req` object. It then extracts the `slug` property from the `query` object and removes it from the `query` object. The `slug` property is used to construct the endpoint URL.\n\nThe function then determines the chain prefix from the `slug` property and uses it to find the corresponding chain object from the `supportedChains` array. If no chain object is found, the `DefaultChain` object is used. The function then constructs the endpoint URL using the `reservoirBaseUrl` property of the chain object and the endpoint path from the `slug` property. The `setParams` function is used to add the query parameters to the URL.\n\nIf the endpoint path includes the string `redirect/`, the function checks if the endpoint path includes the string `currency` and if the chain ID is either `mainnet` or `goerli`. If so, the function redirects the request to a self-hosted version of the currency icon without any padding. Otherwise, the function redirects the request to the Reservoir API URL.\n\nIf the endpoint path does not include the string `redirect/`, the function constructs the request options object and sets the `x-api-key` header if the chain object has an `apiKey` property. If the `body` property is an object, the function sets the `Content-Type` header to `application/json` and stringifies the `body` object. The function also sets the `x-rkc-version` and `x-rkui-version` headers if they are present in the `reqHeaders` object. The function then sends the request to the Reservoir API URL using the `fetch` function and waits for the response.\n\nIf the response has a `content-type` header that includes `application/json`, the function parses the response body as JSON. Otherwise, the function parses the response body as text. If the response status is not `ok`, the function throws an error. If the `content-type` header includes `image/`, the function sets the `Content-Type` header to `text/html` and sends the response body as a buffer. Otherwise, the function sends the response body as JSON.\n\nThis code can be used in the larger project to provide a secure way to access the Reservoir API without exposing the API key to the client. The `proxy` function can be used as an API endpoint in a Next.js application to redirect requests to the Reservoir API. The function can also be modified to support additional chains or to handle other types of requests.",
  "questions": "1. What is the purpose of this code file?\n   \n   This code file defines a proxy API endpoint that redirects requests to `/api/reservoir/*` to either the mainnet or rinkeby reservoir API endpoints, depending on the chain specified in the request. It also attaches the `x-api-key` header to the request to ensure that the Reservoir API key is not exposed to the client.\n\n2. What external dependencies does this code have?\n   \n   This code file imports several external dependencies, including `@reservoir0x/reservoir-sdk`, `next`, `utils/chains`, `ethers`, `wagmi`, and `utils/wrappedContracts`.\n\n3. What is the purpose of the `proxy` function?\n   \n   The `proxy` function is the main function exported by this code file, and it handles incoming requests to the `/api/reservoir/*` endpoint. It extracts the query, body, method, and headers from the request, determines the chain based on the endpoint, sets the appropriate headers and options for the request, sends the request to the Reservoir API endpoint, and returns the response to the client.",
  "checksum": "82f7e2b68f929703a837d701ecd35575"
}