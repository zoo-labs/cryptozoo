{
  "fileName": "Fuse.ts",
  "filePath": "zdk/src/entities/Native/Fuse.ts",
  "url": "zoo-labs/zoo/blob/master/zdk/src/entities/Native/Fuse.ts",
  "summary": "The code above defines a class called `Fuse` that extends another class called `NativeCurrency`. The purpose of this class is to represent the FUSE token on a specific blockchain network. The `NativeCurrency` class is a generic class that represents a native token on a blockchain network. The `Fuse` class is specific to the FUSE token and provides additional functionality.\n\nThe `Fuse` class has a constructor that takes a `chainId` parameter, which is used to identify the blockchain network that the token is on. The constructor also calls the constructor of the `NativeCurrency` class with the `chainId`, a decimal value of 18, a symbol of 'FUSE', and a name of 'Fuse'. This sets up the basic properties of the `Fuse` token.\n\nThe `Fuse` class also has a method called `wrapped` that returns a `Token` object. This method retrieves the wrapped version of the FUSE token on the current blockchain network. The `wrapped` method uses a constant called `WNATIVE` that is imported from another file. The `WNATIVE` constant is an object that maps blockchain network IDs to the wrapped version of the native token on that network. The `wrapped` method uses the `chainId` property of the `Fuse` object to retrieve the wrapped token from the `WNATIVE` object. If the wrapped token is not found, the `invariant` function is called with an error message of 'WRAPPED'. The `invariant` function is a utility function that throws an error if the condition passed to it is false.\n\nThe `Fuse` class also has a static property called `_cache` that is an object that maps blockchain network IDs to `Fuse` objects. This property is used to cache instances of the `Fuse` class so that they can be reused later. The `Fuse` class has a static method called `onChain` that takes a `chainId` parameter and returns a `Fuse` object for that blockchain network. The `onChain` method checks if a `Fuse` object for the specified `chainId` already exists in the `_cache` object. If it does, the existing object is returned. If it does not, a new `Fuse` object is created for the `chainId` and added to the `_cache` object before being returned.\n\nFinally, the `Fuse` class has a method called `equals` that takes a `Currency` object and returns a boolean value indicating whether the `Currency` object is equal to the `Fuse` object. The `equals` method checks if the `Currency` object is a native token on the same blockchain network as the `Fuse` object by checking if it has a `isNative` property that is true and a `chainId` property that matches the `chainId` property of the `Fuse` object.\n\nOverall, the `Fuse` class provides a way to represent the FUSE token on a specific blockchain network and provides additional functionality for working with the token, such as retrieving the wrapped version of the token and caching instances of the class for reuse. This class is likely used in conjunction with other classes and functions in the larger project to interact with the FUSE token on various blockchain networks. \n\nExample usage:\n\n```\nimport { Fuse } from 'zoo'\n\nconst fuseOnChain1 = Fuse.onChain(1) // creates a new Fuse object for chain ID 1 and caches it\nconst fuseOnChain2 = Fuse.onChain(2) // creates a new Fuse object for chain ID 2 and caches it\nconst wrappedFuseOnChain1 = fuseOnChain1.wrapped // retrieves the wrapped version of the FUSE token on chain ID 1\nconst isFuseOnChain1 = fuseOnChain1.equals(wrappedFuseOnChain1) // returns true since wrappedFuseOnChain1 is a native token on chain ID 1\nconst isFuseOnChain2 = fuseOnChain1.equals(fuseOnChain2) // returns false since fuseOnChain2 is a different instance of the Fuse class with a different chain ID\n```",
  "questions": "1. What is the purpose of the `Fuse` class and how is it related to the `NativeCurrency` and `Token` classes?\n- The `Fuse` class extends the `NativeCurrency` class and represents the native currency of the Fuse network. It also has a `wrapped` method that returns a `Token` object representing the wrapped version of the native currency.\n2. What is the significance of the `chainId` parameter in the constructor and how is it used?\n- The `chainId` parameter is used to set the `chainId` property of the `NativeCurrency` class, which is used to identify the network that the currency belongs to.\n3. What is the purpose of the `_cache` property and how is it used in the `onChain` method?\n- The `_cache` property is a static object that stores instances of the `Fuse` class for each `chainId`. The `onChain` method checks if an instance for the given `chainId` already exists in the cache and returns it if it does, otherwise it creates a new instance and adds it to the cache. This helps to avoid creating multiple instances of the same currency object.",
  "checksum": "f6e4556c973cc5a233dad3222b2ba4ce"
}