{
  "fileName": "EGGDrop.sol",
  "filePath": "contracts/src/EGGDrop.sol",
  "url": "zoo-labs/zoo/blob/master/contracts/src/EGGDrop.sol",
  "summary": "The `DropEggs` contract is a smart contract that allows for the airdropping of eggs to whitelisted addresses. The contract is part of the larger zoo project and is used to distribute eggs to users who have been whitelisted by the contract owner. The contract is written in Solidity and is compatible with version 0.8.4 or higher.\n\nThe contract imports several libraries and interfaces from the OpenZeppelin library, including `SafeMath`, `Ownable`, and `Counters`. The `SafeMath` library is used to perform arithmetic operations safely, while the `Ownable` library is used to restrict access to certain functions to the contract owner. The `Counters` library is used to keep track of the number of whitelisted addresses.\n\nThe contract has several state variables, including `whitelistedCount`, `zooKeeperDropId`, `maxEggForSublime`, `keeperAddress`, and `dropAddress`. The `whitelistedCount` variable is used to keep track of the number of whitelisted addresses, while the `zooKeeperDropId` variable is used to specify the ID of the zookeeper drop. The `maxEggForSublime` variable is used to specify the maximum number of eggs that can be minted for a single address. The `keeperAddress` and `dropAddress` variables are used to store the addresses of the zookeeper and drop contracts, respectively.\n\nThe contract has several functions, including `configureDropAddress`, `configureKeeperAddress`, `addressAllowedToMint`, `changeZookeeperDropId`, `changeMaxEggForSublime`, and `AirdropEggs`. The `configureDropAddress` and `configureKeeperAddress` functions are used to set the addresses of the drop and zookeeper contracts, respectively. The `addressAllowedToMint` function is used to retrieve the number of eggs that a whitelisted address is allowed to mint. The `changeZookeeperDropId` and `changeMaxEggForSublime` functions are used to change the ID of the zookeeper drop and the maximum number of eggs that can be minted for a single address, respectively.\n\nThe `AirdropEggs` function is the main function of the contract and is used to airdrop eggs to whitelisted addresses. The function takes two arrays as input: an array of addresses and an array of the number of eggs that each address is allowed to mint. The function first checks that the arrays are of equal length and that the total number of eggs to be minted is not zero. It then loops through the addresses and mints the specified number of eggs for each address. If the number of eggs to be minted for an address is greater than or equal to the `maxEggForSublime` variable, the `changeRandomLimit` function of the drop contract is called with a parameter of 4. This function changes the random limit of the drop contract to 4, which increases the chances of minting a rare egg. The function then loops through the number of eggs to be minted for the address and mints each egg by calling the `dropEggs` function of the zookeeper contract. If the number of eggs to be minted for an address is less than the `maxEggForSublime` variable, the `changeRandomLimit` function of the drop contract is called with a parameter of 3, which sets the random limit back to its default value.\n\nIn summary, the `DropEggs` contract is a smart contract that is used to airdrop eggs to whitelisted addresses. The contract is part of the larger zoo project and is written in Solidity. The contract imports several libraries and interfaces from the OpenZeppelin library and has several state variables and functions. The main function of the contract is the `AirdropEggs` function, which is used to airdrop eggs to whitelisted addresses.",
  "questions": "1. What is the purpose of this contract and what does it do?\n- This contract is called DropEggs and it is used to airdrop eggs to whitelisted addresses. It also has functions to configure the drop and keeper addresses, change the zookeeper drop ID, and change the maximum number of eggs that can be minted for a sublime address.\n\n2. What are the external contracts that this contract interacts with?\n- This contract imports SafeMath, Ownable, IDrop, and Counters from OpenZeppelin and IKeeper from an external interface. It also interacts with the IDrop and IKeeper contracts in the AirdropEggs function.\n\n3. What is the purpose of the whitelisted mapping and how is it used?\n- The whitelisted mapping is used to keep track of the number of eggs that each whitelisted address is allowed to mint. It is used in the AirdropEggs function to loop through the addresses and mint the appropriate number of eggs for each address.",
  "checksum": "22b82f4767c36a392749e78c51db9d5f"
}