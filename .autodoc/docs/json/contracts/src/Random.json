{
  "fileName": "Random.sol",
  "filePath": "contracts/src/Random.sol",
  "url": "zoo-labs/zoo/blob/master/contracts/src/Random.sol",
  "summary": "The `Random` contract is a smart contract that allows users to commit to a hash value and later reveal it to generate a random number. The contract is designed to be used in a larger project, such as a game or a lottery, where a random number is required to determine the outcome.\n\nThe contract has a `max` variable that is set to 100 by default. This variable determines the maximum value of the random number that can be generated. The contract has a `Commit` struct that stores the hash value, block number, and reveal status of each user's commitment. The `commits` mapping is used to store the `Commit` struct for each user.\n\nThe `commit` function allows users to commit to a hash value by calling the function with the `dataHash` parameter. The function stores the `dataHash` value, the current block number, and sets the reveal status to false in the `commits` mapping for the user. The function also emits a `CommitHash` event with the user's address, `dataHash`, and block number.\n\nThe `reveal` function allows users to reveal their hash value and generate a random number. The function first checks that the user has not already revealed their hash value. It then checks that the hash value produced by the `getHash` function using the `revealHash` parameter matches the hash value stored in the user's `Commit` struct. The function also checks that the block number of the current block is greater than the block number stored in the user's `Commit` struct and that no more than 250 blocks have passed since the user committed. If all checks pass, the function generates a random number by hashing the block hash of the block that occurred after the user committed with the `revealHash` parameter, converting the resulting hash to a uint256 value, and taking the modulus of the `max` variable. The function then emits a `RevealHash` event with the user's address, `revealHash`, and the generated random number.\n\nThe `getHash` function is a helper function that takes a `data` parameter and returns the hash value of the concatenation of the contract address and the `data` parameter.\n\nThe `revealAnswer` function is similar to the `reveal` function, but it takes an additional `salt` parameter. The function checks that the hash value produced by the `getSaltedHash` function using the `answer` and `salt` parameters matches the hash value stored in the user's `Commit` struct. If all checks pass, the function emits a `RevealAnswer` event with the user's address, `answer`, and `salt`.\n\nThe `getSaltedHash` function is a helper function that takes `data` and `salt` parameters and returns the hash value of the concatenation of the contract address, `data`, and `salt`.\n\nOverall, the `Random` contract provides a secure and transparent way to generate random numbers in a larger project. Users can commit to a hash value and later reveal it to generate a random number, ensuring that the random number is not known beforehand and cannot be manipulated.",
  "questions": "1. What is the purpose of this contract?\n- This contract is for a commit-reveal scheme that generates a random number.\n\n2. What is the significance of the `max` variable?\n- The `max` variable sets the upper limit of the range of the generated random number.\n\n3. What is the difference between the `commit` and `reveal` functions?\n- The `commit` function is used to commit a hash to the blockchain, while the `reveal` function is used to reveal the hash and generate a random number.",
  "checksum": "a34d7cdf6ac847c34e605a0e71a95e95"
}