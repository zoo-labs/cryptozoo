{
  "fileName": "ZooDao.sol",
  "filePath": "contracts/src/ZooDao.sol",
  "url": "zoo-labs/zoo/blob/master/contracts/src/ZooDao.sol",
  "summary": "The `ZOOVoting` contract is a smart contract that enables voting on proposals using the ZOO token. The contract implements the `IVoting` interface and inherits from the `Ownable` contract. The `IVoting` interface defines the functions that must be implemented by the contract to enable voting on proposals. The `Ownable` contract provides the `onlyOwner` modifier that restricts access to certain functions to the contract owner.\n\nThe contract has a state variable `ZOO` of type `IERC20` that represents the ZOO token. The contract also has several mappings that store information about the proposals, voters, and voting amounts. The `coreMember` mapping stores the addresses of core members who have special privileges to create proposals. The `blocked` mapping stores the addresses of users who are blocked from voting. The `proposals` mapping stores information about the proposals, including the proposal type, proposal status, vote count, start time, end time, and votes. The `voters` mapping stores information about the voters, including the proposal, voter address, vote, and timestamp. The `votingAmount` mapping stores the amount of ZOO tokens that each voter has used to vote on each proposal. The `decimals` variable stores the number of decimal places for the ZOO token.\n\nThe contract has a constructor that takes an `IERC20` parameter and initializes the `ZOO` variable with the address of the ZOO token. The constructor also sets the `withdrawAddress` variable to the address of the contract creator and the `proposalFee` variable to 100.\n\nThe contract has several functions that enable the contract owner to manage the contract. The `changeWithdrawAddress` function allows the contract owner to change the `withdrawAddress` variable. The `changeCoinAddress` function allows the contract owner to change the `ZOO` variable. The `proposalFeeAmount` function allows the contract owner to change the `proposalFee` variable. The `blockAddress` function allows the contract owner to block or unblock a user from voting. The `whitelist_as_core` function allows the contract owner to add or remove a user from the list of core members.\n\nThe contract has several functions that enable users to interact with the contract. The `toggleproposingStatus` function allows the contract owner to enable or disable proposal creation. The `getAllProposals` function returns an array of all the proposals. The `getAllVoters` function returns an array of all the voters. The `addProposals` function allows users to create a new proposal. The function checks that the proposal does not already exist, the user is not blocked, and the proposal timeline is valid. If the user is a core member or the contract owner, the proposal type is set to 0, otherwise it is set to 1. The function also transfers the proposal fee from the user to the contract and emits an `addedProposal` event.\n\nThe `updateProposalStatus` function allows the contract owner to update the status of a proposal. The `voteProposal` function allows users to vote on a proposal. The function checks that the user is not blocked, the proposal exists, the proposal is not closed, and the voting timeline is valid. The function also updates the vote count, the voting amount, and the voter information, and transfers the voting amount from the user to the contract. The function emits a `votedProposal` event.\n\nThe `withdraw` function allows the contract owner to withdraw the ZOO tokens from the contract. The function checks that the balance of the contract is greater than 0 and the `withdrawAddress` variable is valid. The function transfers the ZOO tokens to the `withdrawAddress` and emits a `Withdraw` event.\n\nOverall, the `ZOOVoting` contract provides a way for users to create and vote on proposals using the ZOO token. The contract owner has the ability to manage the contract and restrict access to certain functions. The contract can be used in a larger project that requires voting on proposals using a token.",
  "questions": "1. What is the purpose of this contract and what does it do?\n- This contract is called ZOOVoting and it implements the IVoting interface. It allows users to create and vote on proposals, and has functionality for blocking and whitelisting addresses.\n\n2. What are the different mappings used in this contract and what do they do?\n- There are several mappings used in this contract: `coreMember` maps addresses to a boolean indicating whether they are a core member, `blocked` maps addresses to a boolean indicating whether they are blocked, `proposals` maps proposal strings to a Proposal struct, `voters` maps proposal strings to a Voter struct, and `votingAmount` maps addresses and proposal strings to a VotingAmount struct. These mappings are used to keep track of information related to proposals and voters.\n\n3. What is the purpose of the `toggleproposingStatus` function and how is it used?\n- The `toggleproposingStatus` function is used to toggle the `proposingLive` boolean variable between true and false. This variable is used to determine whether users are allowed to create proposals or not. When `proposingLive` is false, users are not allowed to create proposals. This function can only be called by the contract owner.",
  "checksum": "f1e5a705bae35a2eb997c083af8025a7"
}