{
  "fileName": "CancelBidModal.tsx",
  "filePath": "ui/src/modal/cancelBid/CancelBidModal.tsx",
  "url": "zoo-labs/zoo/blob/master/ui/src/modal/cancelBid/CancelBidModal.tsx",
  "summary": "The `CancelBidModal` component is a React modal that allows a user to cancel a bid. It imports several hooks and components from the project's codebase and external libraries. \n\nThe component takes several props, including `openState`, `bidId`, `trigger`, `normalizeRoyalties`, `onClose`, `onCancelComplete`, and `onCancelError`. \n\nThe `useFallbackState` hook is used to set the initial state of the modal to `false` if `openState` is not provided. The `useReservoirClient` hook is used to get the current chain and `useNetwork` hook is used to get the active chain. \n\nThe `CancelBidModalRenderer` component is used to render the modal's content. It takes several props, including `bidId`, `open`, and `normalizeRoyalties`. It returns a function that takes an object with several properties, including `loading`, `bid`, `tokenId`, `cancelStep`, `transactionError`, `stepData`, `totalUsd`, `blockExplorerBaseUrl`, and `cancelOrder`. \n\nThe `useTimeSince` hook is used to calculate the time since the bid's expiration date. The `useEffect` hook is used to call `onCancelComplete` or `onCancelError` when the `cancelStep` or `transactionError` changes. \n\nThe `isBidAvailable` variable is used to determine if the bid is still active and not loading. The `isOracleOrder` variable is used to determine if the bid is an oracle order. \n\nThe modal's content is conditionally rendered based on the `cancelStep` and `isBidAvailable` variables. If the bid is no longer available, a message is displayed. If the bid is available and the `cancelStep` is `Cancel`, the user is prompted to confirm the cancellation. If the `cancelStep` is `Approving`, the user is shown a progress bar while the cancellation is being processed. If the `cancelStep` is `Complete`, a message is displayed to confirm that the bid has been canceled. \n\nThe `CancelBidModal` component can be used in the larger project to allow users to cancel bids. It can be customized using the `CancelBidModalRenderer` component. \n\nExample usage:\n\n```\n<CancelBidModal\n  openState={[isOpen, setIsOpen]}\n  bidId={bidId}\n  trigger={<Button onClick={() => setIsOpen(true)}>Cancel Bid</Button>}\n  normalizeRoyalties={true}\n  onClose={(data, currentStep) => console.log('Modal closed', data, currentStep)}\n  onCancelComplete={(data) => console.log('Bid canceled', data)}\n  onCancelError={(error, data) => console.log('Error canceling bid', error, data)}\n/>\n```",
  "questions": "1. What is the purpose of the `CancelBidModal` component?\n- The `CancelBidModal` component is used to display a modal for canceling a bid.\n\n2. What external libraries or frameworks does this code use?\n- This code uses several external libraries and frameworks, including React, FontAwesomeIcon, and wagmi.\n\n3. What props does the `CancelBidModal` component accept?\n- The `CancelBidModal` component accepts several props, including `openState`, `bidId`, `trigger`, `normalizeRoyalties`, `onClose`, `onCancelComplete`, and `onCancelError`.",
  "checksum": "bca7030dcfc6af1043f7b57142a6c42d"
}