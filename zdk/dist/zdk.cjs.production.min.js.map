{"version":3,"file":"zdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/errors.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/constants/currencyMap.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/constants/index.ts","../src/functions/cache.ts","../src/router.ts","../src/utils/MultiRouterMath.ts","../src/limitorder.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  HARDHAT = 1337,\n  HARDHAT2 = 1338,\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0x9A0D9920D92c178a58D99B455898Df2df22A2eE4',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.MATIC_TESTNET]: '0xc1400d49baa8e307B4462cD46E0a20109D25F50f',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.BSC_TESTNET]: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n\n  /**\n   * Returns token address. Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   */\n  public serialize(): string {\n    return this.wrapped.address\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n  public readonly address: string = '0x0000000000000000000000000000000000000000'\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from '../entities/Token'\nimport { ChainId } from '../enums'\nimport { TokenMap } from '../types/TokenMap'\nimport { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.HARDHAT]: Ether.onChain(ChainId.HARDHAT),\n  [ChainId.HARDHAT2]: Ether.onChain(ChainId.HARDHAT2),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants/numbers'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly twap: boolean\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.twap = twap\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","import { Token, Ether } from '../entities'\nimport { ChainId } from '../enums'\nimport { USDC_ADDRESS, WETH9_ADDRESS, USDT_ADDRESS } from './addresses'\n\nexport enum CurrencySymbol {\n  DAI = 'DAI',\n  ETH = 'ETH',\n  WETH = 'WETH',\n  USDC = 'USDC',\n  USDT = 'USDT',\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const UNDEPLOYED_ADDRESS = ZERO_ADDRESS\n\n// export const AvalancheLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/avax.jpg'\n// export const BinanceCoinLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/bnb.jpg'\nexport const EthLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\nexport const WethLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/weth.jpg'\nexport const UsdcLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdc.jpg'\nexport const UsdtLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdt.jpg'\nexport const DaiLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/dai.jpg'\n// export const xDaiLogo =\n//   'https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/xdai/assets/0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d/logo.svg'\n// export const FantomLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/ftm.jpg'\n// export const HarmonyLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg'\n// export const HecoLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/heco.jpg'\n// export const MaticLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/polygon.jpg'\n// export const MoonbeamLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\n// export const OKExLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/okt.jpg'\n// export const CeloLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/celo.jpg'\n// export const PalmLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/palm.jpg'\n// export const MovrLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/movr.jpg'\n\nexport const CURRENCY_SYMBOL_LOGO = {\n  [CurrencySymbol.DAI]: DaiLogo,\n  [CurrencySymbol.ETH]: EthLogo,\n  [CurrencySymbol.WETH]: WethLogo,\n  [CurrencySymbol.USDC]: UsdcLogo,\n  [CurrencySymbol.USDT]: UsdtLogo,\n}\n\nexport const getCurrencyConstants = (contracts: any) => {\n  const MAINNET_WETH = WETH9_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDC = USDC_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDT = USDT_ADDRESS[ChainId.MAINNET]\n\n  const ROPSTEN_WETH = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDC = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDT = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  const HARDHAT_WETH = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDC = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDT = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  return {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  }\n}\n\nexport const getCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.MAINNET),\n      [MAINNET_USDC]: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      [MAINNET_USDT]: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      [MAINNET_WETH]: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.ROPSTEN),\n      [ROPSTEN_USDC]: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      [ROPSTEN_USDT]: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      [ROPSTEN_WETH]: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.HARDHAT),\n      [HARDHAT_USDC]: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      [HARDHAT_USDT]: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      [HARDHAT_WETH]: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      ETH: Ether.onChain(ChainId.MAINNET),\n      USDC: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      ETH: Ether.onChain(ChainId.ROPSTEN),\n      USDC: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      ETH: Ether.onChain(ChainId.HARDHAT),\n      USDC: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrency = (contracts: any, chainId: ChainId, symbol: CurrencySymbol) => {\n  const map: any = getSymbolCurrencyMap(contracts)\n  const tokensBySymbol = map[chainId]\n  return tokensBySymbol[symbol]\n}\n\nexport const isNativeCurrency = (currency: string) => {\n  return currency === ZERO_ADDRESS\n}","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from '../enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString()\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { ChainId } from '../enums'\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\nexport * from './currencyMap'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","import cache from \"memory-cache\";\n\nexport const cachedFetch = async (url: RequestInfo, options: RequestInit = {}, ttl = 60000) => {\n  const cachedResponse = cache.get(url);\n  if (cachedResponse) {\n    return cachedResponse;\n  } else {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    cache.put(url, data, ttl);\n    return data;\n  }\n};","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","_USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","USDT_ADDRESS","_USDT_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","_ROUTER_ADDRESS","SUSHI_ADDRESS","_SUSHI_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","STOP_LIMIT_ORDER_ADDRESS","_STOP_LIMIT_ORDER_ADD","ARCHER_ROUTER_ADDRESS","_ARCHER_ROUTER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","prototype","serialize","wrapped","address","NativeCurrency","_AbstractCurrency","_this","_inheritsLoose","validateAndParseAddress","getAddress","error","Token","call","_proto","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","_USDC","WETH9","_WETH","WNATIVE","_WNATIVE","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","_NATIVE","HARDHAT","HARDHAT2","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","InsufficientInputAmountError","_Error2","_this2","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","keccak256","pack","creationCode","defaultAbiCoder","encode","deployData","masterDeployerAddress","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","_ref2","concat","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","MINIMUM_LIQUIDITY","amount0","amount1","getLiquidityValue","computePairAddress","INIT_CODE_HASH","Pair","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","PoolType","Trade","amount","tradeType","EXACT_INPUT","i","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","RouteStatus","Pool","_info","info","_extends","minLiquidity","swapGasCost","type","RConstantProductPool","_Pool","ConstantProduct","RHybridPool","_Pool2","Hybrid","A","RWeightedPool","_Pool3","Weighted","weight0","weight1","RConcentratedLiquidityPool","_Pool4","_this3","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","CurrencySymbol","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","sign","primaryType","domain","verifyingContract","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","_signingKey$signDiges","SigningKey","signDigest","v","r","s","getSignatureWithProvider","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","_splitSignature","wrap","_context","prev","next","send","maker","JSON","stringify","splitSignature","sent","abrupt","stop","_x","_x2","_x3","apply","getSignatureWithProviderBentobox","_callee2","_splitSignature2","_context2","user","_x4","_x5","_x6","getSignatureBento","_ref3","_callee3","bentoApproval","_context3","_x7","_x8","_x9","SolidityType","ZERO_ADDRESS","UNDEPLOYED_ADDRESS","EthLogo","WethLogo","UsdcLogo","UsdtLogo","DaiLogo","CURRENCY_SYMBOL_LOGO","_CURRENCY_SYMBOL_LOGO","DAI","ETH","WETH","USDT","getCurrencyConstants","contracts","MAINNET_WETH","MAINNET_USDC","MAINNET_USDT","ROPSTEN_WETH","_contracts$ChainId$RO","_contracts$ChainId$RO2","testnet","_contracts$ChainId$RO3","_contracts$ChainId$RO4","ROPSTEN_USDC","_contracts$ChainId$RO5","_contracts$ChainId$RO6","_contracts$ChainId$RO7","_contracts$ChainId$RO8","ROPSTEN_USDT","_contracts$ChainId$RO9","_contracts$ChainId$RO10","_contracts$ChainId$RO11","_contracts$ChainId$RO12","HARDHAT_WETH","_contracts$ChainId$HA","_contracts$ChainId$HA2","hardhat","_contracts$ChainId$HA3","_contracts$ChainId$HA4","HARDHAT_USDC","_contracts$ChainId$HA5","_contracts$ChainId$HA6","_contracts$ChainId$HA7","_contracts$ChainId$HA8","HARDHAT_USDT","_contracts$ChainId$HA9","_contracts$ChainId$HA10","_contracts$ChainId$HA11","_contracts$ChainId$HA12","getSymbolCurrencyMap","_getCurrencyConstants2","_INIT_CODE_HASH","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","cachedFetch","url","options","ttl","cachedResponse","response","data","cache","fetch","json","put","toHex","Router","swapCallParameters","trade","etherIn","etherOut","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","prevD","nA","D","dP","abs","lte","HybridgetY","yPrev","c","y","OutOfLiquidity","calcPrice","takeFeeIntoAccount","parseInt","oneMinusFee","weightRatio","pow","hPool","ac4","revertPositive","f","out","hint","min","max","x0","y0","e","getBigNumber","valueBN","round","exp","log","LN2","console","assert","shift","mant","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","price","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","_getSignature","signOrderWithProvider","_signOrderWithProvider","_yield$getSignatureWi","_send","method","body","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","_proto2","fillOrderOpen","signer","extra","open","fillOrder","_fillOrder","gasPrice","nonce","_extra$forceExecution","forceExecution","_extra$open","func","orderArg","limitOrderContract","gasLimit","executed","Contract","abi","debug","estimateGas","t0","transaction","t","direction","xBN","yBN","yNewBN","lt","xNewBN","priceEffective","calcInputByPriceConstantMean","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","ConcentratedLiquidityOutByIn","sqrtD","accuracy","currencyA","currencyB","_getCurrencyConstants","_ChainId$MAINNET","_ChainId$ROPSTEN","_ChainId$HARDHAT","solidityType"],"mappings":"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"}