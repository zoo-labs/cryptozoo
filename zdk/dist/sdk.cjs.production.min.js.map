{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/errors.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/constants/currencyMap.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/constants/index.ts","../src/functions/cache.ts","../src/router.ts","../src/utils/MultiRouterMath.ts","../src/limitorder.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  HARDHAT = 1337,\n  HARDHAT2 = 1338,\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0x9A0D9920D92c178a58D99B455898Df2df22A2eE4',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.MATIC_TESTNET]: '0xc1400d49baa8e307B4462cD46E0a20109D25F50f',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.BSC_TESTNET]: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n\n  /**\n   * Returns token address. Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   */\n  public serialize(): string {\n    return this.wrapped.address\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n  public readonly address: string = '0x0000000000000000000000000000000000000000'\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from '../entities/Token'\nimport { ChainId } from '../enums'\nimport { TokenMap } from '../types/TokenMap'\nimport { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.HARDHAT]: Ether.onChain(ChainId.HARDHAT),\n  [ChainId.HARDHAT2]: Ether.onChain(ChainId.HARDHAT2),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants/numbers'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly twap: boolean\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.twap = twap\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","import { Token, Ether } from '../entities'\nimport { ChainId } from '../enums'\nimport { USDC_ADDRESS, WETH9_ADDRESS, USDT_ADDRESS } from './addresses'\n\nexport enum CurrencySymbol {\n  DAI = 'DAI',\n  ETH = 'ETH',\n  WETH = 'WETH',\n  USDC = 'USDC',\n  USDT = 'USDT',\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const UNDEPLOYED_ADDRESS = ZERO_ADDRESS\n\n// export const AvalancheLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/avax.jpg'\n// export const BinanceCoinLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/bnb.jpg'\nexport const EthLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\nexport const WethLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/weth.jpg'\nexport const UsdcLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdc.jpg'\nexport const UsdtLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdt.jpg'\nexport const DaiLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/dai.jpg'\n// export const xDaiLogo =\n//   'https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/xdai/assets/0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d/logo.svg'\n// export const FantomLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/ftm.jpg'\n// export const HarmonyLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg'\n// export const HecoLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/heco.jpg'\n// export const MaticLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/polygon.jpg'\n// export const MoonbeamLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\n// export const OKExLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/okt.jpg'\n// export const CeloLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/celo.jpg'\n// export const PalmLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/palm.jpg'\n// export const MovrLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/movr.jpg'\n\nexport const CURRENCY_SYMBOL_LOGO = {\n  [CurrencySymbol.DAI]: DaiLogo,\n  [CurrencySymbol.ETH]: EthLogo,\n  [CurrencySymbol.WETH]: WethLogo,\n  [CurrencySymbol.USDC]: UsdcLogo,\n  [CurrencySymbol.USDT]: UsdtLogo,\n}\n\nexport const getCurrencyConstants = (contracts: any) => {\n  const MAINNET_WETH = WETH9_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDC = USDC_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDT = USDT_ADDRESS[ChainId.MAINNET]\n\n  const ROPSTEN_WETH = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDC = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDT = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  const HARDHAT_WETH = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDC = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDT = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  return {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  }\n}\n\nexport const getCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.MAINNET),\n      [MAINNET_USDC]: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      [MAINNET_USDT]: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      [MAINNET_WETH]: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.ROPSTEN),\n      [ROPSTEN_USDC]: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      [ROPSTEN_USDT]: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      [ROPSTEN_WETH]: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.HARDHAT),\n      [HARDHAT_USDC]: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      [HARDHAT_USDT]: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      [HARDHAT_WETH]: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      ETH: Ether.onChain(ChainId.MAINNET),\n      USDC: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      ETH: Ether.onChain(ChainId.ROPSTEN),\n      USDC: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      ETH: Ether.onChain(ChainId.HARDHAT),\n      USDC: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrency = (contracts: any, chainId: ChainId, symbol: CurrencySymbol) => {\n  const map: any = getSymbolCurrencyMap(contracts)\n  const tokensBySymbol = map[chainId]\n  return tokensBySymbol[symbol]\n}\n\nexport const isNativeCurrency = (currency: string) => {\n  return currency === ZERO_ADDRESS\n}","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from '../enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString('hex')\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { ChainId } from '../enums'\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\nexport * from './currencyMap'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","import cache from \"memory-cache\";\n\nexport const cachedFetch = async (url: RequestInfo, options: RequestInit = {}, ttl = 60000) => {\n  const cachedResponse = cache.get(url);\n  if (cachedResponse) {\n    return cachedResponse;\n  } else {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    cache.put(url, data, ttl);\n    return data;\n  }\n};","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","USDT_ADDRESS","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","STOP_LIMIT_ORDER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","serialize","wrapped","address","NativeCurrency","_this","_inheritsLoose","validateAndParseAddress","getAddress","error","Token","_proto","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","WETH9","WNATIVE","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","HARDHAT","HARDHAT2","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","_this2","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","keccak256","pack","creationCode","defaultAbiCoder","encode","deployData","masterDeployerAddress","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","MINIMUM_LIQUIDITY","amount0","amount1","getLiquidityValue","computePairAddress","INIT_CODE_HASH","Pair","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","PoolType","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","RouteStatus","Pool","_info","info","minLiquidity","swapGasCost","type","RConstantProductPool","_Pool","ConstantProduct","RHybridPool","Hybrid","A","RWeightedPool","Weighted","weight0","weight1","RConcentratedLiquidityPool","_this3","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","CurrencySymbol","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","sign","primaryType","domain","verifyingContract","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","SigningKey","signDigest","v","r","s","getSignatureWithProvider","provider","_context","send","maker","JSON","stringify","_splitSignature","splitSignature","getSignatureWithProviderBentobox","_context2","user","_splitSignature2","getSignatureBento","bentoApproval","SolidityType","ZERO_ADDRESS","UNDEPLOYED_ADDRESS","EthLogo","WethLogo","UsdcLogo","UsdtLogo","DaiLogo","CURRENCY_SYMBOL_LOGO","DAI","ETH","WETH","USDT","getCurrencyConstants","contracts","MAINNET_WETH","MAINNET_USDC","MAINNET_USDT","ROPSTEN_WETH","testnet","ROPSTEN_USDC","ROPSTEN_USDT","HARDHAT_WETH","hardhat","HARDHAT_USDC","HARDHAT_USDT","getSymbolCurrencyMap","SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","cachedFetch","url","options","ttl","cachedResponse","cache","fetch","response","json","put","data","toHex","Router","swapCallParameters","trade","etherIn","etherOut","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","prevD","nA","D","dP","abs","lte","HybridgetY","yPrev","c","y","OutOfLiquidity","calcPrice","takeFeeIntoAccount","parseInt","oneMinusFee","weightRatio","pow","hPool","ac4","revertPositive","f","out","hint","min","max","x0","y0","e","getBigNumber","valueBN","round","exp","log","LN2","console","assert","shift","mant","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","price","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","signOrderWithProvider","_yield$getSignatureWi","method","body","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","_proto2","fillOrderOpen","signer","extra","open","fillOrder","gasPrice","nonce","forceExecution","func","orderArg","limitOrderContract","Contract","abi","executed","debug","_context3","estimateGas","gasLimit","transaction","t","direction","xBN","yBN","yNewBN","lt","xNewBN","priceEffective","calcInputByPriceConstantMean","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","ConcentratedLiquidityOutByIn","sqrtD","accuracy","currencyA","currencyB","solidityType"],"mappings":"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"}