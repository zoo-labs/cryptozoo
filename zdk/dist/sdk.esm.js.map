{"version":3,"file":"sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/errors.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/constants/currencyMap.ts","../src/constants/index.ts","../src/functions/cache.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts","../src/utils/MultiRouterMath.ts","../src/limitorder.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  HARDHAT = 1337,\n  HARDHAT2 = 1338,\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0x9A0D9920D92c178a58D99B455898Df2df22A2eE4',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.MATIC_TESTNET]: '0xc1400d49baa8e307B4462cD46E0a20109D25F50f',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.BSC_TESTNET]: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n\n  /**\n   * Returns token address. Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   */\n  public serialize(): string {\n    return this.wrapped.address\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n  public readonly address: string = '0x0000000000000000000000000000000000000000'\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from '../entities/Token'\nimport { ChainId } from '../enums'\nimport { TokenMap } from '../types/TokenMap'\nimport { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.HARDHAT]: Ether.onChain(ChainId.HARDHAT),\n  [ChainId.HARDHAT2]: Ether.onChain(ChainId.HARDHAT2),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants/numbers'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly twap: boolean\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.twap = twap\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from '../enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString('hex')\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { Token, Ether } from '../entities'\nimport { ChainId } from '../enums'\nimport { USDC_ADDRESS, WETH9_ADDRESS, USDT_ADDRESS } from './addresses'\n\nexport enum CurrencySymbol {\n  DAI = 'DAI',\n  ETH = 'ETH',\n  WETH = 'WETH',\n  USDC = 'USDC',\n  USDT = 'USDT',\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const UNDEPLOYED_ADDRESS = ZERO_ADDRESS\n\n// export const AvalancheLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/avax.jpg'\n// export const BinanceCoinLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/bnb.jpg'\nexport const EthLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\nexport const WethLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/weth.jpg'\nexport const UsdcLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdc.jpg'\nexport const UsdtLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdt.jpg'\nexport const DaiLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/dai.jpg'\n// export const xDaiLogo =\n//   'https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/xdai/assets/0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d/logo.svg'\n// export const FantomLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/ftm.jpg'\n// export const HarmonyLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg'\n// export const HecoLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/heco.jpg'\n// export const MaticLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/polygon.jpg'\n// export const MoonbeamLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\n// export const OKExLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/okt.jpg'\n// export const CeloLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/celo.jpg'\n// export const PalmLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/palm.jpg'\n// export const MovrLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/movr.jpg'\n\nexport const CURRENCY_SYMBOL_LOGO = {\n  [CurrencySymbol.DAI]: DaiLogo,\n  [CurrencySymbol.ETH]: EthLogo,\n  [CurrencySymbol.WETH]: WethLogo,\n  [CurrencySymbol.USDC]: UsdcLogo,\n  [CurrencySymbol.USDT]: UsdtLogo,\n}\n\nexport const getCurrencyConstants = (contracts: any) => {\n  const MAINNET_WETH = WETH9_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDC = USDC_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDT = USDT_ADDRESS[ChainId.MAINNET]\n\n  const ROPSTEN_WETH = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDC = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDT = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  const HARDHAT_WETH = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDC = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDT = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  return {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  }\n}\n\nexport const getCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.MAINNET),\n      [MAINNET_USDC]: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      [MAINNET_USDT]: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      [MAINNET_WETH]: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.ROPSTEN),\n      [ROPSTEN_USDC]: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      [ROPSTEN_USDT]: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      [ROPSTEN_WETH]: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.HARDHAT),\n      [HARDHAT_USDC]: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      [HARDHAT_USDT]: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      [HARDHAT_WETH]: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      ETH: Ether.onChain(ChainId.MAINNET),\n      USDC: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      ETH: Ether.onChain(ChainId.ROPSTEN),\n      USDC: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      ETH: Ether.onChain(ChainId.HARDHAT),\n      USDC: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrency = (contracts: any, chainId: ChainId, symbol: CurrencySymbol) => {\n  const map: any = getSymbolCurrencyMap(contracts)\n  const tokensBySymbol = map[chainId]\n  return tokensBySymbol[symbol]\n}\n\nexport const isNativeCurrency = (currency: string) => {\n  return currency === ZERO_ADDRESS\n}","import { ChainId } from '../enums'\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\nexport * from './currencyMap'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","import cache from \"memory-cache\";\n\nexport const cachedFetch = async (url: RequestInfo, options: RequestInit = {}, ttl = 60000) => {\n  const cachedResponse = cache.get(url);\n  if (cachedResponse) {\n    return cachedResponse;\n  } else {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    cache.put(url, data, ttl);\n    return data;\n  }\n};","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","USDT_ADDRESS","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","STOP_LIMIT_ORDER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","ACTION_ADD_ASSET","ACTION_REPAY","ACTION_REMOVE_ASSET","ACTION_REMOVE_COLLATERAL","ACTION_BORROW","ACTION_GET_REPAY_SHARE","ACTION_GET_REPAY_PART","ACTION_ACCRUE","ACTION_ADD_COLLATERAL","ACTION_UPDATE_EXCHANGE_RATE","ACTION_BENTO_DEPOSIT","ACTION_BENTO_WITHDRAW","ACTION_BENTO_TRANSFER","ACTION_BENTO_TRANSFER_MULTIPLE","ACTION_BENTO_SETAPPROVAL","ACTION_CALL","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","serialize","wrapped","address","NativeCurrency","validateAndParseAddress","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","HARDHAT","HARDHAT2","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","creationCode","deployData","masterDeployerAddress","keccak256","pack","defaultAbiCoder","encode","MASTER_DEPLOYER_ADDRESS","CONSTANT_PRODUCT_POOL_CREATION_CODE","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","token0","token1","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","MINIMUM_LIQUIDITY","amount0","amount1","getLiquidityValue","computePairAddress","INIT_CODE_HASH","Pair","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","PoolType","Pool","_info","info","minLiquidity","swapGasCost","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","A","RWeightedPool","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","RouteStatus","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","domain","verifyingContract","sign","primaryType","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","signingKey","SigningKey","signDigest","v","r","s","getSignatureWithProvider","provider","send","maker","JSON","stringify","signature","splitSignature","getSignatureWithProviderBentobox","user","getSignatureBento","bentoApproval","CurrencySymbol","ZERO_ADDRESS","UNDEPLOYED_ADDRESS","EthLogo","WethLogo","UsdcLogo","UsdtLogo","DaiLogo","CURRENCY_SYMBOL_LOGO","DAI","ETH","WETH","USDT","getCurrencyConstants","contracts","MAINNET_WETH","MAINNET_USDC","MAINNET_USDT","ROPSTEN_WETH","testnet","ROPSTEN_USDC","ROPSTEN_USDT","HARDHAT_WETH","hardhat","HARDHAT_USDC","HARDHAT_USDT","getCurrencyMap","getSymbolCurrencyMap","getSymbolCurrency","map","tokensBySymbol","isNativeCurrency","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","SOCKET_URL","cachedFetch","url","options","ttl","cachedResponse","cache","get","fetch","response","json","data","put","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","etherIn","etherOut","to","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","A_PRECISION","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","nA","prevD","D","dP","abs","lte","HybridgetY","c","yPrev","y","calcOutByIn","direction","xBN","yBN","parseInt","wPool","weightRatio","actualIn","out","pow","xNewBN","getBigNumber","yNewBN","dy","ConcentratedLiquidityOutByIn","OutOfLiquidity","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","calcInByOut","lt","round","console","calcPrice","takeFeeIntoAccount","oneMinusFee","hPool","ac4","Ds","calcInputByPriceConstantMean","price","t","calcInputByPrice","priceEffective","hint","revertPositive","ASSERT","f","closeValues","accuracy","calcSquareEquation","assert","sqrtD","min","max","x0","y0","e","valueBN","exp","log","LN2","shift","mant","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","signOrderWithProvider","digest","method","body","resp","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","fillOrderOpen","signer","extra","open","fillOrder","gasPrice","nonce","forceExecution","func","orderArg","limitOrderContract","Contract","abi","executed","debug","estimateGas","gasLimit","transaction"],"mappings":"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"}