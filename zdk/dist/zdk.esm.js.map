{"version":3,"file":"zdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/errors.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/constants/currencyMap.ts","../src/constants/index.ts","../src/functions/cache.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts","../src/utils/MultiRouterMath.ts","../src/limitorder.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  HARDHAT = 1337,\n  HARDHAT2 = 1338,\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0x9A0D9920D92c178a58D99B455898Df2df22A2eE4',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.MATIC_TESTNET]: '0xc1400d49baa8e307B4462cD46E0a20109D25F50f',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.BSC_TESTNET]: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n\n  /**\n   * Returns token address. Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   */\n  public serialize(): string {\n    return this.wrapped.address\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n  public readonly address: string = '0x0000000000000000000000000000000000000000'\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from '../entities/Token'\nimport { ChainId } from '../enums'\nimport { TokenMap } from '../types/TokenMap'\nimport { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse')\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.HARDHAT]: Ether.onChain(ChainId.HARDHAT),\n  [ChainId.HARDHAT2]: Ether.onChain(ChainId.HARDHAT2),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants/numbers'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  public readonly twap: boolean\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.twap = twap\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.fee, this.twap)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupply.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from '../enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString()\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { Token, Ether } from '../entities'\nimport { ChainId } from '../enums'\nimport { USDC_ADDRESS, WETH9_ADDRESS, USDT_ADDRESS } from './addresses'\n\nexport enum CurrencySymbol {\n  DAI = 'DAI',\n  ETH = 'ETH',\n  WETH = 'WETH',\n  USDC = 'USDC',\n  USDT = 'USDT',\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const UNDEPLOYED_ADDRESS = ZERO_ADDRESS\n\n// export const AvalancheLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/avax.jpg'\n// export const BinanceCoinLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/bnb.jpg'\nexport const EthLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\nexport const WethLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/weth.jpg'\nexport const UsdcLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdc.jpg'\nexport const UsdtLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/usdt.jpg'\nexport const DaiLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/dai.jpg'\n// export const xDaiLogo =\n//   'https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/xdai/assets/0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d/logo.svg'\n// export const FantomLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/ftm.jpg'\n// export const HarmonyLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg'\n// export const HecoLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/heco.jpg'\n// export const MaticLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/polygon.jpg'\n// export const MoonbeamLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/eth.jpg'\n// export const OKExLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/okt.jpg'\n// export const CeloLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/celo.jpg'\n// export const PalmLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/palm.jpg'\n// export const MovrLogo = 'https://raw.githubusercontent.com/sushiswap/icons/master/token/movr.jpg'\n\nexport const CURRENCY_SYMBOL_LOGO = {\n  [CurrencySymbol.DAI]: DaiLogo,\n  [CurrencySymbol.ETH]: EthLogo,\n  [CurrencySymbol.WETH]: WethLogo,\n  [CurrencySymbol.USDC]: UsdcLogo,\n  [CurrencySymbol.USDT]: UsdtLogo,\n}\n\nexport const getCurrencyConstants = (contracts: any) => {\n  const MAINNET_WETH = WETH9_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDC = USDC_ADDRESS[ChainId.MAINNET]\n  const MAINNET_USDT = USDT_ADDRESS[ChainId.MAINNET]\n\n  const ROPSTEN_WETH = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDC = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const ROPSTEN_USDT = contracts[ChainId.ROPSTEN.toString()]?.testnet?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  const HARDHAT_WETH = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.WETH?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDC = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDC?.address || UNDEPLOYED_ADDRESS\n  const HARDHAT_USDT = contracts[ChainId.HARDHAT.toString()]?.hardhat?.contracts?.USDT?.address || UNDEPLOYED_ADDRESS\n\n  return {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  }\n}\n\nexport const getCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.MAINNET),\n      [MAINNET_USDC]: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      [MAINNET_USDT]: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      [MAINNET_WETH]: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.ROPSTEN),\n      [ROPSTEN_USDC]: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      [ROPSTEN_USDT]: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      [ROPSTEN_WETH]: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      [ZERO_ADDRESS]: Ether.onChain(ChainId.HARDHAT),\n      [HARDHAT_USDC]: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      [HARDHAT_USDT]: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      [HARDHAT_WETH]: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrencyMap = (contracts: any) => {\n  const {\n    MAINNET_WETH,\n    MAINNET_USDC,\n    MAINNET_USDT,\n    ROPSTEN_WETH,\n    ROPSTEN_USDC,\n    ROPSTEN_USDT,\n    HARDHAT_WETH,\n    HARDHAT_USDC,\n    HARDHAT_USDT,\n  } = getCurrencyConstants(contracts)\n\n  return {\n    [ChainId.MAINNET]: {\n      ETH: Ether.onChain(ChainId.MAINNET),\n      USDC: new Token(ChainId.MAINNET, MAINNET_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.MAINNET, MAINNET_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.MAINNET, MAINNET_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.ROPSTEN]: {\n      ETH: Ether.onChain(ChainId.ROPSTEN),\n      USDC: new Token(ChainId.ROPSTEN, ROPSTEN_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.ROPSTEN, ROPSTEN_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.ROPSTEN, ROPSTEN_WETH, 18, 'WETH', 'WETH'),\n    },\n    [ChainId.HARDHAT]: {\n      ETH: Ether.onChain(ChainId.HARDHAT),\n      USDC: new Token(ChainId.HARDHAT, HARDHAT_USDC, 6, 'USDC', 'USDC'),\n      USDT: new Token(ChainId.HARDHAT, HARDHAT_USDT, 6, 'USDT', 'USDT'),\n      WETH: new Token(ChainId.HARDHAT, HARDHAT_WETH, 18, 'WETH', 'WETH'),\n    },\n  }\n}\n\nexport const getSymbolCurrency = (contracts: any, chainId: ChainId, symbol: CurrencySymbol) => {\n  const map: any = getSymbolCurrencyMap(contracts)\n  const tokensBySymbol = map[chainId]\n  return tokensBySymbol[symbol]\n}\n\nexport const isNativeCurrency = (currency: string) => {\n  return currency === ZERO_ADDRESS\n}","import { ChainId } from '../enums'\nimport JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\nexport * from './currencyMap'\n\n// export const INIT_CODE_HASH: string = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","import cache from \"memory-cache\";\n\nexport const cachedFetch = async (url: RequestInfo, options: RequestInit = {}, ttl = 60000) => {\n  const cachedResponse = cache.get(url);\n  if (cachedResponse) {\n    return cachedResponse;\n  } else {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    cache.put(url, data, ttl);\n    return data;\n  }\n};","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AVALANCHE","USDT_ADDRESS","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","FUSE","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","STOP_LIMIT_ORDER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","ACTION_ADD_ASSET","ACTION_REPAY","ACTION_REMOVE_ASSET","ACTION_REMOVE_COLLATERAL","ACTION_BORROW","ACTION_GET_REPAY_SHARE","ACTION_GET_REPAY_PART","ACTION_ACCRUE","ACTION_ADD_COLLATERAL","ACTION_UPDATE_EXCHANGE_RATE","ACTION_BENTO_DEPOSIT","ACTION_BENTO_WITHDRAW","ACTION_BENTO_TRANSFER","ACTION_BENTO_TRANSFER_MULTIPLE","ACTION_BENTO_SETAPPROVAL","ACTION_CALL","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","serialize","wrapped","address","NativeCurrency","validateAndParseAddress","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","NATIVE","HARDHAT","HARDHAT2","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","creationCode","deployData","masterDeployerAddress","keccak256","pack","defaultAbiCoder","encode","MASTER_DEPLOYER_ADDRESS","CONSTANT_PRODUCT_POOL_CREATION_CODE","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","token0","token1","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","MINIMUM_LIQUIDITY","amount0","amount1","getLiquidityValue","computePairAddress","INIT_CODE_HASH","Pair","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","PoolType","Pool","_info","info","minLiquidity","swapGasCost","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","A","RWeightedPool","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","RouteStatus","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","domain","verifyingContract","sign","primaryType","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","signingKey","SigningKey","signDigest","v","r","s","getSignatureWithProvider","provider","send","maker","JSON","stringify","signature","splitSignature","getSignatureWithProviderBentobox","user","getSignatureBento","bentoApproval","CurrencySymbol","ZERO_ADDRESS","UNDEPLOYED_ADDRESS","EthLogo","WethLogo","UsdcLogo","UsdtLogo","DaiLogo","CURRENCY_SYMBOL_LOGO","DAI","ETH","WETH","USDT","getCurrencyConstants","contracts","MAINNET_WETH","MAINNET_USDC","MAINNET_USDT","ROPSTEN_WETH","testnet","ROPSTEN_USDC","ROPSTEN_USDT","HARDHAT_WETH","hardhat","HARDHAT_USDC","HARDHAT_USDT","getCurrencyMap","getSymbolCurrencyMap","getSymbolCurrency","map","tokensBySymbol","isNativeCurrency","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","SOCKET_URL","cachedFetch","url","options","ttl","cachedResponse","cache","get","fetch","response","json","data","put","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","etherIn","etherOut","to","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","A_PRECISION","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","nA","prevD","D","dP","abs","lte","HybridgetY","c","yPrev","y","calcOutByIn","direction","xBN","yBN","parseInt","wPool","weightRatio","actualIn","out","pow","xNewBN","getBigNumber","yNewBN","dy","ConcentratedLiquidityOutByIn","OutOfLiquidity","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","calcInByOut","lt","round","console","calcPrice","takeFeeIntoAccount","oneMinusFee","hPool","ac4","Ds","calcInputByPriceConstantMean","price","t","calcInputByPrice","priceEffective","hint","revertPositive","ASSERT","f","closeValues","accuracy","calcSquareEquation","assert","sqrtD","min","max","x0","y0","e","valueBN","exp","log","LN2","shift","mant","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","signOrderWithProvider","digest","method","body","resp","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","fillOrderOpen","signer","extra","open","fillOrder","gasPrice","nonce","forceExecution","func","orderArg","limitOrderContract","Contract","abi","executed","debug","estimateGas","gasLimit","transaction"],"mappings":"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"}